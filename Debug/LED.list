
LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004988  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  08004b50  08004b50  00014b50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d58  08004d58  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004d58  08004d58  00014d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d60  08004d60  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d60  08004d60  00014d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d64  08004d64  00014d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004d68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006a4  20000010  08004d74  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200006b4  08004d74  000206b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c6ae  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e44  00000000  00000000  0002c72d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009f0  00000000  00000000  0002e578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000079e  00000000  00000000  0002ef68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021b27  00000000  00000000  0002f706  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cff2  00000000  00000000  0005122d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cca32  00000000  00000000  0005e21f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002c9c  00000000  00000000  0012ac54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  0012d8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000010 	.word	0x20000010
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004b38 	.word	0x08004b38

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000014 	.word	0x20000014
 8000204:	08004b38 	.word	0x08004b38

08000208 <__aeabi_dmul>:
 8000208:	b570      	push	{r4, r5, r6, lr}
 800020a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800020e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000212:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000216:	bf1d      	ittte	ne
 8000218:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800021c:	ea94 0f0c 	teqne	r4, ip
 8000220:	ea95 0f0c 	teqne	r5, ip
 8000224:	f000 f8de 	bleq	80003e4 <__aeabi_dmul+0x1dc>
 8000228:	442c      	add	r4, r5
 800022a:	ea81 0603 	eor.w	r6, r1, r3
 800022e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000232:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000236:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800023a:	bf18      	it	ne
 800023c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000240:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000244:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000248:	d038      	beq.n	80002bc <__aeabi_dmul+0xb4>
 800024a:	fba0 ce02 	umull	ip, lr, r0, r2
 800024e:	f04f 0500 	mov.w	r5, #0
 8000252:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000256:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800025a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800025e:	f04f 0600 	mov.w	r6, #0
 8000262:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000266:	f09c 0f00 	teq	ip, #0
 800026a:	bf18      	it	ne
 800026c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000270:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000274:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000278:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800027c:	d204      	bcs.n	8000288 <__aeabi_dmul+0x80>
 800027e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000282:	416d      	adcs	r5, r5
 8000284:	eb46 0606 	adc.w	r6, r6, r6
 8000288:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800028c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000290:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000294:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000298:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800029c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002a0:	bf88      	it	hi
 80002a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002a6:	d81e      	bhi.n	80002e6 <__aeabi_dmul+0xde>
 80002a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	pop	{r4, r5, r6, pc}
 80002bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002c0:	ea46 0101 	orr.w	r1, r6, r1
 80002c4:	ea40 0002 	orr.w	r0, r0, r2
 80002c8:	ea81 0103 	eor.w	r1, r1, r3
 80002cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002d0:	bfc2      	ittt	gt
 80002d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002da:	bd70      	popgt	{r4, r5, r6, pc}
 80002dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002e0:	f04f 0e00 	mov.w	lr, #0
 80002e4:	3c01      	subs	r4, #1
 80002e6:	f300 80ab 	bgt.w	8000440 <__aeabi_dmul+0x238>
 80002ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ee:	bfde      	ittt	le
 80002f0:	2000      	movle	r0, #0
 80002f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002f6:	bd70      	pople	{r4, r5, r6, pc}
 80002f8:	f1c4 0400 	rsb	r4, r4, #0
 80002fc:	3c20      	subs	r4, #32
 80002fe:	da35      	bge.n	800036c <__aeabi_dmul+0x164>
 8000300:	340c      	adds	r4, #12
 8000302:	dc1b      	bgt.n	800033c <__aeabi_dmul+0x134>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f305 	lsl.w	r3, r0, r5
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f205 	lsl.w	r2, r1, r5
 8000318:	ea40 0002 	orr.w	r0, r0, r2
 800031c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000320:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000324:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000328:	fa21 f604 	lsr.w	r6, r1, r4
 800032c:	eb42 0106 	adc.w	r1, r2, r6
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 040c 	rsb	r4, r4, #12
 8000340:	f1c4 0520 	rsb	r5, r4, #32
 8000344:	fa00 f304 	lsl.w	r3, r0, r4
 8000348:	fa20 f005 	lsr.w	r0, r0, r5
 800034c:	fa01 f204 	lsl.w	r2, r1, r4
 8000350:	ea40 0002 	orr.w	r0, r0, r2
 8000354:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000358:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f1c4 0520 	rsb	r5, r4, #32
 8000370:	fa00 f205 	lsl.w	r2, r0, r5
 8000374:	ea4e 0e02 	orr.w	lr, lr, r2
 8000378:	fa20 f304 	lsr.w	r3, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea43 0302 	orr.w	r3, r3, r2
 8000384:	fa21 f004 	lsr.w	r0, r1, r4
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	fa21 f204 	lsr.w	r2, r1, r4
 8000390:	ea20 0002 	bic.w	r0, r0, r2
 8000394:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f094 0f00 	teq	r4, #0
 80003a8:	d10f      	bne.n	80003ca <__aeabi_dmul+0x1c2>
 80003aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003ae:	0040      	lsls	r0, r0, #1
 80003b0:	eb41 0101 	adc.w	r1, r1, r1
 80003b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3c01      	subeq	r4, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1a6>
 80003be:	ea41 0106 	orr.w	r1, r1, r6
 80003c2:	f095 0f00 	teq	r5, #0
 80003c6:	bf18      	it	ne
 80003c8:	4770      	bxne	lr
 80003ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ce:	0052      	lsls	r2, r2, #1
 80003d0:	eb43 0303 	adc.w	r3, r3, r3
 80003d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3d01      	subeq	r5, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1c6>
 80003de:	ea43 0306 	orr.w	r3, r3, r6
 80003e2:	4770      	bx	lr
 80003e4:	ea94 0f0c 	teq	r4, ip
 80003e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ec:	bf18      	it	ne
 80003ee:	ea95 0f0c 	teqne	r5, ip
 80003f2:	d00c      	beq.n	800040e <__aeabi_dmul+0x206>
 80003f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f8:	bf18      	it	ne
 80003fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fe:	d1d1      	bne.n	80003a4 <__aeabi_dmul+0x19c>
 8000400:	ea81 0103 	eor.w	r1, r1, r3
 8000404:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000408:	f04f 0000 	mov.w	r0, #0
 800040c:	bd70      	pop	{r4, r5, r6, pc}
 800040e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000412:	bf06      	itte	eq
 8000414:	4610      	moveq	r0, r2
 8000416:	4619      	moveq	r1, r3
 8000418:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041c:	d019      	beq.n	8000452 <__aeabi_dmul+0x24a>
 800041e:	ea94 0f0c 	teq	r4, ip
 8000422:	d102      	bne.n	800042a <__aeabi_dmul+0x222>
 8000424:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000428:	d113      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800042a:	ea95 0f0c 	teq	r5, ip
 800042e:	d105      	bne.n	800043c <__aeabi_dmul+0x234>
 8000430:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000434:	bf1c      	itt	ne
 8000436:	4610      	movne	r0, r2
 8000438:	4619      	movne	r1, r3
 800043a:	d10a      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800043c:	ea81 0103 	eor.w	r1, r1, r3
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000444:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000448:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800044c:	f04f 0000 	mov.w	r0, #0
 8000450:	bd70      	pop	{r4, r5, r6, pc}
 8000452:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000456:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800045a:	bd70      	pop	{r4, r5, r6, pc}

0800045c <__aeabi_drsub>:
 800045c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e002      	b.n	8000468 <__adddf3>
 8000462:	bf00      	nop

08000464 <__aeabi_dsub>:
 8000464:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000468 <__adddf3>:
 8000468:	b530      	push	{r4, r5, lr}
 800046a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800046e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000472:	ea94 0f05 	teq	r4, r5
 8000476:	bf08      	it	eq
 8000478:	ea90 0f02 	teqeq	r0, r2
 800047c:	bf1f      	itttt	ne
 800047e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000482:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000486:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800048a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048e:	f000 80e2 	beq.w	8000656 <__adddf3+0x1ee>
 8000492:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000496:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800049a:	bfb8      	it	lt
 800049c:	426d      	neglt	r5, r5
 800049e:	dd0c      	ble.n	80004ba <__adddf3+0x52>
 80004a0:	442c      	add	r4, r5
 80004a2:	ea80 0202 	eor.w	r2, r0, r2
 80004a6:	ea81 0303 	eor.w	r3, r1, r3
 80004aa:	ea82 0000 	eor.w	r0, r2, r0
 80004ae:	ea83 0101 	eor.w	r1, r3, r1
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	2d36      	cmp	r5, #54	; 0x36
 80004bc:	bf88      	it	hi
 80004be:	bd30      	pophi	{r4, r5, pc}
 80004c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004d0:	d002      	beq.n	80004d8 <__adddf3+0x70>
 80004d2:	4240      	negs	r0, r0
 80004d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004e4:	d002      	beq.n	80004ec <__adddf3+0x84>
 80004e6:	4252      	negs	r2, r2
 80004e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ec:	ea94 0f05 	teq	r4, r5
 80004f0:	f000 80a7 	beq.w	8000642 <__adddf3+0x1da>
 80004f4:	f1a4 0401 	sub.w	r4, r4, #1
 80004f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004fc:	db0d      	blt.n	800051a <__adddf3+0xb2>
 80004fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000502:	fa22 f205 	lsr.w	r2, r2, r5
 8000506:	1880      	adds	r0, r0, r2
 8000508:	f141 0100 	adc.w	r1, r1, #0
 800050c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000510:	1880      	adds	r0, r0, r2
 8000512:	fa43 f305 	asr.w	r3, r3, r5
 8000516:	4159      	adcs	r1, r3
 8000518:	e00e      	b.n	8000538 <__adddf3+0xd0>
 800051a:	f1a5 0520 	sub.w	r5, r5, #32
 800051e:	f10e 0e20 	add.w	lr, lr, #32
 8000522:	2a01      	cmp	r2, #1
 8000524:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000528:	bf28      	it	cs
 800052a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800052e:	fa43 f305 	asr.w	r3, r3, r5
 8000532:	18c0      	adds	r0, r0, r3
 8000534:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	d507      	bpl.n	800054e <__adddf3+0xe6>
 800053e:	f04f 0e00 	mov.w	lr, #0
 8000542:	f1dc 0c00 	rsbs	ip, ip, #0
 8000546:	eb7e 0000 	sbcs.w	r0, lr, r0
 800054a:	eb6e 0101 	sbc.w	r1, lr, r1
 800054e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000552:	d31b      	bcc.n	800058c <__adddf3+0x124>
 8000554:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000558:	d30c      	bcc.n	8000574 <__adddf3+0x10c>
 800055a:	0849      	lsrs	r1, r1, #1
 800055c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000560:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000564:	f104 0401 	add.w	r4, r4, #1
 8000568:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800056c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000570:	f080 809a 	bcs.w	80006a8 <__adddf3+0x240>
 8000574:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	ea41 0105 	orr.w	r1, r1, r5
 800058a:	bd30      	pop	{r4, r5, pc}
 800058c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000590:	4140      	adcs	r0, r0
 8000592:	eb41 0101 	adc.w	r1, r1, r1
 8000596:	3c01      	subs	r4, #1
 8000598:	bf28      	it	cs
 800059a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800059e:	d2e9      	bcs.n	8000574 <__adddf3+0x10c>
 80005a0:	f091 0f00 	teq	r1, #0
 80005a4:	bf04      	itt	eq
 80005a6:	4601      	moveq	r1, r0
 80005a8:	2000      	moveq	r0, #0
 80005aa:	fab1 f381 	clz	r3, r1
 80005ae:	bf08      	it	eq
 80005b0:	3320      	addeq	r3, #32
 80005b2:	f1a3 030b 	sub.w	r3, r3, #11
 80005b6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ba:	da0c      	bge.n	80005d6 <__adddf3+0x16e>
 80005bc:	320c      	adds	r2, #12
 80005be:	dd08      	ble.n	80005d2 <__adddf3+0x16a>
 80005c0:	f102 0c14 	add.w	ip, r2, #20
 80005c4:	f1c2 020c 	rsb	r2, r2, #12
 80005c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005cc:	fa21 f102 	lsr.w	r1, r1, r2
 80005d0:	e00c      	b.n	80005ec <__adddf3+0x184>
 80005d2:	f102 0214 	add.w	r2, r2, #20
 80005d6:	bfd8      	it	le
 80005d8:	f1c2 0c20 	rsble	ip, r2, #32
 80005dc:	fa01 f102 	lsl.w	r1, r1, r2
 80005e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005e4:	bfdc      	itt	le
 80005e6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ea:	4090      	lslle	r0, r2
 80005ec:	1ae4      	subs	r4, r4, r3
 80005ee:	bfa2      	ittt	ge
 80005f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005f4:	4329      	orrge	r1, r5
 80005f6:	bd30      	popge	{r4, r5, pc}
 80005f8:	ea6f 0404 	mvn.w	r4, r4
 80005fc:	3c1f      	subs	r4, #31
 80005fe:	da1c      	bge.n	800063a <__adddf3+0x1d2>
 8000600:	340c      	adds	r4, #12
 8000602:	dc0e      	bgt.n	8000622 <__adddf3+0x1ba>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0220 	rsb	r2, r4, #32
 800060c:	fa20 f004 	lsr.w	r0, r0, r4
 8000610:	fa01 f302 	lsl.w	r3, r1, r2
 8000614:	ea40 0003 	orr.w	r0, r0, r3
 8000618:	fa21 f304 	lsr.w	r3, r1, r4
 800061c:	ea45 0103 	orr.w	r1, r5, r3
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	f1c4 040c 	rsb	r4, r4, #12
 8000626:	f1c4 0220 	rsb	r2, r4, #32
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 f304 	lsl.w	r3, r1, r4
 8000632:	ea40 0003 	orr.w	r0, r0, r3
 8000636:	4629      	mov	r1, r5
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	fa21 f004 	lsr.w	r0, r1, r4
 800063e:	4629      	mov	r1, r5
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f094 0f00 	teq	r4, #0
 8000646:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800064a:	bf06      	itte	eq
 800064c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000650:	3401      	addeq	r4, #1
 8000652:	3d01      	subne	r5, #1
 8000654:	e74e      	b.n	80004f4 <__adddf3+0x8c>
 8000656:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800065a:	bf18      	it	ne
 800065c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000660:	d029      	beq.n	80006b6 <__adddf3+0x24e>
 8000662:	ea94 0f05 	teq	r4, r5
 8000666:	bf08      	it	eq
 8000668:	ea90 0f02 	teqeq	r0, r2
 800066c:	d005      	beq.n	800067a <__adddf3+0x212>
 800066e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000672:	bf04      	itt	eq
 8000674:	4619      	moveq	r1, r3
 8000676:	4610      	moveq	r0, r2
 8000678:	bd30      	pop	{r4, r5, pc}
 800067a:	ea91 0f03 	teq	r1, r3
 800067e:	bf1e      	ittt	ne
 8000680:	2100      	movne	r1, #0
 8000682:	2000      	movne	r0, #0
 8000684:	bd30      	popne	{r4, r5, pc}
 8000686:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800068a:	d105      	bne.n	8000698 <__adddf3+0x230>
 800068c:	0040      	lsls	r0, r0, #1
 800068e:	4149      	adcs	r1, r1
 8000690:	bf28      	it	cs
 8000692:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd30      	pop	{r4, r5, pc}
 8000698:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800069c:	bf3c      	itt	cc
 800069e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006a2:	bd30      	popcc	{r4, r5, pc}
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006b0:	f04f 0000 	mov.w	r0, #0
 80006b4:	bd30      	pop	{r4, r5, pc}
 80006b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ba:	bf1a      	itte	ne
 80006bc:	4619      	movne	r1, r3
 80006be:	4610      	movne	r0, r2
 80006c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006c4:	bf1c      	itt	ne
 80006c6:	460b      	movne	r3, r1
 80006c8:	4602      	movne	r2, r0
 80006ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ce:	bf06      	itte	eq
 80006d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006d4:	ea91 0f03 	teqeq	r1, r3
 80006d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	bf00      	nop

080006e0 <__aeabi_ui2d>:
 80006e0:	f090 0f00 	teq	r0, #0
 80006e4:	bf04      	itt	eq
 80006e6:	2100      	moveq	r1, #0
 80006e8:	4770      	bxeq	lr
 80006ea:	b530      	push	{r4, r5, lr}
 80006ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f4:	f04f 0500 	mov.w	r5, #0
 80006f8:	f04f 0100 	mov.w	r1, #0
 80006fc:	e750      	b.n	80005a0 <__adddf3+0x138>
 80006fe:	bf00      	nop

08000700 <__aeabi_i2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000714:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000718:	bf48      	it	mi
 800071a:	4240      	negmi	r0, r0
 800071c:	f04f 0100 	mov.w	r1, #0
 8000720:	e73e      	b.n	80005a0 <__adddf3+0x138>
 8000722:	bf00      	nop

08000724 <__aeabi_f2d>:
 8000724:	0042      	lsls	r2, r0, #1
 8000726:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800072a:	ea4f 0131 	mov.w	r1, r1, rrx
 800072e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000732:	bf1f      	itttt	ne
 8000734:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000738:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800073c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000740:	4770      	bxne	lr
 8000742:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000746:	bf08      	it	eq
 8000748:	4770      	bxeq	lr
 800074a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800074e:	bf04      	itt	eq
 8000750:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000754:	4770      	bxeq	lr
 8000756:	b530      	push	{r4, r5, lr}
 8000758:	f44f 7460 	mov.w	r4, #896	; 0x380
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	e71c      	b.n	80005a0 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_ul2d>:
 8000768:	ea50 0201 	orrs.w	r2, r0, r1
 800076c:	bf08      	it	eq
 800076e:	4770      	bxeq	lr
 8000770:	b530      	push	{r4, r5, lr}
 8000772:	f04f 0500 	mov.w	r5, #0
 8000776:	e00a      	b.n	800078e <__aeabi_l2d+0x16>

08000778 <__aeabi_l2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000786:	d502      	bpl.n	800078e <__aeabi_l2d+0x16>
 8000788:	4240      	negs	r0, r0
 800078a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800078e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000792:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000796:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800079a:	f43f aed8 	beq.w	800054e <__adddf3+0xe6>
 800079e:	f04f 0203 	mov.w	r2, #3
 80007a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007a6:	bf18      	it	ne
 80007a8:	3203      	addne	r2, #3
 80007aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ae:	bf18      	it	ne
 80007b0:	3203      	addne	r2, #3
 80007b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007b6:	f1c2 0320 	rsb	r3, r2, #32
 80007ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80007be:	fa20 f002 	lsr.w	r0, r0, r2
 80007c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007c6:	ea40 000e 	orr.w	r0, r0, lr
 80007ca:	fa21 f102 	lsr.w	r1, r1, r2
 80007ce:	4414      	add	r4, r2
 80007d0:	e6bd      	b.n	800054e <__adddf3+0xe6>
 80007d2:	bf00      	nop

080007d4 <__gedf2>:
 80007d4:	f04f 3cff 	mov.w	ip, #4294967295
 80007d8:	e006      	b.n	80007e8 <__cmpdf2+0x4>
 80007da:	bf00      	nop

080007dc <__ledf2>:
 80007dc:	f04f 0c01 	mov.w	ip, #1
 80007e0:	e002      	b.n	80007e8 <__cmpdf2+0x4>
 80007e2:	bf00      	nop

080007e4 <__cmpdf2>:
 80007e4:	f04f 0c01 	mov.w	ip, #1
 80007e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007fe:	d01b      	beq.n	8000838 <__cmpdf2+0x54>
 8000800:	b001      	add	sp, #4
 8000802:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000806:	bf0c      	ite	eq
 8000808:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800080c:	ea91 0f03 	teqne	r1, r3
 8000810:	bf02      	ittt	eq
 8000812:	ea90 0f02 	teqeq	r0, r2
 8000816:	2000      	moveq	r0, #0
 8000818:	4770      	bxeq	lr
 800081a:	f110 0f00 	cmn.w	r0, #0
 800081e:	ea91 0f03 	teq	r1, r3
 8000822:	bf58      	it	pl
 8000824:	4299      	cmppl	r1, r3
 8000826:	bf08      	it	eq
 8000828:	4290      	cmpeq	r0, r2
 800082a:	bf2c      	ite	cs
 800082c:	17d8      	asrcs	r0, r3, #31
 800082e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000832:	f040 0001 	orr.w	r0, r0, #1
 8000836:	4770      	bx	lr
 8000838:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800083c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000840:	d102      	bne.n	8000848 <__cmpdf2+0x64>
 8000842:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000846:	d107      	bne.n	8000858 <__cmpdf2+0x74>
 8000848:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800084c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000850:	d1d6      	bne.n	8000800 <__cmpdf2+0x1c>
 8000852:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000856:	d0d3      	beq.n	8000800 <__cmpdf2+0x1c>
 8000858:	f85d 0b04 	ldr.w	r0, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop

08000860 <__aeabi_cdrcmple>:
 8000860:	4684      	mov	ip, r0
 8000862:	4610      	mov	r0, r2
 8000864:	4662      	mov	r2, ip
 8000866:	468c      	mov	ip, r1
 8000868:	4619      	mov	r1, r3
 800086a:	4663      	mov	r3, ip
 800086c:	e000      	b.n	8000870 <__aeabi_cdcmpeq>
 800086e:	bf00      	nop

08000870 <__aeabi_cdcmpeq>:
 8000870:	b501      	push	{r0, lr}
 8000872:	f7ff ffb7 	bl	80007e4 <__cmpdf2>
 8000876:	2800      	cmp	r0, #0
 8000878:	bf48      	it	mi
 800087a:	f110 0f00 	cmnmi.w	r0, #0
 800087e:	bd01      	pop	{r0, pc}

08000880 <__aeabi_dcmpeq>:
 8000880:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000884:	f7ff fff4 	bl	8000870 <__aeabi_cdcmpeq>
 8000888:	bf0c      	ite	eq
 800088a:	2001      	moveq	r0, #1
 800088c:	2000      	movne	r0, #0
 800088e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000892:	bf00      	nop

08000894 <__aeabi_dcmplt>:
 8000894:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000898:	f7ff ffea 	bl	8000870 <__aeabi_cdcmpeq>
 800089c:	bf34      	ite	cc
 800089e:	2001      	movcc	r0, #1
 80008a0:	2000      	movcs	r0, #0
 80008a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a6:	bf00      	nop

080008a8 <__aeabi_dcmple>:
 80008a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008ac:	f7ff ffe0 	bl	8000870 <__aeabi_cdcmpeq>
 80008b0:	bf94      	ite	ls
 80008b2:	2001      	movls	r0, #1
 80008b4:	2000      	movhi	r0, #0
 80008b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008ba:	bf00      	nop

080008bc <__aeabi_dcmpge>:
 80008bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008c0:	f7ff ffce 	bl	8000860 <__aeabi_cdrcmple>
 80008c4:	bf94      	ite	ls
 80008c6:	2001      	movls	r0, #1
 80008c8:	2000      	movhi	r0, #0
 80008ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80008ce:	bf00      	nop

080008d0 <__aeabi_dcmpgt>:
 80008d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008d4:	f7ff ffc4 	bl	8000860 <__aeabi_cdrcmple>
 80008d8:	bf34      	ite	cc
 80008da:	2001      	movcc	r0, #1
 80008dc:	2000      	movcs	r0, #0
 80008de:	f85d fb08 	ldr.w	pc, [sp], #8
 80008e2:	bf00      	nop

080008e4 <__aeabi_d2iz>:
 80008e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008e8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008ec:	d215      	bcs.n	800091a <__aeabi_d2iz+0x36>
 80008ee:	d511      	bpl.n	8000914 <__aeabi_d2iz+0x30>
 80008f0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008f4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008f8:	d912      	bls.n	8000920 <__aeabi_d2iz+0x3c>
 80008fa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000902:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000906:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800090a:	fa23 f002 	lsr.w	r0, r3, r2
 800090e:	bf18      	it	ne
 8000910:	4240      	negne	r0, r0
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d105      	bne.n	800092c <__aeabi_d2iz+0x48>
 8000920:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000924:	bf08      	it	eq
 8000926:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800092a:	4770      	bx	lr
 800092c:	f04f 0000 	mov.w	r0, #0
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop

08000934 <__aeabi_d2uiz>:
 8000934:	004a      	lsls	r2, r1, #1
 8000936:	d211      	bcs.n	800095c <__aeabi_d2uiz+0x28>
 8000938:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800093c:	d211      	bcs.n	8000962 <__aeabi_d2uiz+0x2e>
 800093e:	d50d      	bpl.n	800095c <__aeabi_d2uiz+0x28>
 8000940:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000944:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000948:	d40e      	bmi.n	8000968 <__aeabi_d2uiz+0x34>
 800094a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800094e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000952:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000956:	fa23 f002 	lsr.w	r0, r3, r2
 800095a:	4770      	bx	lr
 800095c:	f04f 0000 	mov.w	r0, #0
 8000960:	4770      	bx	lr
 8000962:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000966:	d102      	bne.n	800096e <__aeabi_d2uiz+0x3a>
 8000968:	f04f 30ff 	mov.w	r0, #4294967295
 800096c:	4770      	bx	lr
 800096e:	f04f 0000 	mov.w	r0, #0
 8000972:	4770      	bx	lr

08000974 <__aeabi_uldivmod>:
 8000974:	b953      	cbnz	r3, 800098c <__aeabi_uldivmod+0x18>
 8000976:	b94a      	cbnz	r2, 800098c <__aeabi_uldivmod+0x18>
 8000978:	2900      	cmp	r1, #0
 800097a:	bf08      	it	eq
 800097c:	2800      	cmpeq	r0, #0
 800097e:	bf1c      	itt	ne
 8000980:	f04f 31ff 	movne.w	r1, #4294967295
 8000984:	f04f 30ff 	movne.w	r0, #4294967295
 8000988:	f000 b970 	b.w	8000c6c <__aeabi_idiv0>
 800098c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000990:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000994:	f000 f806 	bl	80009a4 <__udivmoddi4>
 8000998:	f8dd e004 	ldr.w	lr, [sp, #4]
 800099c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009a0:	b004      	add	sp, #16
 80009a2:	4770      	bx	lr

080009a4 <__udivmoddi4>:
 80009a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009a8:	9e08      	ldr	r6, [sp, #32]
 80009aa:	460d      	mov	r5, r1
 80009ac:	4604      	mov	r4, r0
 80009ae:	460f      	mov	r7, r1
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d14a      	bne.n	8000a4a <__udivmoddi4+0xa6>
 80009b4:	428a      	cmp	r2, r1
 80009b6:	4694      	mov	ip, r2
 80009b8:	d965      	bls.n	8000a86 <__udivmoddi4+0xe2>
 80009ba:	fab2 f382 	clz	r3, r2
 80009be:	b143      	cbz	r3, 80009d2 <__udivmoddi4+0x2e>
 80009c0:	fa02 fc03 	lsl.w	ip, r2, r3
 80009c4:	f1c3 0220 	rsb	r2, r3, #32
 80009c8:	409f      	lsls	r7, r3
 80009ca:	fa20 f202 	lsr.w	r2, r0, r2
 80009ce:	4317      	orrs	r7, r2
 80009d0:	409c      	lsls	r4, r3
 80009d2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80009d6:	fa1f f58c 	uxth.w	r5, ip
 80009da:	fbb7 f1fe 	udiv	r1, r7, lr
 80009de:	0c22      	lsrs	r2, r4, #16
 80009e0:	fb0e 7711 	mls	r7, lr, r1, r7
 80009e4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80009e8:	fb01 f005 	mul.w	r0, r1, r5
 80009ec:	4290      	cmp	r0, r2
 80009ee:	d90a      	bls.n	8000a06 <__udivmoddi4+0x62>
 80009f0:	eb1c 0202 	adds.w	r2, ip, r2
 80009f4:	f101 37ff 	add.w	r7, r1, #4294967295
 80009f8:	f080 811c 	bcs.w	8000c34 <__udivmoddi4+0x290>
 80009fc:	4290      	cmp	r0, r2
 80009fe:	f240 8119 	bls.w	8000c34 <__udivmoddi4+0x290>
 8000a02:	3902      	subs	r1, #2
 8000a04:	4462      	add	r2, ip
 8000a06:	1a12      	subs	r2, r2, r0
 8000a08:	b2a4      	uxth	r4, r4
 8000a0a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a0e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a12:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a16:	fb00 f505 	mul.w	r5, r0, r5
 8000a1a:	42a5      	cmp	r5, r4
 8000a1c:	d90a      	bls.n	8000a34 <__udivmoddi4+0x90>
 8000a1e:	eb1c 0404 	adds.w	r4, ip, r4
 8000a22:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a26:	f080 8107 	bcs.w	8000c38 <__udivmoddi4+0x294>
 8000a2a:	42a5      	cmp	r5, r4
 8000a2c:	f240 8104 	bls.w	8000c38 <__udivmoddi4+0x294>
 8000a30:	4464      	add	r4, ip
 8000a32:	3802      	subs	r0, #2
 8000a34:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a38:	1b64      	subs	r4, r4, r5
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	b11e      	cbz	r6, 8000a46 <__udivmoddi4+0xa2>
 8000a3e:	40dc      	lsrs	r4, r3
 8000a40:	2300      	movs	r3, #0
 8000a42:	e9c6 4300 	strd	r4, r3, [r6]
 8000a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a4a:	428b      	cmp	r3, r1
 8000a4c:	d908      	bls.n	8000a60 <__udivmoddi4+0xbc>
 8000a4e:	2e00      	cmp	r6, #0
 8000a50:	f000 80ed 	beq.w	8000c2e <__udivmoddi4+0x28a>
 8000a54:	2100      	movs	r1, #0
 8000a56:	e9c6 0500 	strd	r0, r5, [r6]
 8000a5a:	4608      	mov	r0, r1
 8000a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a60:	fab3 f183 	clz	r1, r3
 8000a64:	2900      	cmp	r1, #0
 8000a66:	d149      	bne.n	8000afc <__udivmoddi4+0x158>
 8000a68:	42ab      	cmp	r3, r5
 8000a6a:	d302      	bcc.n	8000a72 <__udivmoddi4+0xce>
 8000a6c:	4282      	cmp	r2, r0
 8000a6e:	f200 80f8 	bhi.w	8000c62 <__udivmoddi4+0x2be>
 8000a72:	1a84      	subs	r4, r0, r2
 8000a74:	eb65 0203 	sbc.w	r2, r5, r3
 8000a78:	2001      	movs	r0, #1
 8000a7a:	4617      	mov	r7, r2
 8000a7c:	2e00      	cmp	r6, #0
 8000a7e:	d0e2      	beq.n	8000a46 <__udivmoddi4+0xa2>
 8000a80:	e9c6 4700 	strd	r4, r7, [r6]
 8000a84:	e7df      	b.n	8000a46 <__udivmoddi4+0xa2>
 8000a86:	b902      	cbnz	r2, 8000a8a <__udivmoddi4+0xe6>
 8000a88:	deff      	udf	#255	; 0xff
 8000a8a:	fab2 f382 	clz	r3, r2
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	f040 8090 	bne.w	8000bb4 <__udivmoddi4+0x210>
 8000a94:	1a8a      	subs	r2, r1, r2
 8000a96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a9a:	fa1f fe8c 	uxth.w	lr, ip
 8000a9e:	2101      	movs	r1, #1
 8000aa0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000aa4:	fb07 2015 	mls	r0, r7, r5, r2
 8000aa8:	0c22      	lsrs	r2, r4, #16
 8000aaa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000aae:	fb0e f005 	mul.w	r0, lr, r5
 8000ab2:	4290      	cmp	r0, r2
 8000ab4:	d908      	bls.n	8000ac8 <__udivmoddi4+0x124>
 8000ab6:	eb1c 0202 	adds.w	r2, ip, r2
 8000aba:	f105 38ff 	add.w	r8, r5, #4294967295
 8000abe:	d202      	bcs.n	8000ac6 <__udivmoddi4+0x122>
 8000ac0:	4290      	cmp	r0, r2
 8000ac2:	f200 80cb 	bhi.w	8000c5c <__udivmoddi4+0x2b8>
 8000ac6:	4645      	mov	r5, r8
 8000ac8:	1a12      	subs	r2, r2, r0
 8000aca:	b2a4      	uxth	r4, r4
 8000acc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ad0:	fb07 2210 	mls	r2, r7, r0, r2
 8000ad4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ad8:	fb0e fe00 	mul.w	lr, lr, r0
 8000adc:	45a6      	cmp	lr, r4
 8000ade:	d908      	bls.n	8000af2 <__udivmoddi4+0x14e>
 8000ae0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ae4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ae8:	d202      	bcs.n	8000af0 <__udivmoddi4+0x14c>
 8000aea:	45a6      	cmp	lr, r4
 8000aec:	f200 80bb 	bhi.w	8000c66 <__udivmoddi4+0x2c2>
 8000af0:	4610      	mov	r0, r2
 8000af2:	eba4 040e 	sub.w	r4, r4, lr
 8000af6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000afa:	e79f      	b.n	8000a3c <__udivmoddi4+0x98>
 8000afc:	f1c1 0720 	rsb	r7, r1, #32
 8000b00:	408b      	lsls	r3, r1
 8000b02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b0a:	fa05 f401 	lsl.w	r4, r5, r1
 8000b0e:	fa20 f307 	lsr.w	r3, r0, r7
 8000b12:	40fd      	lsrs	r5, r7
 8000b14:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b18:	4323      	orrs	r3, r4
 8000b1a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b1e:	fa1f fe8c 	uxth.w	lr, ip
 8000b22:	fb09 5518 	mls	r5, r9, r8, r5
 8000b26:	0c1c      	lsrs	r4, r3, #16
 8000b28:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b2c:	fb08 f50e 	mul.w	r5, r8, lr
 8000b30:	42a5      	cmp	r5, r4
 8000b32:	fa02 f201 	lsl.w	r2, r2, r1
 8000b36:	fa00 f001 	lsl.w	r0, r0, r1
 8000b3a:	d90b      	bls.n	8000b54 <__udivmoddi4+0x1b0>
 8000b3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000b40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b44:	f080 8088 	bcs.w	8000c58 <__udivmoddi4+0x2b4>
 8000b48:	42a5      	cmp	r5, r4
 8000b4a:	f240 8085 	bls.w	8000c58 <__udivmoddi4+0x2b4>
 8000b4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000b52:	4464      	add	r4, ip
 8000b54:	1b64      	subs	r4, r4, r5
 8000b56:	b29d      	uxth	r5, r3
 8000b58:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b5c:	fb09 4413 	mls	r4, r9, r3, r4
 8000b60:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000b64:	fb03 fe0e 	mul.w	lr, r3, lr
 8000b68:	45a6      	cmp	lr, r4
 8000b6a:	d908      	bls.n	8000b7e <__udivmoddi4+0x1da>
 8000b6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000b70:	f103 35ff 	add.w	r5, r3, #4294967295
 8000b74:	d26c      	bcs.n	8000c50 <__udivmoddi4+0x2ac>
 8000b76:	45a6      	cmp	lr, r4
 8000b78:	d96a      	bls.n	8000c50 <__udivmoddi4+0x2ac>
 8000b7a:	3b02      	subs	r3, #2
 8000b7c:	4464      	add	r4, ip
 8000b7e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b82:	fba3 9502 	umull	r9, r5, r3, r2
 8000b86:	eba4 040e 	sub.w	r4, r4, lr
 8000b8a:	42ac      	cmp	r4, r5
 8000b8c:	46c8      	mov	r8, r9
 8000b8e:	46ae      	mov	lr, r5
 8000b90:	d356      	bcc.n	8000c40 <__udivmoddi4+0x29c>
 8000b92:	d053      	beq.n	8000c3c <__udivmoddi4+0x298>
 8000b94:	b156      	cbz	r6, 8000bac <__udivmoddi4+0x208>
 8000b96:	ebb0 0208 	subs.w	r2, r0, r8
 8000b9a:	eb64 040e 	sbc.w	r4, r4, lr
 8000b9e:	fa04 f707 	lsl.w	r7, r4, r7
 8000ba2:	40ca      	lsrs	r2, r1
 8000ba4:	40cc      	lsrs	r4, r1
 8000ba6:	4317      	orrs	r7, r2
 8000ba8:	e9c6 7400 	strd	r7, r4, [r6]
 8000bac:	4618      	mov	r0, r3
 8000bae:	2100      	movs	r1, #0
 8000bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb4:	f1c3 0120 	rsb	r1, r3, #32
 8000bb8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bbc:	fa20 f201 	lsr.w	r2, r0, r1
 8000bc0:	fa25 f101 	lsr.w	r1, r5, r1
 8000bc4:	409d      	lsls	r5, r3
 8000bc6:	432a      	orrs	r2, r5
 8000bc8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bcc:	fa1f fe8c 	uxth.w	lr, ip
 8000bd0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bd4:	fb07 1510 	mls	r5, r7, r0, r1
 8000bd8:	0c11      	lsrs	r1, r2, #16
 8000bda:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000bde:	fb00 f50e 	mul.w	r5, r0, lr
 8000be2:	428d      	cmp	r5, r1
 8000be4:	fa04 f403 	lsl.w	r4, r4, r3
 8000be8:	d908      	bls.n	8000bfc <__udivmoddi4+0x258>
 8000bea:	eb1c 0101 	adds.w	r1, ip, r1
 8000bee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000bf2:	d22f      	bcs.n	8000c54 <__udivmoddi4+0x2b0>
 8000bf4:	428d      	cmp	r5, r1
 8000bf6:	d92d      	bls.n	8000c54 <__udivmoddi4+0x2b0>
 8000bf8:	3802      	subs	r0, #2
 8000bfa:	4461      	add	r1, ip
 8000bfc:	1b49      	subs	r1, r1, r5
 8000bfe:	b292      	uxth	r2, r2
 8000c00:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c04:	fb07 1115 	mls	r1, r7, r5, r1
 8000c08:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c0c:	fb05 f10e 	mul.w	r1, r5, lr
 8000c10:	4291      	cmp	r1, r2
 8000c12:	d908      	bls.n	8000c26 <__udivmoddi4+0x282>
 8000c14:	eb1c 0202 	adds.w	r2, ip, r2
 8000c18:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c1c:	d216      	bcs.n	8000c4c <__udivmoddi4+0x2a8>
 8000c1e:	4291      	cmp	r1, r2
 8000c20:	d914      	bls.n	8000c4c <__udivmoddi4+0x2a8>
 8000c22:	3d02      	subs	r5, #2
 8000c24:	4462      	add	r2, ip
 8000c26:	1a52      	subs	r2, r2, r1
 8000c28:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000c2c:	e738      	b.n	8000aa0 <__udivmoddi4+0xfc>
 8000c2e:	4631      	mov	r1, r6
 8000c30:	4630      	mov	r0, r6
 8000c32:	e708      	b.n	8000a46 <__udivmoddi4+0xa2>
 8000c34:	4639      	mov	r1, r7
 8000c36:	e6e6      	b.n	8000a06 <__udivmoddi4+0x62>
 8000c38:	4610      	mov	r0, r2
 8000c3a:	e6fb      	b.n	8000a34 <__udivmoddi4+0x90>
 8000c3c:	4548      	cmp	r0, r9
 8000c3e:	d2a9      	bcs.n	8000b94 <__udivmoddi4+0x1f0>
 8000c40:	ebb9 0802 	subs.w	r8, r9, r2
 8000c44:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000c48:	3b01      	subs	r3, #1
 8000c4a:	e7a3      	b.n	8000b94 <__udivmoddi4+0x1f0>
 8000c4c:	4645      	mov	r5, r8
 8000c4e:	e7ea      	b.n	8000c26 <__udivmoddi4+0x282>
 8000c50:	462b      	mov	r3, r5
 8000c52:	e794      	b.n	8000b7e <__udivmoddi4+0x1da>
 8000c54:	4640      	mov	r0, r8
 8000c56:	e7d1      	b.n	8000bfc <__udivmoddi4+0x258>
 8000c58:	46d0      	mov	r8, sl
 8000c5a:	e77b      	b.n	8000b54 <__udivmoddi4+0x1b0>
 8000c5c:	3d02      	subs	r5, #2
 8000c5e:	4462      	add	r2, ip
 8000c60:	e732      	b.n	8000ac8 <__udivmoddi4+0x124>
 8000c62:	4608      	mov	r0, r1
 8000c64:	e70a      	b.n	8000a7c <__udivmoddi4+0xd8>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	e742      	b.n	8000af2 <__udivmoddi4+0x14e>

08000c6c <__aeabi_idiv0>:
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop

08000c70 <LEDVariavel_step>:
static RT_MODEL rtM_;
RT_MODEL *const rtM = &rtM_;

/* Model step function */
void LEDVariavel_step(void)
{
 8000c70:	b598      	push	{r3, r4, r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* Outport: '<Root>/WaitTime' incorporates:
   *  Gain: '<Root>/Gain'
   *  Sin: '<Root>/Sine Wave'
   */
  rtY.WaitTime = (sin(rtM->Timing.t[0] + 0.1) * 0.2 + 0.25) * 1000.0;
 8000c74:	4b2a      	ldr	r3, [pc, #168]	; (8000d20 <LEDVariavel_step+0xb0>)
 8000c76:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8000c7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c7e:	a324      	add	r3, pc, #144	; (adr r3, 8000d10 <LEDVariavel_step+0xa0>)
 8000c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c84:	f7ff fbf0 	bl	8000468 <__adddf3>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	ec43 2b17 	vmov	d7, r2, r3
 8000c90:	eeb0 0a47 	vmov.f32	s0, s14
 8000c94:	eef0 0a67 	vmov.f32	s1, s15
 8000c98:	f002 ff0e 	bl	8003ab8 <sin>
 8000c9c:	ec51 0b10 	vmov	r0, r1, d0
 8000ca0:	a31d      	add	r3, pc, #116	; (adr r3, 8000d18 <LEDVariavel_step+0xa8>)
 8000ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ca6:	f7ff faaf 	bl	8000208 <__aeabi_dmul>
 8000caa:	4602      	mov	r2, r0
 8000cac:	460b      	mov	r3, r1
 8000cae:	4610      	mov	r0, r2
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	f04f 0200 	mov.w	r2, #0
 8000cb6:	4b1b      	ldr	r3, [pc, #108]	; (8000d24 <LEDVariavel_step+0xb4>)
 8000cb8:	f7ff fbd6 	bl	8000468 <__adddf3>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	4610      	mov	r0, r2
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	f04f 0200 	mov.w	r2, #0
 8000cc8:	4b17      	ldr	r3, [pc, #92]	; (8000d28 <LEDVariavel_step+0xb8>)
 8000cca:	f7ff fa9d 	bl	8000208 <__aeabi_dmul>
 8000cce:	4602      	mov	r2, r0
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	4916      	ldr	r1, [pc, #88]	; (8000d2c <LEDVariavel_step+0xbc>)
 8000cd4:	e9c1 2300 	strd	r2, r3, [r1]
   * been executed. The absolute time is the multiplication of "clockTick0"
   * and "Timing.stepSize0". Size of "clockTick0" ensures timer will not
   * overflow during the application lifespan selected.
   */
  rtM->Timing.t[0] =
    ((time_T)(++rtM->Timing.clockTick0)) * rtM->Timing.stepSize0;
 8000cd8:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <LEDVariavel_step+0xb0>)
 8000cda:	f8b3 2108 	ldrh.w	r2, [r3, #264]	; 0x108
 8000cde:	3201      	adds	r2, #1
 8000ce0:	b292      	uxth	r2, r2
  rtM->Timing.t[0] =
 8000ce2:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108
    ((time_T)(++rtM->Timing.clockTick0)) * rtM->Timing.stepSize0;
 8000ce6:	f8b3 3108 	ldrh.w	r3, [r3, #264]	; 0x108
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff fcf8 	bl	80006e0 <__aeabi_ui2d>
 8000cf0:	4b0b      	ldr	r3, [pc, #44]	; (8000d20 <LEDVariavel_step+0xb0>)
 8000cf2:	e9d3 2344 	ldrd	r2, r3, [r3, #272]	; 0x110
  rtM->Timing.t[0] =
 8000cf6:	4c0a      	ldr	r4, [pc, #40]	; (8000d20 <LEDVariavel_step+0xb0>)
 8000cf8:	f8d4 411c 	ldr.w	r4, [r4, #284]	; 0x11c
    ((time_T)(++rtM->Timing.clockTick0)) * rtM->Timing.stepSize0;
 8000cfc:	f7ff fa84 	bl	8000208 <__aeabi_dmul>
 8000d00:	4602      	mov	r2, r0
 8000d02:	460b      	mov	r3, r1
  rtM->Timing.t[0] =
 8000d04:	e9c4 2300 	strd	r2, r3, [r4]
}
 8000d08:	bf00      	nop
 8000d0a:	bd98      	pop	{r3, r4, r7, pc}
 8000d0c:	f3af 8000 	nop.w
 8000d10:	9999999a 	.word	0x9999999a
 8000d14:	3fb99999 	.word	0x3fb99999
 8000d18:	9999999a 	.word	0x9999999a
 8000d1c:	3fc99999 	.word	0x3fc99999
 8000d20:	20000038 	.word	0x20000038
 8000d24:	3fd00000 	.word	0x3fd00000
 8000d28:	408f4000 	.word	0x408f4000
 8000d2c:	20000030 	.word	0x20000030

08000d30 <LEDVariavel_initialize>:

/* Model initialize function */
void LEDVariavel_initialize(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* Registration code */
  {
    /* Setup solver object */
    rtsiSetSimTimeStepPtr(&rtM->solverInfo, &rtM->Timing.simTimeStep);
 8000d34:	4b17      	ldr	r3, [pc, #92]	; (8000d94 <LEDVariavel_initialize+0x64>)
 8000d36:	4a17      	ldr	r2, [pc, #92]	; (8000d94 <LEDVariavel_initialize+0x64>)
 8000d38:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8000d3c:	60d3      	str	r3, [r2, #12]
    rtsiSetTPtr(&rtM->solverInfo, &rtmGetTPtr(rtM));
 8000d3e:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <LEDVariavel_initialize+0x64>)
 8000d40:	4a14      	ldr	r2, [pc, #80]	; (8000d94 <LEDVariavel_initialize+0x64>)
 8000d42:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8000d46:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    rtsiSetStepSizePtr(&rtM->solverInfo, &rtM->Timing.stepSize0);
 8000d4a:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <LEDVariavel_initialize+0x64>)
 8000d4c:	4a11      	ldr	r2, [pc, #68]	; (8000d94 <LEDVariavel_initialize+0x64>)
 8000d4e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8000d52:	6293      	str	r3, [r2, #40]	; 0x28
    rtsiSetErrorStatusPtr(&rtM->solverInfo, (&rtmGetErrorStatus(rtM)));
 8000d54:	4a0f      	ldr	r2, [pc, #60]	; (8000d94 <LEDVariavel_initialize+0x64>)
 8000d56:	4b0f      	ldr	r3, [pc, #60]	; (8000d94 <LEDVariavel_initialize+0x64>)
 8000d58:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    rtsiSetRTModelPtr(&rtM->solverInfo, rtM);
 8000d5c:	4b0d      	ldr	r3, [pc, #52]	; (8000d94 <LEDVariavel_initialize+0x64>)
 8000d5e:	4a0d      	ldr	r2, [pc, #52]	; (8000d94 <LEDVariavel_initialize+0x64>)
 8000d60:	609a      	str	r2, [r3, #8]
  }

  rtsiSetSimTimeStep(&rtM->solverInfo, MAJOR_TIME_STEP);
 8000d62:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <LEDVariavel_initialize+0x64>)
 8000d64:	68db      	ldr	r3, [r3, #12]
 8000d66:	2201      	movs	r2, #1
 8000d68:	701a      	strb	r2, [r3, #0]
  rtsiSetSolverName(&rtM->solverInfo,"FixedStepDiscrete");
 8000d6a:	4b0a      	ldr	r3, [pc, #40]	; (8000d94 <LEDVariavel_initialize+0x64>)
 8000d6c:	4a0a      	ldr	r2, [pc, #40]	; (8000d98 <LEDVariavel_initialize+0x68>)
 8000d6e:	615a      	str	r2, [r3, #20]
  rtmSetTPtr(rtM, &rtM->Timing.tArray[0]);
 8000d70:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <LEDVariavel_initialize+0x64>)
 8000d72:	4a08      	ldr	r2, [pc, #32]	; (8000d94 <LEDVariavel_initialize+0x64>)
 8000d74:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8000d78:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
  rtM->Timing.stepSize0 = 2.0;
 8000d7c:	4905      	ldr	r1, [pc, #20]	; (8000d94 <LEDVariavel_initialize+0x64>)
 8000d7e:	f04f 0200 	mov.w	r2, #0
 8000d82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d86:	e9c1 2344 	strd	r2, r3, [r1, #272]	; 0x110
}
 8000d8a:	bf00      	nop
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	20000038 	.word	0x20000038
 8000d98:	08004b50 	.word	0x08004b50

08000d9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	LEDVariavel_initialize();
 8000da0:	f7ff ffc6 	bl	8000d30 <LEDVariavel_initialize>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000da4:	f000 fafe 	bl	80013a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000da8:	f000 f83e 	bl	8000e28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dac:	f000 f900 	bl	8000fb0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000db0:	f000 f8a6 	bl	8000f00 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000db4:	f000 f8ce 	bl	8000f54 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
	LEDVariavel_initialize();
 8000db8:	f7ff ffba 	bl	8000d30 <LEDVariavel_initialize>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  LEDVariavel_step();
 8000dbc:	f7ff ff58 	bl	8000c70 <LEDVariavel_step>
	  //No rtY.WaitTime está o valor do seno
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	4817      	ldr	r0, [pc, #92]	; (8000e20 <main+0x84>)
 8000dc4:	f000 fe17 	bl	80019f6 <HAL_GPIO_TogglePin>
	  HAL_Delay(rtY.WaitTime);
 8000dc8:	4b16      	ldr	r3, [pc, #88]	; (8000e24 <main+0x88>)
 8000dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dce:	4610      	mov	r0, r2
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	f7ff fdaf 	bl	8000934 <__aeabi_d2uiz>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f000 fb55 	bl	8001488 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000dde:	2180      	movs	r1, #128	; 0x80
 8000de0:	480f      	ldr	r0, [pc, #60]	; (8000e20 <main+0x84>)
 8000de2:	f000 fe08 	bl	80019f6 <HAL_GPIO_TogglePin>
	  HAL_Delay(rtY.WaitTime);
 8000de6:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <main+0x88>)
 8000de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dec:	4610      	mov	r0, r2
 8000dee:	4619      	mov	r1, r3
 8000df0:	f7ff fda0 	bl	8000934 <__aeabi_d2uiz>
 8000df4:	4603      	mov	r3, r0
 8000df6:	4618      	mov	r0, r3
 8000df8:	f000 fb46 	bl	8001488 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000dfc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e00:	4807      	ldr	r0, [pc, #28]	; (8000e20 <main+0x84>)
 8000e02:	f000 fdf8 	bl	80019f6 <HAL_GPIO_TogglePin>
	  HAL_Delay(rtY.WaitTime);
 8000e06:	4b07      	ldr	r3, [pc, #28]	; (8000e24 <main+0x88>)
 8000e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e0c:	4610      	mov	r0, r2
 8000e0e:	4619      	mov	r1, r3
 8000e10:	f7ff fd90 	bl	8000934 <__aeabi_d2uiz>
 8000e14:	4603      	mov	r3, r0
 8000e16:	4618      	mov	r0, r3
 8000e18:	f000 fb36 	bl	8001488 <HAL_Delay>
	  LEDVariavel_step();
 8000e1c:	e7ce      	b.n	8000dbc <main+0x20>
 8000e1e:	bf00      	nop
 8000e20:	40020400 	.word	0x40020400
 8000e24:	20000030 	.word	0x20000030

08000e28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b094      	sub	sp, #80	; 0x50
 8000e2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e2e:	f107 031c 	add.w	r3, r7, #28
 8000e32:	2234      	movs	r2, #52	; 0x34
 8000e34:	2100      	movs	r1, #0
 8000e36:	4618      	mov	r0, r3
 8000e38:	f002 fe10 	bl	8003a5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e3c:	f107 0308 	add.w	r3, r7, #8
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
 8000e4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	607b      	str	r3, [r7, #4]
 8000e50:	4b29      	ldr	r3, [pc, #164]	; (8000ef8 <SystemClock_Config+0xd0>)
 8000e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e54:	4a28      	ldr	r2, [pc, #160]	; (8000ef8 <SystemClock_Config+0xd0>)
 8000e56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e5c:	4b26      	ldr	r3, [pc, #152]	; (8000ef8 <SystemClock_Config+0xd0>)
 8000e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e64:	607b      	str	r3, [r7, #4]
 8000e66:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e68:	2300      	movs	r3, #0
 8000e6a:	603b      	str	r3, [r7, #0]
 8000e6c:	4b23      	ldr	r3, [pc, #140]	; (8000efc <SystemClock_Config+0xd4>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a22      	ldr	r2, [pc, #136]	; (8000efc <SystemClock_Config+0xd4>)
 8000e72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e76:	6013      	str	r3, [r2, #0]
 8000e78:	4b20      	ldr	r3, [pc, #128]	; (8000efc <SystemClock_Config+0xd4>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e80:	603b      	str	r3, [r7, #0]
 8000e82:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e84:	2301      	movs	r3, #1
 8000e86:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000e88:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000e8c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e92:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e96:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e98:	2304      	movs	r3, #4
 8000e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000e9c:	23a8      	movs	r3, #168	; 0xa8
 8000e9e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ea4:	2307      	movs	r3, #7
 8000ea6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eac:	f107 031c 	add.w	r3, r7, #28
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f001 fd77 	bl	80029a4 <HAL_RCC_OscConfig>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ebc:	f000 f926 	bl	800110c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ec0:	230f      	movs	r3, #15
 8000ec2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ecc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ed0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ed2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ed6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ed8:	f107 0308 	add.w	r3, r7, #8
 8000edc:	2105      	movs	r1, #5
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 feec 	bl	8001cbc <HAL_RCC_ClockConfig>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000eea:	f000 f90f 	bl	800110c <Error_Handler>
  }
}
 8000eee:	bf00      	nop
 8000ef0:	3750      	adds	r7, #80	; 0x50
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	40007000 	.word	0x40007000

08000f00 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f04:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <MX_USART3_UART_Init+0x4c>)
 8000f06:	4a12      	ldr	r2, [pc, #72]	; (8000f50 <MX_USART3_UART_Init+0x50>)
 8000f08:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f0a:	4b10      	ldr	r3, [pc, #64]	; (8000f4c <MX_USART3_UART_Init+0x4c>)
 8000f0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f10:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f12:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <MX_USART3_UART_Init+0x4c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f18:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <MX_USART3_UART_Init+0x4c>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f1e:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <MX_USART3_UART_Init+0x4c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f24:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <MX_USART3_UART_Init+0x4c>)
 8000f26:	220c      	movs	r2, #12
 8000f28:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f2a:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <MX_USART3_UART_Init+0x4c>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f30:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <MX_USART3_UART_Init+0x4c>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f36:	4805      	ldr	r0, [pc, #20]	; (8000f4c <MX_USART3_UART_Init+0x4c>)
 8000f38:	f001 ffd2 	bl	8002ee0 <HAL_UART_Init>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000f42:	f000 f8e3 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000160 	.word	0x20000160
 8000f50:	40004800 	.word	0x40004800

08000f54 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000f58:	4b14      	ldr	r3, [pc, #80]	; (8000fac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f5a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f5e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000f60:	4b12      	ldr	r3, [pc, #72]	; (8000fac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f62:	2206      	movs	r2, #6
 8000f64:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000f66:	4b11      	ldr	r3, [pc, #68]	; (8000fac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f68:	2202      	movs	r2, #2
 8000f6a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000f6c:	4b0f      	ldr	r3, [pc, #60]	; (8000fac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f72:	4b0e      	ldr	r3, [pc, #56]	; (8000fac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f74:	2202      	movs	r2, #2
 8000f76:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000f78:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000f7e:	4b0b      	ldr	r3, [pc, #44]	; (8000fac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000f84:	4b09      	ldr	r3, [pc, #36]	; (8000fac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000f8a:	4b08      	ldr	r3, [pc, #32]	; (8000fac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000f96:	4805      	ldr	r0, [pc, #20]	; (8000fac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f98:	f000 fd47 	bl	8001a2a <HAL_PCD_Init>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000fa2:	f000 f8b3 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	200001a4 	.word	0x200001a4

08000fb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08c      	sub	sp, #48	; 0x30
 8000fb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb6:	f107 031c 	add.w	r3, r7, #28
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	605a      	str	r2, [r3, #4]
 8000fc0:	609a      	str	r2, [r3, #8]
 8000fc2:	60da      	str	r2, [r3, #12]
 8000fc4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61bb      	str	r3, [r7, #24]
 8000fca:	4b4c      	ldr	r3, [pc, #304]	; (80010fc <MX_GPIO_Init+0x14c>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	4a4b      	ldr	r2, [pc, #300]	; (80010fc <MX_GPIO_Init+0x14c>)
 8000fd0:	f043 0304 	orr.w	r3, r3, #4
 8000fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd6:	4b49      	ldr	r3, [pc, #292]	; (80010fc <MX_GPIO_Init+0x14c>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	f003 0304 	and.w	r3, r3, #4
 8000fde:	61bb      	str	r3, [r7, #24]
 8000fe0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
 8000fe6:	4b45      	ldr	r3, [pc, #276]	; (80010fc <MX_GPIO_Init+0x14c>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	4a44      	ldr	r2, [pc, #272]	; (80010fc <MX_GPIO_Init+0x14c>)
 8000fec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff2:	4b42      	ldr	r3, [pc, #264]	; (80010fc <MX_GPIO_Init+0x14c>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ffa:	617b      	str	r3, [r7, #20]
 8000ffc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	613b      	str	r3, [r7, #16]
 8001002:	4b3e      	ldr	r3, [pc, #248]	; (80010fc <MX_GPIO_Init+0x14c>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	4a3d      	ldr	r2, [pc, #244]	; (80010fc <MX_GPIO_Init+0x14c>)
 8001008:	f043 0302 	orr.w	r3, r3, #2
 800100c:	6313      	str	r3, [r2, #48]	; 0x30
 800100e:	4b3b      	ldr	r3, [pc, #236]	; (80010fc <MX_GPIO_Init+0x14c>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	613b      	str	r3, [r7, #16]
 8001018:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	4b37      	ldr	r3, [pc, #220]	; (80010fc <MX_GPIO_Init+0x14c>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	4a36      	ldr	r2, [pc, #216]	; (80010fc <MX_GPIO_Init+0x14c>)
 8001024:	f043 0308 	orr.w	r3, r3, #8
 8001028:	6313      	str	r3, [r2, #48]	; 0x30
 800102a:	4b34      	ldr	r3, [pc, #208]	; (80010fc <MX_GPIO_Init+0x14c>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	f003 0308 	and.w	r3, r3, #8
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	60bb      	str	r3, [r7, #8]
 800103a:	4b30      	ldr	r3, [pc, #192]	; (80010fc <MX_GPIO_Init+0x14c>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	4a2f      	ldr	r2, [pc, #188]	; (80010fc <MX_GPIO_Init+0x14c>)
 8001040:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001044:	6313      	str	r3, [r2, #48]	; 0x30
 8001046:	4b2d      	ldr	r3, [pc, #180]	; (80010fc <MX_GPIO_Init+0x14c>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800104e:	60bb      	str	r3, [r7, #8]
 8001050:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	607b      	str	r3, [r7, #4]
 8001056:	4b29      	ldr	r3, [pc, #164]	; (80010fc <MX_GPIO_Init+0x14c>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	4a28      	ldr	r2, [pc, #160]	; (80010fc <MX_GPIO_Init+0x14c>)
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	6313      	str	r3, [r2, #48]	; 0x30
 8001062:	4b26      	ldr	r3, [pc, #152]	; (80010fc <MX_GPIO_Init+0x14c>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800106e:	2200      	movs	r2, #0
 8001070:	f244 0181 	movw	r1, #16513	; 0x4081
 8001074:	4822      	ldr	r0, [pc, #136]	; (8001100 <MX_GPIO_Init+0x150>)
 8001076:	f000 fca5 	bl	80019c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800107a:	2200      	movs	r2, #0
 800107c:	2140      	movs	r1, #64	; 0x40
 800107e:	4821      	ldr	r0, [pc, #132]	; (8001104 <MX_GPIO_Init+0x154>)
 8001080:	f000 fca0 	bl	80019c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001084:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001088:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800108a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800108e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001094:	f107 031c 	add.w	r3, r7, #28
 8001098:	4619      	mov	r1, r3
 800109a:	481b      	ldr	r0, [pc, #108]	; (8001108 <MX_GPIO_Init+0x158>)
 800109c:	f000 fafe 	bl	800169c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80010a0:	f244 0381 	movw	r3, #16513	; 0x4081
 80010a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a6:	2301      	movs	r3, #1
 80010a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ae:	2300      	movs	r3, #0
 80010b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b2:	f107 031c 	add.w	r3, r7, #28
 80010b6:	4619      	mov	r1, r3
 80010b8:	4811      	ldr	r0, [pc, #68]	; (8001100 <MX_GPIO_Init+0x150>)
 80010ba:	f000 faef 	bl	800169c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80010be:	2340      	movs	r3, #64	; 0x40
 80010c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c2:	2301      	movs	r3, #1
 80010c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ca:	2300      	movs	r3, #0
 80010cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80010ce:	f107 031c 	add.w	r3, r7, #28
 80010d2:	4619      	mov	r1, r3
 80010d4:	480b      	ldr	r0, [pc, #44]	; (8001104 <MX_GPIO_Init+0x154>)
 80010d6:	f000 fae1 	bl	800169c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80010da:	2380      	movs	r3, #128	; 0x80
 80010dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010de:	2300      	movs	r3, #0
 80010e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80010e6:	f107 031c 	add.w	r3, r7, #28
 80010ea:	4619      	mov	r1, r3
 80010ec:	4805      	ldr	r0, [pc, #20]	; (8001104 <MX_GPIO_Init+0x154>)
 80010ee:	f000 fad5 	bl	800169c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010f2:	bf00      	nop
 80010f4:	3730      	adds	r7, #48	; 0x30
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40023800 	.word	0x40023800
 8001100:	40020400 	.word	0x40020400
 8001104:	40021800 	.word	0x40021800
 8001108:	40020800 	.word	0x40020800

0800110c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001110:	b672      	cpsid	i
}
 8001112:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001114:	e7fe      	b.n	8001114 <Error_Handler+0x8>
	...

08001118 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	607b      	str	r3, [r7, #4]
 8001122:	4b10      	ldr	r3, [pc, #64]	; (8001164 <HAL_MspInit+0x4c>)
 8001124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001126:	4a0f      	ldr	r2, [pc, #60]	; (8001164 <HAL_MspInit+0x4c>)
 8001128:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800112c:	6453      	str	r3, [r2, #68]	; 0x44
 800112e:	4b0d      	ldr	r3, [pc, #52]	; (8001164 <HAL_MspInit+0x4c>)
 8001130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001132:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001136:	607b      	str	r3, [r7, #4]
 8001138:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	603b      	str	r3, [r7, #0]
 800113e:	4b09      	ldr	r3, [pc, #36]	; (8001164 <HAL_MspInit+0x4c>)
 8001140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001142:	4a08      	ldr	r2, [pc, #32]	; (8001164 <HAL_MspInit+0x4c>)
 8001144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001148:	6413      	str	r3, [r2, #64]	; 0x40
 800114a:	4b06      	ldr	r3, [pc, #24]	; (8001164 <HAL_MspInit+0x4c>)
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001152:	603b      	str	r3, [r7, #0]
 8001154:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	40023800 	.word	0x40023800

08001168 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08a      	sub	sp, #40	; 0x28
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a19      	ldr	r2, [pc, #100]	; (80011ec <HAL_UART_MspInit+0x84>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d12c      	bne.n	80011e4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	613b      	str	r3, [r7, #16]
 800118e:	4b18      	ldr	r3, [pc, #96]	; (80011f0 <HAL_UART_MspInit+0x88>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001192:	4a17      	ldr	r2, [pc, #92]	; (80011f0 <HAL_UART_MspInit+0x88>)
 8001194:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001198:	6413      	str	r3, [r2, #64]	; 0x40
 800119a:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <HAL_UART_MspInit+0x88>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011a2:	613b      	str	r3, [r7, #16]
 80011a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <HAL_UART_MspInit+0x88>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4a10      	ldr	r2, [pc, #64]	; (80011f0 <HAL_UART_MspInit+0x88>)
 80011b0:	f043 0308 	orr.w	r3, r3, #8
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <HAL_UART_MspInit+0x88>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f003 0308 	and.w	r3, r3, #8
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80011c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c8:	2302      	movs	r3, #2
 80011ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d0:	2303      	movs	r3, #3
 80011d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011d4:	2307      	movs	r3, #7
 80011d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	4619      	mov	r1, r3
 80011de:	4805      	ldr	r0, [pc, #20]	; (80011f4 <HAL_UART_MspInit+0x8c>)
 80011e0:	f000 fa5c 	bl	800169c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80011e4:	bf00      	nop
 80011e6:	3728      	adds	r7, #40	; 0x28
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40004800 	.word	0x40004800
 80011f0:	40023800 	.word	0x40023800
 80011f4:	40020c00 	.word	0x40020c00

080011f8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b0a0      	sub	sp, #128	; 0x80
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001200:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001210:	f107 0310 	add.w	r3, r7, #16
 8001214:	225c      	movs	r2, #92	; 0x5c
 8001216:	2100      	movs	r1, #0
 8001218:	4618      	mov	r0, r3
 800121a:	f002 fc1f 	bl	8003a5c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001226:	d14e      	bne.n	80012c6 <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001228:	f44f 7380 	mov.w	r3, #256	; 0x100
 800122c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800122e:	2300      	movs	r3, #0
 8001230:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001232:	f107 0310 	add.w	r3, r7, #16
 8001236:	4618      	mov	r0, r3
 8001238:	f000 fe5a 	bl	8001ef0 <HAL_RCCEx_PeriphCLKConfig>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8001242:	f7ff ff63 	bl	800110c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	4b21      	ldr	r3, [pc, #132]	; (80012d0 <HAL_PCD_MspInit+0xd8>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	4a20      	ldr	r2, [pc, #128]	; (80012d0 <HAL_PCD_MspInit+0xd8>)
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	6313      	str	r3, [r2, #48]	; 0x30
 8001256:	4b1e      	ldr	r3, [pc, #120]	; (80012d0 <HAL_PCD_MspInit+0xd8>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001262:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001266:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001268:	2302      	movs	r3, #2
 800126a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001270:	2303      	movs	r3, #3
 8001272:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001274:	230a      	movs	r3, #10
 8001276:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001278:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800127c:	4619      	mov	r1, r3
 800127e:	4815      	ldr	r0, [pc, #84]	; (80012d4 <HAL_PCD_MspInit+0xdc>)
 8001280:	f000 fa0c 	bl	800169c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001284:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001288:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800128a:	2300      	movs	r3, #0
 800128c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001292:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001296:	4619      	mov	r1, r3
 8001298:	480e      	ldr	r0, [pc, #56]	; (80012d4 <HAL_PCD_MspInit+0xdc>)
 800129a:	f000 f9ff 	bl	800169c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800129e:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <HAL_PCD_MspInit+0xd8>)
 80012a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012a2:	4a0b      	ldr	r2, [pc, #44]	; (80012d0 <HAL_PCD_MspInit+0xd8>)
 80012a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012a8:	6353      	str	r3, [r2, #52]	; 0x34
 80012aa:	2300      	movs	r3, #0
 80012ac:	60bb      	str	r3, [r7, #8]
 80012ae:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <HAL_PCD_MspInit+0xd8>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b2:	4a07      	ldr	r2, [pc, #28]	; (80012d0 <HAL_PCD_MspInit+0xd8>)
 80012b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012b8:	6453      	str	r3, [r2, #68]	; 0x44
 80012ba:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <HAL_PCD_MspInit+0xd8>)
 80012bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012c2:	60bb      	str	r3, [r7, #8]
 80012c4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80012c6:	bf00      	nop
 80012c8:	3780      	adds	r7, #128	; 0x80
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40023800 	.word	0x40023800
 80012d4:	40020000 	.word	0x40020000

080012d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012dc:	e7fe      	b.n	80012dc <NMI_Handler+0x4>

080012de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012e2:	e7fe      	b.n	80012e2 <HardFault_Handler+0x4>

080012e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012e8:	e7fe      	b.n	80012e8 <MemManage_Handler+0x4>

080012ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ee:	e7fe      	b.n	80012ee <BusFault_Handler+0x4>

080012f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012f4:	e7fe      	b.n	80012f4 <UsageFault_Handler+0x4>

080012f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012f6:	b480      	push	{r7}
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001312:	b480      	push	{r7}
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001324:	f000 f890 	bl	8001448 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001328:	bf00      	nop
 800132a:	bd80      	pop	{r7, pc}

0800132c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001330:	4b06      	ldr	r3, [pc, #24]	; (800134c <SystemInit+0x20>)
 8001332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001336:	4a05      	ldr	r2, [pc, #20]	; (800134c <SystemInit+0x20>)
 8001338:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800133c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001350:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001388 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001354:	480d      	ldr	r0, [pc, #52]	; (800138c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001356:	490e      	ldr	r1, [pc, #56]	; (8001390 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001358:	4a0e      	ldr	r2, [pc, #56]	; (8001394 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800135a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800135c:	e002      	b.n	8001364 <LoopCopyDataInit>

0800135e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800135e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001360:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001362:	3304      	adds	r3, #4

08001364 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001364:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001366:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001368:	d3f9      	bcc.n	800135e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800136a:	4a0b      	ldr	r2, [pc, #44]	; (8001398 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800136c:	4c0b      	ldr	r4, [pc, #44]	; (800139c <LoopFillZerobss+0x26>)
  movs r3, #0
 800136e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001370:	e001      	b.n	8001376 <LoopFillZerobss>

08001372 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001372:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001374:	3204      	adds	r2, #4

08001376 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001376:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001378:	d3fb      	bcc.n	8001372 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800137a:	f7ff ffd7 	bl	800132c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800137e:	f002 fb75 	bl	8003a6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001382:	f7ff fd0b 	bl	8000d9c <main>
  bx  lr    
 8001386:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001388:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800138c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001390:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001394:	08004d68 	.word	0x08004d68
  ldr r2, =_sbss
 8001398:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800139c:	200006b4 	.word	0x200006b4

080013a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013a0:	e7fe      	b.n	80013a0 <ADC_IRQHandler>
	...

080013a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013a8:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <HAL_Init+0x40>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a0d      	ldr	r2, [pc, #52]	; (80013e4 <HAL_Init+0x40>)
 80013ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013b4:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <HAL_Init+0x40>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a0a      	ldr	r2, [pc, #40]	; (80013e4 <HAL_Init+0x40>)
 80013ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013c0:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <HAL_Init+0x40>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a07      	ldr	r2, [pc, #28]	; (80013e4 <HAL_Init+0x40>)
 80013c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013cc:	2003      	movs	r0, #3
 80013ce:	f000 f931 	bl	8001634 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013d2:	2000      	movs	r0, #0
 80013d4:	f000 f808 	bl	80013e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013d8:	f7ff fe9e 	bl	8001118 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40023c00 	.word	0x40023c00

080013e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013f0:	4b12      	ldr	r3, [pc, #72]	; (800143c <HAL_InitTick+0x54>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	4b12      	ldr	r3, [pc, #72]	; (8001440 <HAL_InitTick+0x58>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	4619      	mov	r1, r3
 80013fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001402:	fbb2 f3f3 	udiv	r3, r2, r3
 8001406:	4618      	mov	r0, r3
 8001408:	f000 f93b 	bl	8001682 <HAL_SYSTICK_Config>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e00e      	b.n	8001434 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2b0f      	cmp	r3, #15
 800141a:	d80a      	bhi.n	8001432 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800141c:	2200      	movs	r2, #0
 800141e:	6879      	ldr	r1, [r7, #4]
 8001420:	f04f 30ff 	mov.w	r0, #4294967295
 8001424:	f000 f911 	bl	800164a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001428:	4a06      	ldr	r2, [pc, #24]	; (8001444 <HAL_InitTick+0x5c>)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800142e:	2300      	movs	r3, #0
 8001430:	e000      	b.n	8001434 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
}
 8001434:	4618      	mov	r0, r3
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000000 	.word	0x20000000
 8001440:	20000008 	.word	0x20000008
 8001444:	20000004 	.word	0x20000004

08001448 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800144c:	4b06      	ldr	r3, [pc, #24]	; (8001468 <HAL_IncTick+0x20>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	461a      	mov	r2, r3
 8001452:	4b06      	ldr	r3, [pc, #24]	; (800146c <HAL_IncTick+0x24>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4413      	add	r3, r2
 8001458:	4a04      	ldr	r2, [pc, #16]	; (800146c <HAL_IncTick+0x24>)
 800145a:	6013      	str	r3, [r2, #0]
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	20000008 	.word	0x20000008
 800146c:	200006b0 	.word	0x200006b0

08001470 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  return uwTick;
 8001474:	4b03      	ldr	r3, [pc, #12]	; (8001484 <HAL_GetTick+0x14>)
 8001476:	681b      	ldr	r3, [r3, #0]
}
 8001478:	4618      	mov	r0, r3
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	200006b0 	.word	0x200006b0

08001488 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001490:	f7ff ffee 	bl	8001470 <HAL_GetTick>
 8001494:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014a0:	d005      	beq.n	80014ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014a2:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <HAL_Delay+0x44>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	461a      	mov	r2, r3
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	4413      	add	r3, r2
 80014ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014ae:	bf00      	nop
 80014b0:	f7ff ffde 	bl	8001470 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	68fa      	ldr	r2, [r7, #12]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d8f7      	bhi.n	80014b0 <HAL_Delay+0x28>
  {
  }
}
 80014c0:	bf00      	nop
 80014c2:	bf00      	nop
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000008 	.word	0x20000008

080014d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f003 0307 	and.w	r3, r3, #7
 80014de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e0:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <__NVIC_SetPriorityGrouping+0x44>)
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014e6:	68ba      	ldr	r2, [r7, #8]
 80014e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014ec:	4013      	ands	r3, r2
 80014ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001500:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001502:	4a04      	ldr	r2, [pc, #16]	; (8001514 <__NVIC_SetPriorityGrouping+0x44>)
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	60d3      	str	r3, [r2, #12]
}
 8001508:	bf00      	nop
 800150a:	3714      	adds	r7, #20
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800151c:	4b04      	ldr	r3, [pc, #16]	; (8001530 <__NVIC_GetPriorityGrouping+0x18>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	0a1b      	lsrs	r3, r3, #8
 8001522:	f003 0307 	and.w	r3, r3, #7
}
 8001526:	4618      	mov	r0, r3
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	e000ed00 	.word	0xe000ed00

08001534 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	6039      	str	r1, [r7, #0]
 800153e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001544:	2b00      	cmp	r3, #0
 8001546:	db0a      	blt.n	800155e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	b2da      	uxtb	r2, r3
 800154c:	490c      	ldr	r1, [pc, #48]	; (8001580 <__NVIC_SetPriority+0x4c>)
 800154e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001552:	0112      	lsls	r2, r2, #4
 8001554:	b2d2      	uxtb	r2, r2
 8001556:	440b      	add	r3, r1
 8001558:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800155c:	e00a      	b.n	8001574 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	b2da      	uxtb	r2, r3
 8001562:	4908      	ldr	r1, [pc, #32]	; (8001584 <__NVIC_SetPriority+0x50>)
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	f003 030f 	and.w	r3, r3, #15
 800156a:	3b04      	subs	r3, #4
 800156c:	0112      	lsls	r2, r2, #4
 800156e:	b2d2      	uxtb	r2, r2
 8001570:	440b      	add	r3, r1
 8001572:	761a      	strb	r2, [r3, #24]
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	e000e100 	.word	0xe000e100
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001588:	b480      	push	{r7}
 800158a:	b089      	sub	sp, #36	; 0x24
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	f1c3 0307 	rsb	r3, r3, #7
 80015a2:	2b04      	cmp	r3, #4
 80015a4:	bf28      	it	cs
 80015a6:	2304      	movcs	r3, #4
 80015a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	3304      	adds	r3, #4
 80015ae:	2b06      	cmp	r3, #6
 80015b0:	d902      	bls.n	80015b8 <NVIC_EncodePriority+0x30>
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	3b03      	subs	r3, #3
 80015b6:	e000      	b.n	80015ba <NVIC_EncodePriority+0x32>
 80015b8:	2300      	movs	r3, #0
 80015ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015bc:	f04f 32ff 	mov.w	r2, #4294967295
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	43da      	mvns	r2, r3
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	401a      	ands	r2, r3
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015d0:	f04f 31ff 	mov.w	r1, #4294967295
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	fa01 f303 	lsl.w	r3, r1, r3
 80015da:	43d9      	mvns	r1, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e0:	4313      	orrs	r3, r2
         );
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3724      	adds	r7, #36	; 0x24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
	...

080015f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3b01      	subs	r3, #1
 80015fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001600:	d301      	bcc.n	8001606 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001602:	2301      	movs	r3, #1
 8001604:	e00f      	b.n	8001626 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001606:	4a0a      	ldr	r2, [pc, #40]	; (8001630 <SysTick_Config+0x40>)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3b01      	subs	r3, #1
 800160c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800160e:	210f      	movs	r1, #15
 8001610:	f04f 30ff 	mov.w	r0, #4294967295
 8001614:	f7ff ff8e 	bl	8001534 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001618:	4b05      	ldr	r3, [pc, #20]	; (8001630 <SysTick_Config+0x40>)
 800161a:	2200      	movs	r2, #0
 800161c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800161e:	4b04      	ldr	r3, [pc, #16]	; (8001630 <SysTick_Config+0x40>)
 8001620:	2207      	movs	r2, #7
 8001622:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	e000e010 	.word	0xe000e010

08001634 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f7ff ff47 	bl	80014d0 <__NVIC_SetPriorityGrouping>
}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800164a:	b580      	push	{r7, lr}
 800164c:	b086      	sub	sp, #24
 800164e:	af00      	add	r7, sp, #0
 8001650:	4603      	mov	r3, r0
 8001652:	60b9      	str	r1, [r7, #8]
 8001654:	607a      	str	r2, [r7, #4]
 8001656:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800165c:	f7ff ff5c 	bl	8001518 <__NVIC_GetPriorityGrouping>
 8001660:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	68b9      	ldr	r1, [r7, #8]
 8001666:	6978      	ldr	r0, [r7, #20]
 8001668:	f7ff ff8e 	bl	8001588 <NVIC_EncodePriority>
 800166c:	4602      	mov	r2, r0
 800166e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001672:	4611      	mov	r1, r2
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff ff5d 	bl	8001534 <__NVIC_SetPriority>
}
 800167a:	bf00      	nop
 800167c:	3718      	adds	r7, #24
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b082      	sub	sp, #8
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7ff ffb0 	bl	80015f0 <SysTick_Config>
 8001690:	4603      	mov	r3, r0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
	...

0800169c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800169c:	b480      	push	{r7}
 800169e:	b089      	sub	sp, #36	; 0x24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016a6:	2300      	movs	r3, #0
 80016a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016aa:	2300      	movs	r3, #0
 80016ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016b2:	2300      	movs	r3, #0
 80016b4:	61fb      	str	r3, [r7, #28]
 80016b6:	e165      	b.n	8001984 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016b8:	2201      	movs	r2, #1
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	697a      	ldr	r2, [r7, #20]
 80016c8:	4013      	ands	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	f040 8154 	bne.w	800197e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f003 0303 	and.w	r3, r3, #3
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d005      	beq.n	80016ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d130      	bne.n	8001750 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	2203      	movs	r2, #3
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	43db      	mvns	r3, r3
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	4013      	ands	r3, r2
 8001704:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	68da      	ldr	r2, [r3, #12]
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	4313      	orrs	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001724:	2201      	movs	r2, #1
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	43db      	mvns	r3, r3
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	4013      	ands	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	091b      	lsrs	r3, r3, #4
 800173a:	f003 0201 	and.w	r2, r3, #1
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	4313      	orrs	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f003 0303 	and.w	r3, r3, #3
 8001758:	2b03      	cmp	r3, #3
 800175a:	d017      	beq.n	800178c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	2203      	movs	r2, #3
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	43db      	mvns	r3, r3
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	4013      	ands	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	689a      	ldr	r2, [r3, #8]
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	4313      	orrs	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f003 0303 	and.w	r3, r3, #3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d123      	bne.n	80017e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	08da      	lsrs	r2, r3, #3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3208      	adds	r2, #8
 80017a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	f003 0307 	and.w	r3, r3, #7
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	220f      	movs	r2, #15
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	43db      	mvns	r3, r3
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	4013      	ands	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	691a      	ldr	r2, [r3, #16]
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	08da      	lsrs	r2, r3, #3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	3208      	adds	r2, #8
 80017da:	69b9      	ldr	r1, [r7, #24]
 80017dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	2203      	movs	r2, #3
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	43db      	mvns	r3, r3
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4013      	ands	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f003 0203 	and.w	r2, r3, #3
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	4313      	orrs	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800181c:	2b00      	cmp	r3, #0
 800181e:	f000 80ae 	beq.w	800197e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	4b5d      	ldr	r3, [pc, #372]	; (800199c <HAL_GPIO_Init+0x300>)
 8001828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182a:	4a5c      	ldr	r2, [pc, #368]	; (800199c <HAL_GPIO_Init+0x300>)
 800182c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001830:	6453      	str	r3, [r2, #68]	; 0x44
 8001832:	4b5a      	ldr	r3, [pc, #360]	; (800199c <HAL_GPIO_Init+0x300>)
 8001834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001836:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800183e:	4a58      	ldr	r2, [pc, #352]	; (80019a0 <HAL_GPIO_Init+0x304>)
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	089b      	lsrs	r3, r3, #2
 8001844:	3302      	adds	r3, #2
 8001846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800184a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	f003 0303 	and.w	r3, r3, #3
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	220f      	movs	r2, #15
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	43db      	mvns	r3, r3
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	4013      	ands	r3, r2
 8001860:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a4f      	ldr	r2, [pc, #316]	; (80019a4 <HAL_GPIO_Init+0x308>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d025      	beq.n	80018b6 <HAL_GPIO_Init+0x21a>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a4e      	ldr	r2, [pc, #312]	; (80019a8 <HAL_GPIO_Init+0x30c>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d01f      	beq.n	80018b2 <HAL_GPIO_Init+0x216>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a4d      	ldr	r2, [pc, #308]	; (80019ac <HAL_GPIO_Init+0x310>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d019      	beq.n	80018ae <HAL_GPIO_Init+0x212>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a4c      	ldr	r2, [pc, #304]	; (80019b0 <HAL_GPIO_Init+0x314>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d013      	beq.n	80018aa <HAL_GPIO_Init+0x20e>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a4b      	ldr	r2, [pc, #300]	; (80019b4 <HAL_GPIO_Init+0x318>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d00d      	beq.n	80018a6 <HAL_GPIO_Init+0x20a>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a4a      	ldr	r2, [pc, #296]	; (80019b8 <HAL_GPIO_Init+0x31c>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d007      	beq.n	80018a2 <HAL_GPIO_Init+0x206>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a49      	ldr	r2, [pc, #292]	; (80019bc <HAL_GPIO_Init+0x320>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d101      	bne.n	800189e <HAL_GPIO_Init+0x202>
 800189a:	2306      	movs	r3, #6
 800189c:	e00c      	b.n	80018b8 <HAL_GPIO_Init+0x21c>
 800189e:	2307      	movs	r3, #7
 80018a0:	e00a      	b.n	80018b8 <HAL_GPIO_Init+0x21c>
 80018a2:	2305      	movs	r3, #5
 80018a4:	e008      	b.n	80018b8 <HAL_GPIO_Init+0x21c>
 80018a6:	2304      	movs	r3, #4
 80018a8:	e006      	b.n	80018b8 <HAL_GPIO_Init+0x21c>
 80018aa:	2303      	movs	r3, #3
 80018ac:	e004      	b.n	80018b8 <HAL_GPIO_Init+0x21c>
 80018ae:	2302      	movs	r3, #2
 80018b0:	e002      	b.n	80018b8 <HAL_GPIO_Init+0x21c>
 80018b2:	2301      	movs	r3, #1
 80018b4:	e000      	b.n	80018b8 <HAL_GPIO_Init+0x21c>
 80018b6:	2300      	movs	r3, #0
 80018b8:	69fa      	ldr	r2, [r7, #28]
 80018ba:	f002 0203 	and.w	r2, r2, #3
 80018be:	0092      	lsls	r2, r2, #2
 80018c0:	4093      	lsls	r3, r2
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018c8:	4935      	ldr	r1, [pc, #212]	; (80019a0 <HAL_GPIO_Init+0x304>)
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	089b      	lsrs	r3, r3, #2
 80018ce:	3302      	adds	r3, #2
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018d6:	4b3a      	ldr	r3, [pc, #232]	; (80019c0 <HAL_GPIO_Init+0x324>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	43db      	mvns	r3, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4013      	ands	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d003      	beq.n	80018fa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018fa:	4a31      	ldr	r2, [pc, #196]	; (80019c0 <HAL_GPIO_Init+0x324>)
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001900:	4b2f      	ldr	r3, [pc, #188]	; (80019c0 <HAL_GPIO_Init+0x324>)
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	43db      	mvns	r3, r3
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4013      	ands	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d003      	beq.n	8001924 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	4313      	orrs	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001924:	4a26      	ldr	r2, [pc, #152]	; (80019c0 <HAL_GPIO_Init+0x324>)
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800192a:	4b25      	ldr	r3, [pc, #148]	; (80019c0 <HAL_GPIO_Init+0x324>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	43db      	mvns	r3, r3
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	4013      	ands	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d003      	beq.n	800194e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	4313      	orrs	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800194e:	4a1c      	ldr	r2, [pc, #112]	; (80019c0 <HAL_GPIO_Init+0x324>)
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001954:	4b1a      	ldr	r3, [pc, #104]	; (80019c0 <HAL_GPIO_Init+0x324>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	43db      	mvns	r3, r3
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4013      	ands	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d003      	beq.n	8001978 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	4313      	orrs	r3, r2
 8001976:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001978:	4a11      	ldr	r2, [pc, #68]	; (80019c0 <HAL_GPIO_Init+0x324>)
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	3301      	adds	r3, #1
 8001982:	61fb      	str	r3, [r7, #28]
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	2b0f      	cmp	r3, #15
 8001988:	f67f ae96 	bls.w	80016b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800198c:	bf00      	nop
 800198e:	bf00      	nop
 8001990:	3724      	adds	r7, #36	; 0x24
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	40023800 	.word	0x40023800
 80019a0:	40013800 	.word	0x40013800
 80019a4:	40020000 	.word	0x40020000
 80019a8:	40020400 	.word	0x40020400
 80019ac:	40020800 	.word	0x40020800
 80019b0:	40020c00 	.word	0x40020c00
 80019b4:	40021000 	.word	0x40021000
 80019b8:	40021400 	.word	0x40021400
 80019bc:	40021800 	.word	0x40021800
 80019c0:	40013c00 	.word	0x40013c00

080019c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	460b      	mov	r3, r1
 80019ce:	807b      	strh	r3, [r7, #2]
 80019d0:	4613      	mov	r3, r2
 80019d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019d4:	787b      	ldrb	r3, [r7, #1]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d003      	beq.n	80019e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019da:	887a      	ldrh	r2, [r7, #2]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019e0:	e003      	b.n	80019ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019e2:	887b      	ldrh	r3, [r7, #2]
 80019e4:	041a      	lsls	r2, r3, #16
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	619a      	str	r2, [r3, #24]
}
 80019ea:	bf00      	nop
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr

080019f6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019f6:	b480      	push	{r7}
 80019f8:	b085      	sub	sp, #20
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
 80019fe:	460b      	mov	r3, r1
 8001a00:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a08:	887a      	ldrh	r2, [r7, #2]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	041a      	lsls	r2, r3, #16
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	43d9      	mvns	r1, r3
 8001a14:	887b      	ldrh	r3, [r7, #2]
 8001a16:	400b      	ands	r3, r1
 8001a18:	431a      	orrs	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	619a      	str	r2, [r3, #24]
}
 8001a1e:	bf00      	nop
 8001a20:	3714      	adds	r7, #20
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr

08001a2a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001a2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a2c:	b08f      	sub	sp, #60	; 0x3c
 8001a2e:	af0a      	add	r7, sp, #40	; 0x28
 8001a30:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d101      	bne.n	8001a3c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e116      	b.n	8001c6a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d106      	bne.n	8001a5c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f7ff fbce 	bl	80011f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2203      	movs	r2, #3
 8001a60:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d102      	bne.n	8001a76 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f001 fd53 	bl	8003526 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	603b      	str	r3, [r7, #0]
 8001a86:	687e      	ldr	r6, [r7, #4]
 8001a88:	466d      	mov	r5, sp
 8001a8a:	f106 0410 	add.w	r4, r6, #16
 8001a8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a96:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a9a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a9e:	1d33      	adds	r3, r6, #4
 8001aa0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001aa2:	6838      	ldr	r0, [r7, #0]
 8001aa4:	f001 fcde 	bl	8003464 <USB_CoreInit>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d005      	beq.n	8001aba <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2202      	movs	r2, #2
 8001ab2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e0d7      	b.n	8001c6a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2100      	movs	r1, #0
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f001 fd41 	bl	8003548 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	73fb      	strb	r3, [r7, #15]
 8001aca:	e04a      	b.n	8001b62 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001acc:	7bfa      	ldrb	r2, [r7, #15]
 8001ace:	6879      	ldr	r1, [r7, #4]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	00db      	lsls	r3, r3, #3
 8001ad4:	4413      	add	r3, r2
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	440b      	add	r3, r1
 8001ada:	333d      	adds	r3, #61	; 0x3d
 8001adc:	2201      	movs	r2, #1
 8001ade:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ae0:	7bfa      	ldrb	r2, [r7, #15]
 8001ae2:	6879      	ldr	r1, [r7, #4]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	4413      	add	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	440b      	add	r3, r1
 8001aee:	333c      	adds	r3, #60	; 0x3c
 8001af0:	7bfa      	ldrb	r2, [r7, #15]
 8001af2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001af4:	7bfa      	ldrb	r2, [r7, #15]
 8001af6:	7bfb      	ldrb	r3, [r7, #15]
 8001af8:	b298      	uxth	r0, r3
 8001afa:	6879      	ldr	r1, [r7, #4]
 8001afc:	4613      	mov	r3, r2
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	4413      	add	r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	440b      	add	r3, r1
 8001b06:	3344      	adds	r3, #68	; 0x44
 8001b08:	4602      	mov	r2, r0
 8001b0a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b0c:	7bfa      	ldrb	r2, [r7, #15]
 8001b0e:	6879      	ldr	r1, [r7, #4]
 8001b10:	4613      	mov	r3, r2
 8001b12:	00db      	lsls	r3, r3, #3
 8001b14:	4413      	add	r3, r2
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	440b      	add	r3, r1
 8001b1a:	3340      	adds	r3, #64	; 0x40
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001b20:	7bfa      	ldrb	r2, [r7, #15]
 8001b22:	6879      	ldr	r1, [r7, #4]
 8001b24:	4613      	mov	r3, r2
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	4413      	add	r3, r2
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	440b      	add	r3, r1
 8001b2e:	3348      	adds	r3, #72	; 0x48
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001b34:	7bfa      	ldrb	r2, [r7, #15]
 8001b36:	6879      	ldr	r1, [r7, #4]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	00db      	lsls	r3, r3, #3
 8001b3c:	4413      	add	r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	440b      	add	r3, r1
 8001b42:	334c      	adds	r3, #76	; 0x4c
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001b48:	7bfa      	ldrb	r2, [r7, #15]
 8001b4a:	6879      	ldr	r1, [r7, #4]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	4413      	add	r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	440b      	add	r3, r1
 8001b56:	3354      	adds	r3, #84	; 0x54
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b5c:	7bfb      	ldrb	r3, [r7, #15]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	73fb      	strb	r3, [r7, #15]
 8001b62:	7bfa      	ldrb	r2, [r7, #15]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d3af      	bcc.n	8001acc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	73fb      	strb	r3, [r7, #15]
 8001b70:	e044      	b.n	8001bfc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001b72:	7bfa      	ldrb	r2, [r7, #15]
 8001b74:	6879      	ldr	r1, [r7, #4]
 8001b76:	4613      	mov	r3, r2
 8001b78:	00db      	lsls	r3, r3, #3
 8001b7a:	4413      	add	r3, r2
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	440b      	add	r3, r1
 8001b80:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001b84:	2200      	movs	r2, #0
 8001b86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001b88:	7bfa      	ldrb	r2, [r7, #15]
 8001b8a:	6879      	ldr	r1, [r7, #4]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	4413      	add	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	440b      	add	r3, r1
 8001b96:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001b9a:	7bfa      	ldrb	r2, [r7, #15]
 8001b9c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b9e:	7bfa      	ldrb	r2, [r7, #15]
 8001ba0:	6879      	ldr	r1, [r7, #4]
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	00db      	lsls	r3, r3, #3
 8001ba6:	4413      	add	r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	440b      	add	r3, r1
 8001bac:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001bb4:	7bfa      	ldrb	r2, [r7, #15]
 8001bb6:	6879      	ldr	r1, [r7, #4]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	4413      	add	r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	440b      	add	r3, r1
 8001bc2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001bca:	7bfa      	ldrb	r2, [r7, #15]
 8001bcc:	6879      	ldr	r1, [r7, #4]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	00db      	lsls	r3, r3, #3
 8001bd2:	4413      	add	r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	440b      	add	r3, r1
 8001bd8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001be0:	7bfa      	ldrb	r2, [r7, #15]
 8001be2:	6879      	ldr	r1, [r7, #4]
 8001be4:	4613      	mov	r3, r2
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	4413      	add	r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	440b      	add	r3, r1
 8001bee:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bf6:	7bfb      	ldrb	r3, [r7, #15]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	73fb      	strb	r3, [r7, #15]
 8001bfc:	7bfa      	ldrb	r2, [r7, #15]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d3b5      	bcc.n	8001b72 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	603b      	str	r3, [r7, #0]
 8001c0c:	687e      	ldr	r6, [r7, #4]
 8001c0e:	466d      	mov	r5, sp
 8001c10:	f106 0410 	add.w	r4, r6, #16
 8001c14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c1c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c20:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c24:	1d33      	adds	r3, r6, #4
 8001c26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c28:	6838      	ldr	r0, [r7, #0]
 8001c2a:	f001 fcd9 	bl	80035e0 <USB_DevInit>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d005      	beq.n	8001c40 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2202      	movs	r2, #2
 8001c38:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e014      	b.n	8001c6a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d102      	bne.n	8001c5e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f000 f80a 	bl	8001c72 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f001 fe97 	bl	8003996 <USB_DevDisconnect>

  return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3714      	adds	r7, #20
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c72 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001c72:	b480      	push	{r7}
 8001c74:	b085      	sub	sp, #20
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca4:	f043 0303 	orr.w	r3, r3, #3
 8001ca8:	68fa      	ldr	r2, [r7, #12]
 8001caa:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3714      	adds	r7, #20
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
	...

08001cbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e0cc      	b.n	8001e6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cd0:	4b68      	ldr	r3, [pc, #416]	; (8001e74 <HAL_RCC_ClockConfig+0x1b8>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 030f 	and.w	r3, r3, #15
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d90c      	bls.n	8001cf8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cde:	4b65      	ldr	r3, [pc, #404]	; (8001e74 <HAL_RCC_ClockConfig+0x1b8>)
 8001ce0:	683a      	ldr	r2, [r7, #0]
 8001ce2:	b2d2      	uxtb	r2, r2
 8001ce4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ce6:	4b63      	ldr	r3, [pc, #396]	; (8001e74 <HAL_RCC_ClockConfig+0x1b8>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 030f 	and.w	r3, r3, #15
 8001cee:	683a      	ldr	r2, [r7, #0]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d001      	beq.n	8001cf8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e0b8      	b.n	8001e6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d020      	beq.n	8001d46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0304 	and.w	r3, r3, #4
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d005      	beq.n	8001d1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d10:	4b59      	ldr	r3, [pc, #356]	; (8001e78 <HAL_RCC_ClockConfig+0x1bc>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	4a58      	ldr	r2, [pc, #352]	; (8001e78 <HAL_RCC_ClockConfig+0x1bc>)
 8001d16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0308 	and.w	r3, r3, #8
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d005      	beq.n	8001d34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d28:	4b53      	ldr	r3, [pc, #332]	; (8001e78 <HAL_RCC_ClockConfig+0x1bc>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	4a52      	ldr	r2, [pc, #328]	; (8001e78 <HAL_RCC_ClockConfig+0x1bc>)
 8001d2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d34:	4b50      	ldr	r3, [pc, #320]	; (8001e78 <HAL_RCC_ClockConfig+0x1bc>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	494d      	ldr	r1, [pc, #308]	; (8001e78 <HAL_RCC_ClockConfig+0x1bc>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d044      	beq.n	8001ddc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d107      	bne.n	8001d6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d5a:	4b47      	ldr	r3, [pc, #284]	; (8001e78 <HAL_RCC_ClockConfig+0x1bc>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d119      	bne.n	8001d9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e07f      	b.n	8001e6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d003      	beq.n	8001d7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d76:	2b03      	cmp	r3, #3
 8001d78:	d107      	bne.n	8001d8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d7a:	4b3f      	ldr	r3, [pc, #252]	; (8001e78 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d109      	bne.n	8001d9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e06f      	b.n	8001e6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d8a:	4b3b      	ldr	r3, [pc, #236]	; (8001e78 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e067      	b.n	8001e6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d9a:	4b37      	ldr	r3, [pc, #220]	; (8001e78 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f023 0203 	bic.w	r2, r3, #3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	4934      	ldr	r1, [pc, #208]	; (8001e78 <HAL_RCC_ClockConfig+0x1bc>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dac:	f7ff fb60 	bl	8001470 <HAL_GetTick>
 8001db0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001db2:	e00a      	b.n	8001dca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001db4:	f7ff fb5c 	bl	8001470 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e04f      	b.n	8001e6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dca:	4b2b      	ldr	r3, [pc, #172]	; (8001e78 <HAL_RCC_ClockConfig+0x1bc>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f003 020c 	and.w	r2, r3, #12
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d1eb      	bne.n	8001db4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ddc:	4b25      	ldr	r3, [pc, #148]	; (8001e74 <HAL_RCC_ClockConfig+0x1b8>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 030f 	and.w	r3, r3, #15
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d20c      	bcs.n	8001e04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dea:	4b22      	ldr	r3, [pc, #136]	; (8001e74 <HAL_RCC_ClockConfig+0x1b8>)
 8001dec:	683a      	ldr	r2, [r7, #0]
 8001dee:	b2d2      	uxtb	r2, r2
 8001df0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001df2:	4b20      	ldr	r3, [pc, #128]	; (8001e74 <HAL_RCC_ClockConfig+0x1b8>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 030f 	and.w	r3, r3, #15
 8001dfa:	683a      	ldr	r2, [r7, #0]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d001      	beq.n	8001e04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e032      	b.n	8001e6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0304 	and.w	r3, r3, #4
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d008      	beq.n	8001e22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e10:	4b19      	ldr	r3, [pc, #100]	; (8001e78 <HAL_RCC_ClockConfig+0x1bc>)
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	4916      	ldr	r1, [pc, #88]	; (8001e78 <HAL_RCC_ClockConfig+0x1bc>)
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0308 	and.w	r3, r3, #8
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d009      	beq.n	8001e42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e2e:	4b12      	ldr	r3, [pc, #72]	; (8001e78 <HAL_RCC_ClockConfig+0x1bc>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	490e      	ldr	r1, [pc, #56]	; (8001e78 <HAL_RCC_ClockConfig+0x1bc>)
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e42:	f000 fb7f 	bl	8002544 <HAL_RCC_GetSysClockFreq>
 8001e46:	4602      	mov	r2, r0
 8001e48:	4b0b      	ldr	r3, [pc, #44]	; (8001e78 <HAL_RCC_ClockConfig+0x1bc>)
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	091b      	lsrs	r3, r3, #4
 8001e4e:	f003 030f 	and.w	r3, r3, #15
 8001e52:	490a      	ldr	r1, [pc, #40]	; (8001e7c <HAL_RCC_ClockConfig+0x1c0>)
 8001e54:	5ccb      	ldrb	r3, [r1, r3]
 8001e56:	fa22 f303 	lsr.w	r3, r2, r3
 8001e5a:	4a09      	ldr	r2, [pc, #36]	; (8001e80 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e5e:	4b09      	ldr	r3, [pc, #36]	; (8001e84 <HAL_RCC_ClockConfig+0x1c8>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff fac0 	bl	80013e8 <HAL_InitTick>

  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40023c00 	.word	0x40023c00
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	08004b64 	.word	0x08004b64
 8001e80:	20000000 	.word	0x20000000
 8001e84:	20000004 	.word	0x20000004

08001e88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e8c:	4b03      	ldr	r3, [pc, #12]	; (8001e9c <HAL_RCC_GetHCLKFreq+0x14>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	20000000 	.word	0x20000000

08001ea0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ea4:	f7ff fff0 	bl	8001e88 <HAL_RCC_GetHCLKFreq>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	4b05      	ldr	r3, [pc, #20]	; (8001ec0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	0a9b      	lsrs	r3, r3, #10
 8001eb0:	f003 0307 	and.w	r3, r3, #7
 8001eb4:	4903      	ldr	r1, [pc, #12]	; (8001ec4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eb6:	5ccb      	ldrb	r3, [r1, r3]
 8001eb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	08004b74 	.word	0x08004b74

08001ec8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ecc:	f7ff ffdc 	bl	8001e88 <HAL_RCC_GetHCLKFreq>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	0b5b      	lsrs	r3, r3, #13
 8001ed8:	f003 0307 	and.w	r3, r3, #7
 8001edc:	4903      	ldr	r1, [pc, #12]	; (8001eec <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ede:	5ccb      	ldrb	r3, [r1, r3]
 8001ee0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	08004b74 	.word	0x08004b74

08001ef0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08c      	sub	sp, #48	; 0x30
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8001efc:	2300      	movs	r3, #0
 8001efe:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001f00:	2300      	movs	r3, #0
 8001f02:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001f04:	2300      	movs	r3, #0
 8001f06:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001f10:	2300      	movs	r3, #0
 8001f12:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001f14:	2300      	movs	r3, #0
 8001f16:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d010      	beq.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001f28:	4b6f      	ldr	r3, [pc, #444]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f2e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f36:	496c      	ldr	r1, [pc, #432]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8001f46:	2301      	movs	r3, #1
 8001f48:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d010      	beq.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001f56:	4b64      	ldr	r3, [pc, #400]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f5c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f64:	4960      	ldr	r1, [pc, #384]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d101      	bne.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001f74:	2301      	movs	r3, #1
 8001f76:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0304 	and.w	r3, r3, #4
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d017      	beq.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f84:	4b58      	ldr	r3, [pc, #352]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f8a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f92:	4955      	ldr	r1, [pc, #340]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001fa2:	d101      	bne.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d101      	bne.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0308 	and.w	r3, r3, #8
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d017      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001fc0:	4b49      	ldr	r3, [pc, #292]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001fc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fc6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fce:	4946      	ldr	r1, [pc, #280]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fde:	d101      	bne.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d101      	bne.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001fec:	2301      	movs	r3, #1
 8001fee:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0320 	and.w	r3, r3, #32
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f000 808a 	beq.w	8002112 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ffe:	2300      	movs	r3, #0
 8002000:	60bb      	str	r3, [r7, #8]
 8002002:	4b39      	ldr	r3, [pc, #228]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	4a38      	ldr	r2, [pc, #224]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800200c:	6413      	str	r3, [r2, #64]	; 0x40
 800200e:	4b36      	ldr	r3, [pc, #216]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002016:	60bb      	str	r3, [r7, #8]
 8002018:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800201a:	4b34      	ldr	r3, [pc, #208]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a33      	ldr	r2, [pc, #204]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002024:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002026:	f7ff fa23 	bl	8001470 <HAL_GetTick>
 800202a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800202c:	e008      	b.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800202e:	f7ff fa1f 	bl	8001470 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d901      	bls.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e278      	b.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002040:	4b2a      	ldr	r3, [pc, #168]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002048:	2b00      	cmp	r3, #0
 800204a:	d0f0      	beq.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800204c:	4b26      	ldr	r3, [pc, #152]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800204e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002050:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002054:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002056:	6a3b      	ldr	r3, [r7, #32]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d02f      	beq.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002060:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002064:	6a3a      	ldr	r2, [r7, #32]
 8002066:	429a      	cmp	r2, r3
 8002068:	d028      	beq.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800206a:	4b1f      	ldr	r3, [pc, #124]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800206c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800206e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002072:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002074:	4b1e      	ldr	r3, [pc, #120]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002076:	2201      	movs	r2, #1
 8002078:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800207a:	4b1d      	ldr	r3, [pc, #116]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002080:	4a19      	ldr	r2, [pc, #100]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002082:	6a3b      	ldr	r3, [r7, #32]
 8002084:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002086:	4b18      	ldr	r3, [pc, #96]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	2b01      	cmp	r3, #1
 8002090:	d114      	bne.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002092:	f7ff f9ed 	bl	8001470 <HAL_GetTick>
 8002096:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002098:	e00a      	b.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800209a:	f7ff f9e9 	bl	8001470 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d901      	bls.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e240      	b.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020b0:	4b0d      	ldr	r3, [pc, #52]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80020b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d0ee      	beq.n	800209a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80020c8:	d114      	bne.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80020ca:	4b07      	ldr	r3, [pc, #28]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80020da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020de:	4902      	ldr	r1, [pc, #8]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	608b      	str	r3, [r1, #8]
 80020e4:	e00c      	b.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80020e6:	bf00      	nop
 80020e8:	40023800 	.word	0x40023800
 80020ec:	40007000 	.word	0x40007000
 80020f0:	42470e40 	.word	0x42470e40
 80020f4:	4b4a      	ldr	r3, [pc, #296]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	4a49      	ldr	r2, [pc, #292]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80020fa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80020fe:	6093      	str	r3, [r2, #8]
 8002100:	4b47      	ldr	r3, [pc, #284]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002102:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002108:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800210c:	4944      	ldr	r1, [pc, #272]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800210e:	4313      	orrs	r3, r2
 8002110:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0310 	and.w	r3, r3, #16
 800211a:	2b00      	cmp	r3, #0
 800211c:	d004      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002124:	4b3f      	ldr	r3, [pc, #252]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002126:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002130:	2b00      	cmp	r3, #0
 8002132:	d00a      	beq.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002134:	4b3a      	ldr	r3, [pc, #232]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002136:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800213a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002142:	4937      	ldr	r1, [pc, #220]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002144:	4313      	orrs	r3, r2
 8002146:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002152:	2b00      	cmp	r3, #0
 8002154:	d00a      	beq.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002156:	4b32      	ldr	r3, [pc, #200]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002158:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800215c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002164:	492e      	ldr	r1, [pc, #184]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002166:	4313      	orrs	r3, r2
 8002168:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002174:	2b00      	cmp	r3, #0
 8002176:	d011      	beq.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002178:	4b29      	ldr	r3, [pc, #164]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800217a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800217e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002186:	4926      	ldr	r1, [pc, #152]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002188:	4313      	orrs	r3, r2
 800218a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002192:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002196:	d101      	bne.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002198:	2301      	movs	r3, #1
 800219a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d00a      	beq.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80021a8:	4b1d      	ldr	r3, [pc, #116]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80021aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021ae:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b6:	491a      	ldr	r1, [pc, #104]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d011      	beq.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80021ca:	4b15      	ldr	r3, [pc, #84]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80021cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021d0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021d8:	4911      	ldr	r1, [pc, #68]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021e8:	d101      	bne.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80021ea:	2301      	movs	r3, #1
 80021ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80021ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d005      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021fc:	f040 80ff 	bne.w	80023fe <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002200:	4b09      	ldr	r3, [pc, #36]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002202:	2200      	movs	r2, #0
 8002204:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002206:	f7ff f933 	bl	8001470 <HAL_GetTick>
 800220a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800220c:	e00e      	b.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800220e:	f7ff f92f 	bl	8001470 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	2b02      	cmp	r3, #2
 800221a:	d907      	bls.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e188      	b.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002220:	40023800 	.word	0x40023800
 8002224:	424711e0 	.word	0x424711e0
 8002228:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800222c:	4b7e      	ldr	r3, [pc, #504]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d1ea      	bne.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0301 	and.w	r3, r3, #1
 8002240:	2b00      	cmp	r3, #0
 8002242:	d003      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002248:	2b00      	cmp	r3, #0
 800224a:	d009      	beq.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002254:	2b00      	cmp	r3, #0
 8002256:	d028      	beq.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800225c:	2b00      	cmp	r3, #0
 800225e:	d124      	bne.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002260:	4b71      	ldr	r3, [pc, #452]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002262:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002266:	0c1b      	lsrs	r3, r3, #16
 8002268:	f003 0303 	and.w	r3, r3, #3
 800226c:	3301      	adds	r3, #1
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002272:	4b6d      	ldr	r3, [pc, #436]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002274:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002278:	0e1b      	lsrs	r3, r3, #24
 800227a:	f003 030f 	and.w	r3, r3, #15
 800227e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685a      	ldr	r2, [r3, #4]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	019b      	lsls	r3, r3, #6
 800228a:	431a      	orrs	r2, r3
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	085b      	lsrs	r3, r3, #1
 8002290:	3b01      	subs	r3, #1
 8002292:	041b      	lsls	r3, r3, #16
 8002294:	431a      	orrs	r2, r3
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	061b      	lsls	r3, r3, #24
 800229a:	431a      	orrs	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	695b      	ldr	r3, [r3, #20]
 80022a0:	071b      	lsls	r3, r3, #28
 80022a2:	4961      	ldr	r1, [pc, #388]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0304 	and.w	r3, r3, #4
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d004      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022be:	d00a      	beq.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d035      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022d4:	d130      	bne.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80022d6:	4b54      	ldr	r3, [pc, #336]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80022d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022dc:	0c1b      	lsrs	r3, r3, #16
 80022de:	f003 0303 	and.w	r3, r3, #3
 80022e2:	3301      	adds	r3, #1
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80022e8:	4b4f      	ldr	r3, [pc, #316]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80022ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022ee:	0f1b      	lsrs	r3, r3, #28
 80022f0:	f003 0307 	and.w	r3, r3, #7
 80022f4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685a      	ldr	r2, [r3, #4]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	019b      	lsls	r3, r3, #6
 8002300:	431a      	orrs	r2, r3
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	085b      	lsrs	r3, r3, #1
 8002306:	3b01      	subs	r3, #1
 8002308:	041b      	lsls	r3, r3, #16
 800230a:	431a      	orrs	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	061b      	lsls	r3, r3, #24
 8002312:	431a      	orrs	r2, r3
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	071b      	lsls	r3, r3, #28
 8002318:	4943      	ldr	r1, [pc, #268]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800231a:	4313      	orrs	r3, r2
 800231c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002320:	4b41      	ldr	r3, [pc, #260]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002322:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002326:	f023 021f 	bic.w	r2, r3, #31
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800232e:	3b01      	subs	r3, #1
 8002330:	493d      	ldr	r1, [pc, #244]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002332:	4313      	orrs	r3, r2
 8002334:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002340:	2b00      	cmp	r3, #0
 8002342:	d029      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002348:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800234c:	d124      	bne.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800234e:	4b36      	ldr	r3, [pc, #216]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002350:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002354:	0c1b      	lsrs	r3, r3, #16
 8002356:	f003 0303 	and.w	r3, r3, #3
 800235a:	3301      	adds	r3, #1
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002360:	4b31      	ldr	r3, [pc, #196]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002362:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002366:	0f1b      	lsrs	r3, r3, #28
 8002368:	f003 0307 	and.w	r3, r3, #7
 800236c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685a      	ldr	r2, [r3, #4]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	019b      	lsls	r3, r3, #6
 8002378:	431a      	orrs	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	085b      	lsrs	r3, r3, #1
 8002380:	3b01      	subs	r3, #1
 8002382:	041b      	lsls	r3, r3, #16
 8002384:	431a      	orrs	r2, r3
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	061b      	lsls	r3, r3, #24
 800238a:	431a      	orrs	r2, r3
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	071b      	lsls	r3, r3, #28
 8002390:	4925      	ldr	r1, [pc, #148]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002392:	4313      	orrs	r3, r2
 8002394:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d016      	beq.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685a      	ldr	r2, [r3, #4]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	019b      	lsls	r3, r3, #6
 80023ae:	431a      	orrs	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	085b      	lsrs	r3, r3, #1
 80023b6:	3b01      	subs	r3, #1
 80023b8:	041b      	lsls	r3, r3, #16
 80023ba:	431a      	orrs	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	691b      	ldr	r3, [r3, #16]
 80023c0:	061b      	lsls	r3, r3, #24
 80023c2:	431a      	orrs	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	695b      	ldr	r3, [r3, #20]
 80023c8:	071b      	lsls	r3, r3, #28
 80023ca:	4917      	ldr	r1, [pc, #92]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80023d2:	4b16      	ldr	r3, [pc, #88]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80023d4:	2201      	movs	r2, #1
 80023d6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80023d8:	f7ff f84a 	bl	8001470 <HAL_GetTick>
 80023dc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80023de:	e008      	b.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80023e0:	f7ff f846 	bl	8001470 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e09f      	b.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80023f2:	4b0d      	ldr	r3, [pc, #52]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d0f0      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80023fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002400:	2b01      	cmp	r3, #1
 8002402:	f040 8095 	bne.w	8002530 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002406:	4b0a      	ldr	r3, [pc, #40]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800240c:	f7ff f830 	bl	8001470 <HAL_GetTick>
 8002410:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002412:	e00f      	b.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002414:	f7ff f82c 	bl	8001470 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d908      	bls.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e085      	b.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002426:	bf00      	nop
 8002428:	40023800 	.word	0x40023800
 800242c:	42470068 	.word	0x42470068
 8002430:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002434:	4b41      	ldr	r3, [pc, #260]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800243c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002440:	d0e8      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0304 	and.w	r3, r3, #4
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	2b00      	cmp	r3, #0
 8002454:	d009      	beq.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800245e:	2b00      	cmp	r3, #0
 8002460:	d02b      	beq.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002466:	2b00      	cmp	r3, #0
 8002468:	d127      	bne.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800246a:	4b34      	ldr	r3, [pc, #208]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800246c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002470:	0c1b      	lsrs	r3, r3, #16
 8002472:	f003 0303 	and.w	r3, r3, #3
 8002476:	3301      	adds	r3, #1
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	699a      	ldr	r2, [r3, #24]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	69db      	ldr	r3, [r3, #28]
 8002484:	019b      	lsls	r3, r3, #6
 8002486:	431a      	orrs	r2, r3
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	085b      	lsrs	r3, r3, #1
 800248c:	3b01      	subs	r3, #1
 800248e:	041b      	lsls	r3, r3, #16
 8002490:	431a      	orrs	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002496:	061b      	lsls	r3, r3, #24
 8002498:	4928      	ldr	r1, [pc, #160]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800249a:	4313      	orrs	r3, r2
 800249c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80024a0:	4b26      	ldr	r3, [pc, #152]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80024a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024a6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ae:	3b01      	subs	r3, #1
 80024b0:	021b      	lsls	r3, r3, #8
 80024b2:	4922      	ldr	r1, [pc, #136]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d01d      	beq.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x612>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024ce:	d118      	bne.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80024d0:	4b1a      	ldr	r3, [pc, #104]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80024d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d6:	0e1b      	lsrs	r3, r3, #24
 80024d8:	f003 030f 	and.w	r3, r3, #15
 80024dc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	699a      	ldr	r2, [r3, #24]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	019b      	lsls	r3, r3, #6
 80024e8:	431a      	orrs	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a1b      	ldr	r3, [r3, #32]
 80024ee:	085b      	lsrs	r3, r3, #1
 80024f0:	3b01      	subs	r3, #1
 80024f2:	041b      	lsls	r3, r3, #16
 80024f4:	431a      	orrs	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	061b      	lsls	r3, r3, #24
 80024fa:	4910      	ldr	r1, [pc, #64]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002502:	4b0f      	ldr	r3, [pc, #60]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002504:	2201      	movs	r2, #1
 8002506:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002508:	f7fe ffb2 	bl	8001470 <HAL_GetTick>
 800250c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800250e:	e008      	b.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002510:	f7fe ffae 	bl	8001470 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b02      	cmp	r3, #2
 800251c:	d901      	bls.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e007      	b.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002522:	4b06      	ldr	r3, [pc, #24]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800252a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800252e:	d1ef      	bne.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3730      	adds	r7, #48	; 0x30
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	40023800 	.word	0x40023800
 8002540:	42470070 	.word	0x42470070

08002544 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002544:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002548:	b0ae      	sub	sp, #184	; 0xb8
 800254a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800254c:	2300      	movs	r3, #0
 800254e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002552:	2300      	movs	r3, #0
 8002554:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002558:	2300      	movs	r3, #0
 800255a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800255e:	2300      	movs	r3, #0
 8002560:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002564:	2300      	movs	r3, #0
 8002566:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800256a:	4bcb      	ldr	r3, [pc, #812]	; (8002898 <HAL_RCC_GetSysClockFreq+0x354>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 030c 	and.w	r3, r3, #12
 8002572:	2b0c      	cmp	r3, #12
 8002574:	f200 8206 	bhi.w	8002984 <HAL_RCC_GetSysClockFreq+0x440>
 8002578:	a201      	add	r2, pc, #4	; (adr r2, 8002580 <HAL_RCC_GetSysClockFreq+0x3c>)
 800257a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800257e:	bf00      	nop
 8002580:	080025b5 	.word	0x080025b5
 8002584:	08002985 	.word	0x08002985
 8002588:	08002985 	.word	0x08002985
 800258c:	08002985 	.word	0x08002985
 8002590:	080025bd 	.word	0x080025bd
 8002594:	08002985 	.word	0x08002985
 8002598:	08002985 	.word	0x08002985
 800259c:	08002985 	.word	0x08002985
 80025a0:	080025c5 	.word	0x080025c5
 80025a4:	08002985 	.word	0x08002985
 80025a8:	08002985 	.word	0x08002985
 80025ac:	08002985 	.word	0x08002985
 80025b0:	080027b5 	.word	0x080027b5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025b4:	4bb9      	ldr	r3, [pc, #740]	; (800289c <HAL_RCC_GetSysClockFreq+0x358>)
 80025b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80025ba:	e1e7      	b.n	800298c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025bc:	4bb8      	ldr	r3, [pc, #736]	; (80028a0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80025be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80025c2:	e1e3      	b.n	800298c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025c4:	4bb4      	ldr	r3, [pc, #720]	; (8002898 <HAL_RCC_GetSysClockFreq+0x354>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025d0:	4bb1      	ldr	r3, [pc, #708]	; (8002898 <HAL_RCC_GetSysClockFreq+0x354>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d071      	beq.n	80026c0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025dc:	4bae      	ldr	r3, [pc, #696]	; (8002898 <HAL_RCC_GetSysClockFreq+0x354>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	099b      	lsrs	r3, r3, #6
 80025e2:	2200      	movs	r2, #0
 80025e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80025e8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80025ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80025f8:	2300      	movs	r3, #0
 80025fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80025fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002602:	4622      	mov	r2, r4
 8002604:	462b      	mov	r3, r5
 8002606:	f04f 0000 	mov.w	r0, #0
 800260a:	f04f 0100 	mov.w	r1, #0
 800260e:	0159      	lsls	r1, r3, #5
 8002610:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002614:	0150      	lsls	r0, r2, #5
 8002616:	4602      	mov	r2, r0
 8002618:	460b      	mov	r3, r1
 800261a:	4621      	mov	r1, r4
 800261c:	1a51      	subs	r1, r2, r1
 800261e:	6439      	str	r1, [r7, #64]	; 0x40
 8002620:	4629      	mov	r1, r5
 8002622:	eb63 0301 	sbc.w	r3, r3, r1
 8002626:	647b      	str	r3, [r7, #68]	; 0x44
 8002628:	f04f 0200 	mov.w	r2, #0
 800262c:	f04f 0300 	mov.w	r3, #0
 8002630:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002634:	4649      	mov	r1, r9
 8002636:	018b      	lsls	r3, r1, #6
 8002638:	4641      	mov	r1, r8
 800263a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800263e:	4641      	mov	r1, r8
 8002640:	018a      	lsls	r2, r1, #6
 8002642:	4641      	mov	r1, r8
 8002644:	1a51      	subs	r1, r2, r1
 8002646:	63b9      	str	r1, [r7, #56]	; 0x38
 8002648:	4649      	mov	r1, r9
 800264a:	eb63 0301 	sbc.w	r3, r3, r1
 800264e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002650:	f04f 0200 	mov.w	r2, #0
 8002654:	f04f 0300 	mov.w	r3, #0
 8002658:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800265c:	4649      	mov	r1, r9
 800265e:	00cb      	lsls	r3, r1, #3
 8002660:	4641      	mov	r1, r8
 8002662:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002666:	4641      	mov	r1, r8
 8002668:	00ca      	lsls	r2, r1, #3
 800266a:	4610      	mov	r0, r2
 800266c:	4619      	mov	r1, r3
 800266e:	4603      	mov	r3, r0
 8002670:	4622      	mov	r2, r4
 8002672:	189b      	adds	r3, r3, r2
 8002674:	633b      	str	r3, [r7, #48]	; 0x30
 8002676:	462b      	mov	r3, r5
 8002678:	460a      	mov	r2, r1
 800267a:	eb42 0303 	adc.w	r3, r2, r3
 800267e:	637b      	str	r3, [r7, #52]	; 0x34
 8002680:	f04f 0200 	mov.w	r2, #0
 8002684:	f04f 0300 	mov.w	r3, #0
 8002688:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800268c:	4629      	mov	r1, r5
 800268e:	024b      	lsls	r3, r1, #9
 8002690:	4621      	mov	r1, r4
 8002692:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002696:	4621      	mov	r1, r4
 8002698:	024a      	lsls	r2, r1, #9
 800269a:	4610      	mov	r0, r2
 800269c:	4619      	mov	r1, r3
 800269e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80026a2:	2200      	movs	r2, #0
 80026a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80026a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80026ac:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80026b0:	f7fe f960 	bl	8000974 <__aeabi_uldivmod>
 80026b4:	4602      	mov	r2, r0
 80026b6:	460b      	mov	r3, r1
 80026b8:	4613      	mov	r3, r2
 80026ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80026be:	e067      	b.n	8002790 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026c0:	4b75      	ldr	r3, [pc, #468]	; (8002898 <HAL_RCC_GetSysClockFreq+0x354>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	099b      	lsrs	r3, r3, #6
 80026c6:	2200      	movs	r2, #0
 80026c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80026cc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80026d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80026da:	2300      	movs	r3, #0
 80026dc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80026de:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80026e2:	4622      	mov	r2, r4
 80026e4:	462b      	mov	r3, r5
 80026e6:	f04f 0000 	mov.w	r0, #0
 80026ea:	f04f 0100 	mov.w	r1, #0
 80026ee:	0159      	lsls	r1, r3, #5
 80026f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026f4:	0150      	lsls	r0, r2, #5
 80026f6:	4602      	mov	r2, r0
 80026f8:	460b      	mov	r3, r1
 80026fa:	4621      	mov	r1, r4
 80026fc:	1a51      	subs	r1, r2, r1
 80026fe:	62b9      	str	r1, [r7, #40]	; 0x28
 8002700:	4629      	mov	r1, r5
 8002702:	eb63 0301 	sbc.w	r3, r3, r1
 8002706:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002708:	f04f 0200 	mov.w	r2, #0
 800270c:	f04f 0300 	mov.w	r3, #0
 8002710:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002714:	4649      	mov	r1, r9
 8002716:	018b      	lsls	r3, r1, #6
 8002718:	4641      	mov	r1, r8
 800271a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800271e:	4641      	mov	r1, r8
 8002720:	018a      	lsls	r2, r1, #6
 8002722:	4641      	mov	r1, r8
 8002724:	ebb2 0a01 	subs.w	sl, r2, r1
 8002728:	4649      	mov	r1, r9
 800272a:	eb63 0b01 	sbc.w	fp, r3, r1
 800272e:	f04f 0200 	mov.w	r2, #0
 8002732:	f04f 0300 	mov.w	r3, #0
 8002736:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800273a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800273e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002742:	4692      	mov	sl, r2
 8002744:	469b      	mov	fp, r3
 8002746:	4623      	mov	r3, r4
 8002748:	eb1a 0303 	adds.w	r3, sl, r3
 800274c:	623b      	str	r3, [r7, #32]
 800274e:	462b      	mov	r3, r5
 8002750:	eb4b 0303 	adc.w	r3, fp, r3
 8002754:	627b      	str	r3, [r7, #36]	; 0x24
 8002756:	f04f 0200 	mov.w	r2, #0
 800275a:	f04f 0300 	mov.w	r3, #0
 800275e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002762:	4629      	mov	r1, r5
 8002764:	028b      	lsls	r3, r1, #10
 8002766:	4621      	mov	r1, r4
 8002768:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800276c:	4621      	mov	r1, r4
 800276e:	028a      	lsls	r2, r1, #10
 8002770:	4610      	mov	r0, r2
 8002772:	4619      	mov	r1, r3
 8002774:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002778:	2200      	movs	r2, #0
 800277a:	673b      	str	r3, [r7, #112]	; 0x70
 800277c:	677a      	str	r2, [r7, #116]	; 0x74
 800277e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002782:	f7fe f8f7 	bl	8000974 <__aeabi_uldivmod>
 8002786:	4602      	mov	r2, r0
 8002788:	460b      	mov	r3, r1
 800278a:	4613      	mov	r3, r2
 800278c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002790:	4b41      	ldr	r3, [pc, #260]	; (8002898 <HAL_RCC_GetSysClockFreq+0x354>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	0c1b      	lsrs	r3, r3, #16
 8002796:	f003 0303 	and.w	r3, r3, #3
 800279a:	3301      	adds	r3, #1
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80027a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80027a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80027aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80027b2:	e0eb      	b.n	800298c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027b4:	4b38      	ldr	r3, [pc, #224]	; (8002898 <HAL_RCC_GetSysClockFreq+0x354>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027c0:	4b35      	ldr	r3, [pc, #212]	; (8002898 <HAL_RCC_GetSysClockFreq+0x354>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d06b      	beq.n	80028a4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027cc:	4b32      	ldr	r3, [pc, #200]	; (8002898 <HAL_RCC_GetSysClockFreq+0x354>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	099b      	lsrs	r3, r3, #6
 80027d2:	2200      	movs	r2, #0
 80027d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80027d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80027d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027de:	663b      	str	r3, [r7, #96]	; 0x60
 80027e0:	2300      	movs	r3, #0
 80027e2:	667b      	str	r3, [r7, #100]	; 0x64
 80027e4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80027e8:	4622      	mov	r2, r4
 80027ea:	462b      	mov	r3, r5
 80027ec:	f04f 0000 	mov.w	r0, #0
 80027f0:	f04f 0100 	mov.w	r1, #0
 80027f4:	0159      	lsls	r1, r3, #5
 80027f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027fa:	0150      	lsls	r0, r2, #5
 80027fc:	4602      	mov	r2, r0
 80027fe:	460b      	mov	r3, r1
 8002800:	4621      	mov	r1, r4
 8002802:	1a51      	subs	r1, r2, r1
 8002804:	61b9      	str	r1, [r7, #24]
 8002806:	4629      	mov	r1, r5
 8002808:	eb63 0301 	sbc.w	r3, r3, r1
 800280c:	61fb      	str	r3, [r7, #28]
 800280e:	f04f 0200 	mov.w	r2, #0
 8002812:	f04f 0300 	mov.w	r3, #0
 8002816:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800281a:	4659      	mov	r1, fp
 800281c:	018b      	lsls	r3, r1, #6
 800281e:	4651      	mov	r1, sl
 8002820:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002824:	4651      	mov	r1, sl
 8002826:	018a      	lsls	r2, r1, #6
 8002828:	4651      	mov	r1, sl
 800282a:	ebb2 0801 	subs.w	r8, r2, r1
 800282e:	4659      	mov	r1, fp
 8002830:	eb63 0901 	sbc.w	r9, r3, r1
 8002834:	f04f 0200 	mov.w	r2, #0
 8002838:	f04f 0300 	mov.w	r3, #0
 800283c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002840:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002844:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002848:	4690      	mov	r8, r2
 800284a:	4699      	mov	r9, r3
 800284c:	4623      	mov	r3, r4
 800284e:	eb18 0303 	adds.w	r3, r8, r3
 8002852:	613b      	str	r3, [r7, #16]
 8002854:	462b      	mov	r3, r5
 8002856:	eb49 0303 	adc.w	r3, r9, r3
 800285a:	617b      	str	r3, [r7, #20]
 800285c:	f04f 0200 	mov.w	r2, #0
 8002860:	f04f 0300 	mov.w	r3, #0
 8002864:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002868:	4629      	mov	r1, r5
 800286a:	024b      	lsls	r3, r1, #9
 800286c:	4621      	mov	r1, r4
 800286e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002872:	4621      	mov	r1, r4
 8002874:	024a      	lsls	r2, r1, #9
 8002876:	4610      	mov	r0, r2
 8002878:	4619      	mov	r1, r3
 800287a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800287e:	2200      	movs	r2, #0
 8002880:	65bb      	str	r3, [r7, #88]	; 0x58
 8002882:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002884:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002888:	f7fe f874 	bl	8000974 <__aeabi_uldivmod>
 800288c:	4602      	mov	r2, r0
 800288e:	460b      	mov	r3, r1
 8002890:	4613      	mov	r3, r2
 8002892:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002896:	e065      	b.n	8002964 <HAL_RCC_GetSysClockFreq+0x420>
 8002898:	40023800 	.word	0x40023800
 800289c:	00f42400 	.word	0x00f42400
 80028a0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028a4:	4b3d      	ldr	r3, [pc, #244]	; (800299c <HAL_RCC_GetSysClockFreq+0x458>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	099b      	lsrs	r3, r3, #6
 80028aa:	2200      	movs	r2, #0
 80028ac:	4618      	mov	r0, r3
 80028ae:	4611      	mov	r1, r2
 80028b0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80028b4:	653b      	str	r3, [r7, #80]	; 0x50
 80028b6:	2300      	movs	r3, #0
 80028b8:	657b      	str	r3, [r7, #84]	; 0x54
 80028ba:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80028be:	4642      	mov	r2, r8
 80028c0:	464b      	mov	r3, r9
 80028c2:	f04f 0000 	mov.w	r0, #0
 80028c6:	f04f 0100 	mov.w	r1, #0
 80028ca:	0159      	lsls	r1, r3, #5
 80028cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028d0:	0150      	lsls	r0, r2, #5
 80028d2:	4602      	mov	r2, r0
 80028d4:	460b      	mov	r3, r1
 80028d6:	4641      	mov	r1, r8
 80028d8:	1a51      	subs	r1, r2, r1
 80028da:	60b9      	str	r1, [r7, #8]
 80028dc:	4649      	mov	r1, r9
 80028de:	eb63 0301 	sbc.w	r3, r3, r1
 80028e2:	60fb      	str	r3, [r7, #12]
 80028e4:	f04f 0200 	mov.w	r2, #0
 80028e8:	f04f 0300 	mov.w	r3, #0
 80028ec:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80028f0:	4659      	mov	r1, fp
 80028f2:	018b      	lsls	r3, r1, #6
 80028f4:	4651      	mov	r1, sl
 80028f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028fa:	4651      	mov	r1, sl
 80028fc:	018a      	lsls	r2, r1, #6
 80028fe:	4651      	mov	r1, sl
 8002900:	1a54      	subs	r4, r2, r1
 8002902:	4659      	mov	r1, fp
 8002904:	eb63 0501 	sbc.w	r5, r3, r1
 8002908:	f04f 0200 	mov.w	r2, #0
 800290c:	f04f 0300 	mov.w	r3, #0
 8002910:	00eb      	lsls	r3, r5, #3
 8002912:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002916:	00e2      	lsls	r2, r4, #3
 8002918:	4614      	mov	r4, r2
 800291a:	461d      	mov	r5, r3
 800291c:	4643      	mov	r3, r8
 800291e:	18e3      	adds	r3, r4, r3
 8002920:	603b      	str	r3, [r7, #0]
 8002922:	464b      	mov	r3, r9
 8002924:	eb45 0303 	adc.w	r3, r5, r3
 8002928:	607b      	str	r3, [r7, #4]
 800292a:	f04f 0200 	mov.w	r2, #0
 800292e:	f04f 0300 	mov.w	r3, #0
 8002932:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002936:	4629      	mov	r1, r5
 8002938:	028b      	lsls	r3, r1, #10
 800293a:	4621      	mov	r1, r4
 800293c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002940:	4621      	mov	r1, r4
 8002942:	028a      	lsls	r2, r1, #10
 8002944:	4610      	mov	r0, r2
 8002946:	4619      	mov	r1, r3
 8002948:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800294c:	2200      	movs	r2, #0
 800294e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002950:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002952:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002956:	f7fe f80d 	bl	8000974 <__aeabi_uldivmod>
 800295a:	4602      	mov	r2, r0
 800295c:	460b      	mov	r3, r1
 800295e:	4613      	mov	r3, r2
 8002960:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002964:	4b0d      	ldr	r3, [pc, #52]	; (800299c <HAL_RCC_GetSysClockFreq+0x458>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	0f1b      	lsrs	r3, r3, #28
 800296a:	f003 0307 	and.w	r3, r3, #7
 800296e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002972:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002976:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800297a:	fbb2 f3f3 	udiv	r3, r2, r3
 800297e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002982:	e003      	b.n	800298c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002984:	4b06      	ldr	r3, [pc, #24]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002986:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800298a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800298c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002990:	4618      	mov	r0, r3
 8002992:	37b8      	adds	r7, #184	; 0xb8
 8002994:	46bd      	mov	sp, r7
 8002996:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800299a:	bf00      	nop
 800299c:	40023800 	.word	0x40023800
 80029a0:	00f42400 	.word	0x00f42400

080029a4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e28d      	b.n	8002ed2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f000 8083 	beq.w	8002aca <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80029c4:	4b94      	ldr	r3, [pc, #592]	; (8002c18 <HAL_RCC_OscConfig+0x274>)
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f003 030c 	and.w	r3, r3, #12
 80029cc:	2b04      	cmp	r3, #4
 80029ce:	d019      	beq.n	8002a04 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80029d0:	4b91      	ldr	r3, [pc, #580]	; (8002c18 <HAL_RCC_OscConfig+0x274>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80029d8:	2b08      	cmp	r3, #8
 80029da:	d106      	bne.n	80029ea <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80029dc:	4b8e      	ldr	r3, [pc, #568]	; (8002c18 <HAL_RCC_OscConfig+0x274>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029e8:	d00c      	beq.n	8002a04 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029ea:	4b8b      	ldr	r3, [pc, #556]	; (8002c18 <HAL_RCC_OscConfig+0x274>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80029f2:	2b0c      	cmp	r3, #12
 80029f4:	d112      	bne.n	8002a1c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029f6:	4b88      	ldr	r3, [pc, #544]	; (8002c18 <HAL_RCC_OscConfig+0x274>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a02:	d10b      	bne.n	8002a1c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a04:	4b84      	ldr	r3, [pc, #528]	; (8002c18 <HAL_RCC_OscConfig+0x274>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d05b      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x124>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d157      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e25a      	b.n	8002ed2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a24:	d106      	bne.n	8002a34 <HAL_RCC_OscConfig+0x90>
 8002a26:	4b7c      	ldr	r3, [pc, #496]	; (8002c18 <HAL_RCC_OscConfig+0x274>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a7b      	ldr	r2, [pc, #492]	; (8002c18 <HAL_RCC_OscConfig+0x274>)
 8002a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a30:	6013      	str	r3, [r2, #0]
 8002a32:	e01d      	b.n	8002a70 <HAL_RCC_OscConfig+0xcc>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a3c:	d10c      	bne.n	8002a58 <HAL_RCC_OscConfig+0xb4>
 8002a3e:	4b76      	ldr	r3, [pc, #472]	; (8002c18 <HAL_RCC_OscConfig+0x274>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a75      	ldr	r2, [pc, #468]	; (8002c18 <HAL_RCC_OscConfig+0x274>)
 8002a44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a48:	6013      	str	r3, [r2, #0]
 8002a4a:	4b73      	ldr	r3, [pc, #460]	; (8002c18 <HAL_RCC_OscConfig+0x274>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a72      	ldr	r2, [pc, #456]	; (8002c18 <HAL_RCC_OscConfig+0x274>)
 8002a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a54:	6013      	str	r3, [r2, #0]
 8002a56:	e00b      	b.n	8002a70 <HAL_RCC_OscConfig+0xcc>
 8002a58:	4b6f      	ldr	r3, [pc, #444]	; (8002c18 <HAL_RCC_OscConfig+0x274>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a6e      	ldr	r2, [pc, #440]	; (8002c18 <HAL_RCC_OscConfig+0x274>)
 8002a5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a62:	6013      	str	r3, [r2, #0]
 8002a64:	4b6c      	ldr	r3, [pc, #432]	; (8002c18 <HAL_RCC_OscConfig+0x274>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a6b      	ldr	r2, [pc, #428]	; (8002c18 <HAL_RCC_OscConfig+0x274>)
 8002a6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d013      	beq.n	8002aa0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a78:	f7fe fcfa 	bl	8001470 <HAL_GetTick>
 8002a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a80:	f7fe fcf6 	bl	8001470 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b64      	cmp	r3, #100	; 0x64
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e21f      	b.n	8002ed2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a92:	4b61      	ldr	r3, [pc, #388]	; (8002c18 <HAL_RCC_OscConfig+0x274>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d0f0      	beq.n	8002a80 <HAL_RCC_OscConfig+0xdc>
 8002a9e:	e014      	b.n	8002aca <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa0:	f7fe fce6 	bl	8001470 <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002aa8:	f7fe fce2 	bl	8001470 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b64      	cmp	r3, #100	; 0x64
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e20b      	b.n	8002ed2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aba:	4b57      	ldr	r3, [pc, #348]	; (8002c18 <HAL_RCC_OscConfig+0x274>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1f0      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x104>
 8002ac6:	e000      	b.n	8002aca <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d06f      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002ad6:	4b50      	ldr	r3, [pc, #320]	; (8002c18 <HAL_RCC_OscConfig+0x274>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f003 030c 	and.w	r3, r3, #12
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d017      	beq.n	8002b12 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ae2:	4b4d      	ldr	r3, [pc, #308]	; (8002c18 <HAL_RCC_OscConfig+0x274>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002aea:	2b08      	cmp	r3, #8
 8002aec:	d105      	bne.n	8002afa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002aee:	4b4a      	ldr	r3, [pc, #296]	; (8002c18 <HAL_RCC_OscConfig+0x274>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00b      	beq.n	8002b12 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002afa:	4b47      	ldr	r3, [pc, #284]	; (8002c18 <HAL_RCC_OscConfig+0x274>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002b02:	2b0c      	cmp	r3, #12
 8002b04:	d11c      	bne.n	8002b40 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b06:	4b44      	ldr	r3, [pc, #272]	; (8002c18 <HAL_RCC_OscConfig+0x274>)
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d116      	bne.n	8002b40 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b12:	4b41      	ldr	r3, [pc, #260]	; (8002c18 <HAL_RCC_OscConfig+0x274>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d005      	beq.n	8002b2a <HAL_RCC_OscConfig+0x186>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d001      	beq.n	8002b2a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e1d3      	b.n	8002ed2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b2a:	4b3b      	ldr	r3, [pc, #236]	; (8002c18 <HAL_RCC_OscConfig+0x274>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	4937      	ldr	r1, [pc, #220]	; (8002c18 <HAL_RCC_OscConfig+0x274>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b3e:	e03a      	b.n	8002bb6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d020      	beq.n	8002b8a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b48:	4b34      	ldr	r3, [pc, #208]	; (8002c1c <HAL_RCC_OscConfig+0x278>)
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b4e:	f7fe fc8f 	bl	8001470 <HAL_GetTick>
 8002b52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b54:	e008      	b.n	8002b68 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b56:	f7fe fc8b 	bl	8001470 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d901      	bls.n	8002b68 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e1b4      	b.n	8002ed2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b68:	4b2b      	ldr	r3, [pc, #172]	; (8002c18 <HAL_RCC_OscConfig+0x274>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d0f0      	beq.n	8002b56 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b74:	4b28      	ldr	r3, [pc, #160]	; (8002c18 <HAL_RCC_OscConfig+0x274>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	00db      	lsls	r3, r3, #3
 8002b82:	4925      	ldr	r1, [pc, #148]	; (8002c18 <HAL_RCC_OscConfig+0x274>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	600b      	str	r3, [r1, #0]
 8002b88:	e015      	b.n	8002bb6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b8a:	4b24      	ldr	r3, [pc, #144]	; (8002c1c <HAL_RCC_OscConfig+0x278>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b90:	f7fe fc6e 	bl	8001470 <HAL_GetTick>
 8002b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b96:	e008      	b.n	8002baa <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b98:	f7fe fc6a 	bl	8001470 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e193      	b.n	8002ed2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002baa:	4b1b      	ldr	r3, [pc, #108]	; (8002c18 <HAL_RCC_OscConfig+0x274>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1f0      	bne.n	8002b98 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0308 	and.w	r3, r3, #8
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d036      	beq.n	8002c30 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d016      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bca:	4b15      	ldr	r3, [pc, #84]	; (8002c20 <HAL_RCC_OscConfig+0x27c>)
 8002bcc:	2201      	movs	r2, #1
 8002bce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd0:	f7fe fc4e 	bl	8001470 <HAL_GetTick>
 8002bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bd6:	e008      	b.n	8002bea <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bd8:	f7fe fc4a 	bl	8001470 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e173      	b.n	8002ed2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bea:	4b0b      	ldr	r3, [pc, #44]	; (8002c18 <HAL_RCC_OscConfig+0x274>)
 8002bec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d0f0      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x234>
 8002bf6:	e01b      	b.n	8002c30 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bf8:	4b09      	ldr	r3, [pc, #36]	; (8002c20 <HAL_RCC_OscConfig+0x27c>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bfe:	f7fe fc37 	bl	8001470 <HAL_GetTick>
 8002c02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c04:	e00e      	b.n	8002c24 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c06:	f7fe fc33 	bl	8001470 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d907      	bls.n	8002c24 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e15c      	b.n	8002ed2 <HAL_RCC_OscConfig+0x52e>
 8002c18:	40023800 	.word	0x40023800
 8002c1c:	42470000 	.word	0x42470000
 8002c20:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c24:	4b8a      	ldr	r3, [pc, #552]	; (8002e50 <HAL_RCC_OscConfig+0x4ac>)
 8002c26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1ea      	bne.n	8002c06 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0304 	and.w	r3, r3, #4
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f000 8097 	beq.w	8002d6c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c42:	4b83      	ldr	r3, [pc, #524]	; (8002e50 <HAL_RCC_OscConfig+0x4ac>)
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d10f      	bne.n	8002c6e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c4e:	2300      	movs	r3, #0
 8002c50:	60bb      	str	r3, [r7, #8]
 8002c52:	4b7f      	ldr	r3, [pc, #508]	; (8002e50 <HAL_RCC_OscConfig+0x4ac>)
 8002c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c56:	4a7e      	ldr	r2, [pc, #504]	; (8002e50 <HAL_RCC_OscConfig+0x4ac>)
 8002c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c5e:	4b7c      	ldr	r3, [pc, #496]	; (8002e50 <HAL_RCC_OscConfig+0x4ac>)
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c66:	60bb      	str	r3, [r7, #8]
 8002c68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c6e:	4b79      	ldr	r3, [pc, #484]	; (8002e54 <HAL_RCC_OscConfig+0x4b0>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d118      	bne.n	8002cac <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c7a:	4b76      	ldr	r3, [pc, #472]	; (8002e54 <HAL_RCC_OscConfig+0x4b0>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a75      	ldr	r2, [pc, #468]	; (8002e54 <HAL_RCC_OscConfig+0x4b0>)
 8002c80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c86:	f7fe fbf3 	bl	8001470 <HAL_GetTick>
 8002c8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c8c:	e008      	b.n	8002ca0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c8e:	f7fe fbef 	bl	8001470 <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d901      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e118      	b.n	8002ed2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca0:	4b6c      	ldr	r3, [pc, #432]	; (8002e54 <HAL_RCC_OscConfig+0x4b0>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d0f0      	beq.n	8002c8e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d106      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x31e>
 8002cb4:	4b66      	ldr	r3, [pc, #408]	; (8002e50 <HAL_RCC_OscConfig+0x4ac>)
 8002cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb8:	4a65      	ldr	r2, [pc, #404]	; (8002e50 <HAL_RCC_OscConfig+0x4ac>)
 8002cba:	f043 0301 	orr.w	r3, r3, #1
 8002cbe:	6713      	str	r3, [r2, #112]	; 0x70
 8002cc0:	e01c      	b.n	8002cfc <HAL_RCC_OscConfig+0x358>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	2b05      	cmp	r3, #5
 8002cc8:	d10c      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x340>
 8002cca:	4b61      	ldr	r3, [pc, #388]	; (8002e50 <HAL_RCC_OscConfig+0x4ac>)
 8002ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cce:	4a60      	ldr	r2, [pc, #384]	; (8002e50 <HAL_RCC_OscConfig+0x4ac>)
 8002cd0:	f043 0304 	orr.w	r3, r3, #4
 8002cd4:	6713      	str	r3, [r2, #112]	; 0x70
 8002cd6:	4b5e      	ldr	r3, [pc, #376]	; (8002e50 <HAL_RCC_OscConfig+0x4ac>)
 8002cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cda:	4a5d      	ldr	r2, [pc, #372]	; (8002e50 <HAL_RCC_OscConfig+0x4ac>)
 8002cdc:	f043 0301 	orr.w	r3, r3, #1
 8002ce0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ce2:	e00b      	b.n	8002cfc <HAL_RCC_OscConfig+0x358>
 8002ce4:	4b5a      	ldr	r3, [pc, #360]	; (8002e50 <HAL_RCC_OscConfig+0x4ac>)
 8002ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce8:	4a59      	ldr	r2, [pc, #356]	; (8002e50 <HAL_RCC_OscConfig+0x4ac>)
 8002cea:	f023 0301 	bic.w	r3, r3, #1
 8002cee:	6713      	str	r3, [r2, #112]	; 0x70
 8002cf0:	4b57      	ldr	r3, [pc, #348]	; (8002e50 <HAL_RCC_OscConfig+0x4ac>)
 8002cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf4:	4a56      	ldr	r2, [pc, #344]	; (8002e50 <HAL_RCC_OscConfig+0x4ac>)
 8002cf6:	f023 0304 	bic.w	r3, r3, #4
 8002cfa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d015      	beq.n	8002d30 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d04:	f7fe fbb4 	bl	8001470 <HAL_GetTick>
 8002d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d0a:	e00a      	b.n	8002d22 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d0c:	f7fe fbb0 	bl	8001470 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e0d7      	b.n	8002ed2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d22:	4b4b      	ldr	r3, [pc, #300]	; (8002e50 <HAL_RCC_OscConfig+0x4ac>)
 8002d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d0ee      	beq.n	8002d0c <HAL_RCC_OscConfig+0x368>
 8002d2e:	e014      	b.n	8002d5a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d30:	f7fe fb9e 	bl	8001470 <HAL_GetTick>
 8002d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d36:	e00a      	b.n	8002d4e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d38:	f7fe fb9a 	bl	8001470 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e0c1      	b.n	8002ed2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d4e:	4b40      	ldr	r3, [pc, #256]	; (8002e50 <HAL_RCC_OscConfig+0x4ac>)
 8002d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1ee      	bne.n	8002d38 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d5a:	7dfb      	ldrb	r3, [r7, #23]
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d105      	bne.n	8002d6c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d60:	4b3b      	ldr	r3, [pc, #236]	; (8002e50 <HAL_RCC_OscConfig+0x4ac>)
 8002d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d64:	4a3a      	ldr	r2, [pc, #232]	; (8002e50 <HAL_RCC_OscConfig+0x4ac>)
 8002d66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d6a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f000 80ad 	beq.w	8002ed0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d76:	4b36      	ldr	r3, [pc, #216]	; (8002e50 <HAL_RCC_OscConfig+0x4ac>)
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f003 030c 	and.w	r3, r3, #12
 8002d7e:	2b08      	cmp	r3, #8
 8002d80:	d060      	beq.n	8002e44 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d145      	bne.n	8002e16 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d8a:	4b33      	ldr	r3, [pc, #204]	; (8002e58 <HAL_RCC_OscConfig+0x4b4>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d90:	f7fe fb6e 	bl	8001470 <HAL_GetTick>
 8002d94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d96:	e008      	b.n	8002daa <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d98:	f7fe fb6a 	bl	8001470 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e093      	b.n	8002ed2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002daa:	4b29      	ldr	r3, [pc, #164]	; (8002e50 <HAL_RCC_OscConfig+0x4ac>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1f0      	bne.n	8002d98 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	69da      	ldr	r2, [r3, #28]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	431a      	orrs	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc4:	019b      	lsls	r3, r3, #6
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dcc:	085b      	lsrs	r3, r3, #1
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	041b      	lsls	r3, r3, #16
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd8:	061b      	lsls	r3, r3, #24
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de0:	071b      	lsls	r3, r3, #28
 8002de2:	491b      	ldr	r1, [pc, #108]	; (8002e50 <HAL_RCC_OscConfig+0x4ac>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002de8:	4b1b      	ldr	r3, [pc, #108]	; (8002e58 <HAL_RCC_OscConfig+0x4b4>)
 8002dea:	2201      	movs	r2, #1
 8002dec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dee:	f7fe fb3f 	bl	8001470 <HAL_GetTick>
 8002df2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002df4:	e008      	b.n	8002e08 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002df6:	f7fe fb3b 	bl	8001470 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d901      	bls.n	8002e08 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e064      	b.n	8002ed2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e08:	4b11      	ldr	r3, [pc, #68]	; (8002e50 <HAL_RCC_OscConfig+0x4ac>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d0f0      	beq.n	8002df6 <HAL_RCC_OscConfig+0x452>
 8002e14:	e05c      	b.n	8002ed0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e16:	4b10      	ldr	r3, [pc, #64]	; (8002e58 <HAL_RCC_OscConfig+0x4b4>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e1c:	f7fe fb28 	bl	8001470 <HAL_GetTick>
 8002e20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e22:	e008      	b.n	8002e36 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e24:	f7fe fb24 	bl	8001470 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e04d      	b.n	8002ed2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e36:	4b06      	ldr	r3, [pc, #24]	; (8002e50 <HAL_RCC_OscConfig+0x4ac>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d1f0      	bne.n	8002e24 <HAL_RCC_OscConfig+0x480>
 8002e42:	e045      	b.n	8002ed0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d107      	bne.n	8002e5c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e040      	b.n	8002ed2 <HAL_RCC_OscConfig+0x52e>
 8002e50:	40023800 	.word	0x40023800
 8002e54:	40007000 	.word	0x40007000
 8002e58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e5c:	4b1f      	ldr	r3, [pc, #124]	; (8002edc <HAL_RCC_OscConfig+0x538>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d030      	beq.n	8002ecc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d129      	bne.n	8002ecc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d122      	bne.n	8002ecc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d119      	bne.n	8002ecc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea2:	085b      	lsrs	r3, r3, #1
 8002ea4:	3b01      	subs	r3, #1
 8002ea6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d10f      	bne.n	8002ecc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d107      	bne.n	8002ecc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d001      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e000      	b.n	8002ed2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3718      	adds	r7, #24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	40023800 	.word	0x40023800

08002ee0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e03f      	b.n	8002f72 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d106      	bne.n	8002f0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f7fe f92e 	bl	8001168 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2224      	movs	r2, #36	; 0x24
 8002f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68da      	ldr	r2, [r3, #12]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f000 f829 	bl	8002f7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	691a      	ldr	r2, [r3, #16]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	695a      	ldr	r2, [r3, #20]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68da      	ldr	r2, [r3, #12]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2220      	movs	r2, #32
 8002f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2220      	movs	r2, #32
 8002f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3708      	adds	r7, #8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
	...

08002f7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f80:	b0c0      	sub	sp, #256	; 0x100
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f98:	68d9      	ldr	r1, [r3, #12]
 8002f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	ea40 0301 	orr.w	r3, r0, r1
 8002fa4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002faa:	689a      	ldr	r2, [r3, #8]
 8002fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	431a      	orrs	r2, r3
 8002fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002fd4:	f021 010c 	bic.w	r1, r1, #12
 8002fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002fe2:	430b      	orrs	r3, r1
 8002fe4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002ff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ff6:	6999      	ldr	r1, [r3, #24]
 8002ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	ea40 0301 	orr.w	r3, r0, r1
 8003002:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	4b8f      	ldr	r3, [pc, #572]	; (8003248 <UART_SetConfig+0x2cc>)
 800300c:	429a      	cmp	r2, r3
 800300e:	d005      	beq.n	800301c <UART_SetConfig+0xa0>
 8003010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	4b8d      	ldr	r3, [pc, #564]	; (800324c <UART_SetConfig+0x2d0>)
 8003018:	429a      	cmp	r2, r3
 800301a:	d104      	bne.n	8003026 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800301c:	f7fe ff54 	bl	8001ec8 <HAL_RCC_GetPCLK2Freq>
 8003020:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003024:	e003      	b.n	800302e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003026:	f7fe ff3b 	bl	8001ea0 <HAL_RCC_GetPCLK1Freq>
 800302a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800302e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003032:	69db      	ldr	r3, [r3, #28]
 8003034:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003038:	f040 810c 	bne.w	8003254 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800303c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003040:	2200      	movs	r2, #0
 8003042:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003046:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800304a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800304e:	4622      	mov	r2, r4
 8003050:	462b      	mov	r3, r5
 8003052:	1891      	adds	r1, r2, r2
 8003054:	65b9      	str	r1, [r7, #88]	; 0x58
 8003056:	415b      	adcs	r3, r3
 8003058:	65fb      	str	r3, [r7, #92]	; 0x5c
 800305a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800305e:	4621      	mov	r1, r4
 8003060:	eb12 0801 	adds.w	r8, r2, r1
 8003064:	4629      	mov	r1, r5
 8003066:	eb43 0901 	adc.w	r9, r3, r1
 800306a:	f04f 0200 	mov.w	r2, #0
 800306e:	f04f 0300 	mov.w	r3, #0
 8003072:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003076:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800307a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800307e:	4690      	mov	r8, r2
 8003080:	4699      	mov	r9, r3
 8003082:	4623      	mov	r3, r4
 8003084:	eb18 0303 	adds.w	r3, r8, r3
 8003088:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800308c:	462b      	mov	r3, r5
 800308e:	eb49 0303 	adc.w	r3, r9, r3
 8003092:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80030a2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80030a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80030aa:	460b      	mov	r3, r1
 80030ac:	18db      	adds	r3, r3, r3
 80030ae:	653b      	str	r3, [r7, #80]	; 0x50
 80030b0:	4613      	mov	r3, r2
 80030b2:	eb42 0303 	adc.w	r3, r2, r3
 80030b6:	657b      	str	r3, [r7, #84]	; 0x54
 80030b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80030bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80030c0:	f7fd fc58 	bl	8000974 <__aeabi_uldivmod>
 80030c4:	4602      	mov	r2, r0
 80030c6:	460b      	mov	r3, r1
 80030c8:	4b61      	ldr	r3, [pc, #388]	; (8003250 <UART_SetConfig+0x2d4>)
 80030ca:	fba3 2302 	umull	r2, r3, r3, r2
 80030ce:	095b      	lsrs	r3, r3, #5
 80030d0:	011c      	lsls	r4, r3, #4
 80030d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030d6:	2200      	movs	r2, #0
 80030d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80030dc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80030e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80030e4:	4642      	mov	r2, r8
 80030e6:	464b      	mov	r3, r9
 80030e8:	1891      	adds	r1, r2, r2
 80030ea:	64b9      	str	r1, [r7, #72]	; 0x48
 80030ec:	415b      	adcs	r3, r3
 80030ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80030f4:	4641      	mov	r1, r8
 80030f6:	eb12 0a01 	adds.w	sl, r2, r1
 80030fa:	4649      	mov	r1, r9
 80030fc:	eb43 0b01 	adc.w	fp, r3, r1
 8003100:	f04f 0200 	mov.w	r2, #0
 8003104:	f04f 0300 	mov.w	r3, #0
 8003108:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800310c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003110:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003114:	4692      	mov	sl, r2
 8003116:	469b      	mov	fp, r3
 8003118:	4643      	mov	r3, r8
 800311a:	eb1a 0303 	adds.w	r3, sl, r3
 800311e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003122:	464b      	mov	r3, r9
 8003124:	eb4b 0303 	adc.w	r3, fp, r3
 8003128:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800312c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003138:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800313c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003140:	460b      	mov	r3, r1
 8003142:	18db      	adds	r3, r3, r3
 8003144:	643b      	str	r3, [r7, #64]	; 0x40
 8003146:	4613      	mov	r3, r2
 8003148:	eb42 0303 	adc.w	r3, r2, r3
 800314c:	647b      	str	r3, [r7, #68]	; 0x44
 800314e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003152:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003156:	f7fd fc0d 	bl	8000974 <__aeabi_uldivmod>
 800315a:	4602      	mov	r2, r0
 800315c:	460b      	mov	r3, r1
 800315e:	4611      	mov	r1, r2
 8003160:	4b3b      	ldr	r3, [pc, #236]	; (8003250 <UART_SetConfig+0x2d4>)
 8003162:	fba3 2301 	umull	r2, r3, r3, r1
 8003166:	095b      	lsrs	r3, r3, #5
 8003168:	2264      	movs	r2, #100	; 0x64
 800316a:	fb02 f303 	mul.w	r3, r2, r3
 800316e:	1acb      	subs	r3, r1, r3
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003176:	4b36      	ldr	r3, [pc, #216]	; (8003250 <UART_SetConfig+0x2d4>)
 8003178:	fba3 2302 	umull	r2, r3, r3, r2
 800317c:	095b      	lsrs	r3, r3, #5
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003184:	441c      	add	r4, r3
 8003186:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800318a:	2200      	movs	r2, #0
 800318c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003190:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003194:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003198:	4642      	mov	r2, r8
 800319a:	464b      	mov	r3, r9
 800319c:	1891      	adds	r1, r2, r2
 800319e:	63b9      	str	r1, [r7, #56]	; 0x38
 80031a0:	415b      	adcs	r3, r3
 80031a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80031a8:	4641      	mov	r1, r8
 80031aa:	1851      	adds	r1, r2, r1
 80031ac:	6339      	str	r1, [r7, #48]	; 0x30
 80031ae:	4649      	mov	r1, r9
 80031b0:	414b      	adcs	r3, r1
 80031b2:	637b      	str	r3, [r7, #52]	; 0x34
 80031b4:	f04f 0200 	mov.w	r2, #0
 80031b8:	f04f 0300 	mov.w	r3, #0
 80031bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80031c0:	4659      	mov	r1, fp
 80031c2:	00cb      	lsls	r3, r1, #3
 80031c4:	4651      	mov	r1, sl
 80031c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031ca:	4651      	mov	r1, sl
 80031cc:	00ca      	lsls	r2, r1, #3
 80031ce:	4610      	mov	r0, r2
 80031d0:	4619      	mov	r1, r3
 80031d2:	4603      	mov	r3, r0
 80031d4:	4642      	mov	r2, r8
 80031d6:	189b      	adds	r3, r3, r2
 80031d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80031dc:	464b      	mov	r3, r9
 80031de:	460a      	mov	r2, r1
 80031e0:	eb42 0303 	adc.w	r3, r2, r3
 80031e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80031e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80031f4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80031f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80031fc:	460b      	mov	r3, r1
 80031fe:	18db      	adds	r3, r3, r3
 8003200:	62bb      	str	r3, [r7, #40]	; 0x28
 8003202:	4613      	mov	r3, r2
 8003204:	eb42 0303 	adc.w	r3, r2, r3
 8003208:	62fb      	str	r3, [r7, #44]	; 0x2c
 800320a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800320e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003212:	f7fd fbaf 	bl	8000974 <__aeabi_uldivmod>
 8003216:	4602      	mov	r2, r0
 8003218:	460b      	mov	r3, r1
 800321a:	4b0d      	ldr	r3, [pc, #52]	; (8003250 <UART_SetConfig+0x2d4>)
 800321c:	fba3 1302 	umull	r1, r3, r3, r2
 8003220:	095b      	lsrs	r3, r3, #5
 8003222:	2164      	movs	r1, #100	; 0x64
 8003224:	fb01 f303 	mul.w	r3, r1, r3
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	3332      	adds	r3, #50	; 0x32
 800322e:	4a08      	ldr	r2, [pc, #32]	; (8003250 <UART_SetConfig+0x2d4>)
 8003230:	fba2 2303 	umull	r2, r3, r2, r3
 8003234:	095b      	lsrs	r3, r3, #5
 8003236:	f003 0207 	and.w	r2, r3, #7
 800323a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4422      	add	r2, r4
 8003242:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003244:	e106      	b.n	8003454 <UART_SetConfig+0x4d8>
 8003246:	bf00      	nop
 8003248:	40011000 	.word	0x40011000
 800324c:	40011400 	.word	0x40011400
 8003250:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003254:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003258:	2200      	movs	r2, #0
 800325a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800325e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003262:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003266:	4642      	mov	r2, r8
 8003268:	464b      	mov	r3, r9
 800326a:	1891      	adds	r1, r2, r2
 800326c:	6239      	str	r1, [r7, #32]
 800326e:	415b      	adcs	r3, r3
 8003270:	627b      	str	r3, [r7, #36]	; 0x24
 8003272:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003276:	4641      	mov	r1, r8
 8003278:	1854      	adds	r4, r2, r1
 800327a:	4649      	mov	r1, r9
 800327c:	eb43 0501 	adc.w	r5, r3, r1
 8003280:	f04f 0200 	mov.w	r2, #0
 8003284:	f04f 0300 	mov.w	r3, #0
 8003288:	00eb      	lsls	r3, r5, #3
 800328a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800328e:	00e2      	lsls	r2, r4, #3
 8003290:	4614      	mov	r4, r2
 8003292:	461d      	mov	r5, r3
 8003294:	4643      	mov	r3, r8
 8003296:	18e3      	adds	r3, r4, r3
 8003298:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800329c:	464b      	mov	r3, r9
 800329e:	eb45 0303 	adc.w	r3, r5, r3
 80032a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80032a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80032b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80032b6:	f04f 0200 	mov.w	r2, #0
 80032ba:	f04f 0300 	mov.w	r3, #0
 80032be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80032c2:	4629      	mov	r1, r5
 80032c4:	008b      	lsls	r3, r1, #2
 80032c6:	4621      	mov	r1, r4
 80032c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032cc:	4621      	mov	r1, r4
 80032ce:	008a      	lsls	r2, r1, #2
 80032d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80032d4:	f7fd fb4e 	bl	8000974 <__aeabi_uldivmod>
 80032d8:	4602      	mov	r2, r0
 80032da:	460b      	mov	r3, r1
 80032dc:	4b60      	ldr	r3, [pc, #384]	; (8003460 <UART_SetConfig+0x4e4>)
 80032de:	fba3 2302 	umull	r2, r3, r3, r2
 80032e2:	095b      	lsrs	r3, r3, #5
 80032e4:	011c      	lsls	r4, r3, #4
 80032e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032ea:	2200      	movs	r2, #0
 80032ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80032f0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80032f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80032f8:	4642      	mov	r2, r8
 80032fa:	464b      	mov	r3, r9
 80032fc:	1891      	adds	r1, r2, r2
 80032fe:	61b9      	str	r1, [r7, #24]
 8003300:	415b      	adcs	r3, r3
 8003302:	61fb      	str	r3, [r7, #28]
 8003304:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003308:	4641      	mov	r1, r8
 800330a:	1851      	adds	r1, r2, r1
 800330c:	6139      	str	r1, [r7, #16]
 800330e:	4649      	mov	r1, r9
 8003310:	414b      	adcs	r3, r1
 8003312:	617b      	str	r3, [r7, #20]
 8003314:	f04f 0200 	mov.w	r2, #0
 8003318:	f04f 0300 	mov.w	r3, #0
 800331c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003320:	4659      	mov	r1, fp
 8003322:	00cb      	lsls	r3, r1, #3
 8003324:	4651      	mov	r1, sl
 8003326:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800332a:	4651      	mov	r1, sl
 800332c:	00ca      	lsls	r2, r1, #3
 800332e:	4610      	mov	r0, r2
 8003330:	4619      	mov	r1, r3
 8003332:	4603      	mov	r3, r0
 8003334:	4642      	mov	r2, r8
 8003336:	189b      	adds	r3, r3, r2
 8003338:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800333c:	464b      	mov	r3, r9
 800333e:	460a      	mov	r2, r1
 8003340:	eb42 0303 	adc.w	r3, r2, r3
 8003344:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	67bb      	str	r3, [r7, #120]	; 0x78
 8003352:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003354:	f04f 0200 	mov.w	r2, #0
 8003358:	f04f 0300 	mov.w	r3, #0
 800335c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003360:	4649      	mov	r1, r9
 8003362:	008b      	lsls	r3, r1, #2
 8003364:	4641      	mov	r1, r8
 8003366:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800336a:	4641      	mov	r1, r8
 800336c:	008a      	lsls	r2, r1, #2
 800336e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003372:	f7fd faff 	bl	8000974 <__aeabi_uldivmod>
 8003376:	4602      	mov	r2, r0
 8003378:	460b      	mov	r3, r1
 800337a:	4611      	mov	r1, r2
 800337c:	4b38      	ldr	r3, [pc, #224]	; (8003460 <UART_SetConfig+0x4e4>)
 800337e:	fba3 2301 	umull	r2, r3, r3, r1
 8003382:	095b      	lsrs	r3, r3, #5
 8003384:	2264      	movs	r2, #100	; 0x64
 8003386:	fb02 f303 	mul.w	r3, r2, r3
 800338a:	1acb      	subs	r3, r1, r3
 800338c:	011b      	lsls	r3, r3, #4
 800338e:	3332      	adds	r3, #50	; 0x32
 8003390:	4a33      	ldr	r2, [pc, #204]	; (8003460 <UART_SetConfig+0x4e4>)
 8003392:	fba2 2303 	umull	r2, r3, r2, r3
 8003396:	095b      	lsrs	r3, r3, #5
 8003398:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800339c:	441c      	add	r4, r3
 800339e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033a2:	2200      	movs	r2, #0
 80033a4:	673b      	str	r3, [r7, #112]	; 0x70
 80033a6:	677a      	str	r2, [r7, #116]	; 0x74
 80033a8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80033ac:	4642      	mov	r2, r8
 80033ae:	464b      	mov	r3, r9
 80033b0:	1891      	adds	r1, r2, r2
 80033b2:	60b9      	str	r1, [r7, #8]
 80033b4:	415b      	adcs	r3, r3
 80033b6:	60fb      	str	r3, [r7, #12]
 80033b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033bc:	4641      	mov	r1, r8
 80033be:	1851      	adds	r1, r2, r1
 80033c0:	6039      	str	r1, [r7, #0]
 80033c2:	4649      	mov	r1, r9
 80033c4:	414b      	adcs	r3, r1
 80033c6:	607b      	str	r3, [r7, #4]
 80033c8:	f04f 0200 	mov.w	r2, #0
 80033cc:	f04f 0300 	mov.w	r3, #0
 80033d0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80033d4:	4659      	mov	r1, fp
 80033d6:	00cb      	lsls	r3, r1, #3
 80033d8:	4651      	mov	r1, sl
 80033da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033de:	4651      	mov	r1, sl
 80033e0:	00ca      	lsls	r2, r1, #3
 80033e2:	4610      	mov	r0, r2
 80033e4:	4619      	mov	r1, r3
 80033e6:	4603      	mov	r3, r0
 80033e8:	4642      	mov	r2, r8
 80033ea:	189b      	adds	r3, r3, r2
 80033ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80033ee:	464b      	mov	r3, r9
 80033f0:	460a      	mov	r2, r1
 80033f2:	eb42 0303 	adc.w	r3, r2, r3
 80033f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80033f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	663b      	str	r3, [r7, #96]	; 0x60
 8003402:	667a      	str	r2, [r7, #100]	; 0x64
 8003404:	f04f 0200 	mov.w	r2, #0
 8003408:	f04f 0300 	mov.w	r3, #0
 800340c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003410:	4649      	mov	r1, r9
 8003412:	008b      	lsls	r3, r1, #2
 8003414:	4641      	mov	r1, r8
 8003416:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800341a:	4641      	mov	r1, r8
 800341c:	008a      	lsls	r2, r1, #2
 800341e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003422:	f7fd faa7 	bl	8000974 <__aeabi_uldivmod>
 8003426:	4602      	mov	r2, r0
 8003428:	460b      	mov	r3, r1
 800342a:	4b0d      	ldr	r3, [pc, #52]	; (8003460 <UART_SetConfig+0x4e4>)
 800342c:	fba3 1302 	umull	r1, r3, r3, r2
 8003430:	095b      	lsrs	r3, r3, #5
 8003432:	2164      	movs	r1, #100	; 0x64
 8003434:	fb01 f303 	mul.w	r3, r1, r3
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	011b      	lsls	r3, r3, #4
 800343c:	3332      	adds	r3, #50	; 0x32
 800343e:	4a08      	ldr	r2, [pc, #32]	; (8003460 <UART_SetConfig+0x4e4>)
 8003440:	fba2 2303 	umull	r2, r3, r2, r3
 8003444:	095b      	lsrs	r3, r3, #5
 8003446:	f003 020f 	and.w	r2, r3, #15
 800344a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4422      	add	r2, r4
 8003452:	609a      	str	r2, [r3, #8]
}
 8003454:	bf00      	nop
 8003456:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800345a:	46bd      	mov	sp, r7
 800345c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003460:	51eb851f 	.word	0x51eb851f

08003464 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003464:	b084      	sub	sp, #16
 8003466:	b580      	push	{r7, lr}
 8003468:	b084      	sub	sp, #16
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
 800346e:	f107 001c 	add.w	r0, r7, #28
 8003472:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003478:	2b01      	cmp	r3, #1
 800347a:	d122      	bne.n	80034c2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003480:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003490:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80034a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d105      	bne.n	80034b6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 fa9c 	bl	80039f4 <USB_CoreReset>
 80034bc:	4603      	mov	r3, r0
 80034be:	73fb      	strb	r3, [r7, #15]
 80034c0:	e01a      	b.n	80034f8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 fa90 	bl	80039f4 <USB_CoreReset>
 80034d4:	4603      	mov	r3, r0
 80034d6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80034d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d106      	bne.n	80034ec <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	639a      	str	r2, [r3, #56]	; 0x38
 80034ea:	e005      	b.n	80034f8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80034f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d10b      	bne.n	8003516 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f043 0206 	orr.w	r2, r3, #6
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f043 0220 	orr.w	r2, r3, #32
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003516:	7bfb      	ldrb	r3, [r7, #15]
}
 8003518:	4618      	mov	r0, r3
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003522:	b004      	add	sp, #16
 8003524:	4770      	bx	lr

08003526 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003526:	b480      	push	{r7}
 8003528:	b083      	sub	sp, #12
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f023 0201 	bic.w	r2, r3, #1
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	460b      	mov	r3, r1
 8003552:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003554:	2300      	movs	r3, #0
 8003556:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003564:	78fb      	ldrb	r3, [r7, #3]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d115      	bne.n	8003596 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003576:	2001      	movs	r0, #1
 8003578:	f7fd ff86 	bl	8001488 <HAL_Delay>
      ms++;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	3301      	adds	r3, #1
 8003580:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 fa28 	bl	80039d8 <USB_GetMode>
 8003588:	4603      	mov	r3, r0
 800358a:	2b01      	cmp	r3, #1
 800358c:	d01e      	beq.n	80035cc <USB_SetCurrentMode+0x84>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2b31      	cmp	r3, #49	; 0x31
 8003592:	d9f0      	bls.n	8003576 <USB_SetCurrentMode+0x2e>
 8003594:	e01a      	b.n	80035cc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003596:	78fb      	ldrb	r3, [r7, #3]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d115      	bne.n	80035c8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80035a8:	2001      	movs	r0, #1
 80035aa:	f7fd ff6d 	bl	8001488 <HAL_Delay>
      ms++;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	3301      	adds	r3, #1
 80035b2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 fa0f 	bl	80039d8 <USB_GetMode>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d005      	beq.n	80035cc <USB_SetCurrentMode+0x84>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2b31      	cmp	r3, #49	; 0x31
 80035c4:	d9f0      	bls.n	80035a8 <USB_SetCurrentMode+0x60>
 80035c6:	e001      	b.n	80035cc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e005      	b.n	80035d8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2b32      	cmp	r3, #50	; 0x32
 80035d0:	d101      	bne.n	80035d6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e000      	b.n	80035d8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3710      	adds	r7, #16
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80035e0:	b084      	sub	sp, #16
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b086      	sub	sp, #24
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
 80035ea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80035ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80035f2:	2300      	movs	r3, #0
 80035f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80035fa:	2300      	movs	r3, #0
 80035fc:	613b      	str	r3, [r7, #16]
 80035fe:	e009      	b.n	8003614 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	3340      	adds	r3, #64	; 0x40
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	4413      	add	r3, r2
 800360a:	2200      	movs	r2, #0
 800360c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	3301      	adds	r3, #1
 8003612:	613b      	str	r3, [r7, #16]
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	2b0e      	cmp	r3, #14
 8003618:	d9f2      	bls.n	8003600 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800361a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800361c:	2b00      	cmp	r3, #0
 800361e:	d11c      	bne.n	800365a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800362e:	f043 0302 	orr.w	r3, r3, #2
 8003632:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003638:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	601a      	str	r2, [r3, #0]
 8003658:	e005      	b.n	8003666 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800366c:	461a      	mov	r2, r3
 800366e:	2300      	movs	r3, #0
 8003670:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003678:	4619      	mov	r1, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003680:	461a      	mov	r2, r3
 8003682:	680b      	ldr	r3, [r1, #0]
 8003684:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003688:	2b01      	cmp	r3, #1
 800368a:	d10c      	bne.n	80036a6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800368c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800368e:	2b00      	cmp	r3, #0
 8003690:	d104      	bne.n	800369c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003692:	2100      	movs	r1, #0
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 f965 	bl	8003964 <USB_SetDevSpeed>
 800369a:	e008      	b.n	80036ae <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800369c:	2101      	movs	r1, #1
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 f960 	bl	8003964 <USB_SetDevSpeed>
 80036a4:	e003      	b.n	80036ae <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80036a6:	2103      	movs	r1, #3
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 f95b 	bl	8003964 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80036ae:	2110      	movs	r1, #16
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f000 f8f3 	bl	800389c <USB_FlushTxFifo>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d001      	beq.n	80036c0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f000 f91f 	bl	8003904 <USB_FlushRxFifo>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036d6:	461a      	mov	r2, r3
 80036d8:	2300      	movs	r3, #0
 80036da:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036e2:	461a      	mov	r2, r3
 80036e4:	2300      	movs	r3, #0
 80036e6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ee:	461a      	mov	r2, r3
 80036f0:	2300      	movs	r3, #0
 80036f2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80036f4:	2300      	movs	r3, #0
 80036f6:	613b      	str	r3, [r7, #16]
 80036f8:	e043      	b.n	8003782 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	015a      	lsls	r2, r3, #5
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	4413      	add	r3, r2
 8003702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800370c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003710:	d118      	bne.n	8003744 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d10a      	bne.n	800372e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	015a      	lsls	r2, r3, #5
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	4413      	add	r3, r2
 8003720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003724:	461a      	mov	r2, r3
 8003726:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800372a:	6013      	str	r3, [r2, #0]
 800372c:	e013      	b.n	8003756 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	015a      	lsls	r2, r3, #5
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	4413      	add	r3, r2
 8003736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800373a:	461a      	mov	r2, r3
 800373c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003740:	6013      	str	r3, [r2, #0]
 8003742:	e008      	b.n	8003756 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	015a      	lsls	r2, r3, #5
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	4413      	add	r3, r2
 800374c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003750:	461a      	mov	r2, r3
 8003752:	2300      	movs	r3, #0
 8003754:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	015a      	lsls	r2, r3, #5
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	4413      	add	r3, r2
 800375e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003762:	461a      	mov	r2, r3
 8003764:	2300      	movs	r3, #0
 8003766:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	015a      	lsls	r2, r3, #5
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	4413      	add	r3, r2
 8003770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003774:	461a      	mov	r2, r3
 8003776:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800377a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	3301      	adds	r3, #1
 8003780:	613b      	str	r3, [r7, #16]
 8003782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	429a      	cmp	r2, r3
 8003788:	d3b7      	bcc.n	80036fa <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800378a:	2300      	movs	r3, #0
 800378c:	613b      	str	r3, [r7, #16]
 800378e:	e043      	b.n	8003818 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	015a      	lsls	r2, r3, #5
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	4413      	add	r3, r2
 8003798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037a6:	d118      	bne.n	80037da <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d10a      	bne.n	80037c4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	015a      	lsls	r2, r3, #5
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	4413      	add	r3, r2
 80037b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ba:	461a      	mov	r2, r3
 80037bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80037c0:	6013      	str	r3, [r2, #0]
 80037c2:	e013      	b.n	80037ec <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	015a      	lsls	r2, r3, #5
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	4413      	add	r3, r2
 80037cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037d0:	461a      	mov	r2, r3
 80037d2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80037d6:	6013      	str	r3, [r2, #0]
 80037d8:	e008      	b.n	80037ec <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	015a      	lsls	r2, r3, #5
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	4413      	add	r3, r2
 80037e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037e6:	461a      	mov	r2, r3
 80037e8:	2300      	movs	r3, #0
 80037ea:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	015a      	lsls	r2, r3, #5
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4413      	add	r3, r2
 80037f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037f8:	461a      	mov	r2, r3
 80037fa:	2300      	movs	r3, #0
 80037fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	015a      	lsls	r2, r3, #5
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	4413      	add	r3, r2
 8003806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800380a:	461a      	mov	r2, r3
 800380c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003810:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	3301      	adds	r3, #1
 8003816:	613b      	str	r3, [r7, #16]
 8003818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	429a      	cmp	r2, r3
 800381e:	d3b7      	bcc.n	8003790 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003826:	691b      	ldr	r3, [r3, #16]
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800382e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003832:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003840:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003844:	2b00      	cmp	r3, #0
 8003846:	d105      	bne.n	8003854 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	f043 0210 	orr.w	r2, r3, #16
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	699a      	ldr	r2, [r3, #24]
 8003858:	4b0f      	ldr	r3, [pc, #60]	; (8003898 <USB_DevInit+0x2b8>)
 800385a:	4313      	orrs	r3, r2
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003862:	2b00      	cmp	r3, #0
 8003864:	d005      	beq.n	8003872 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	f043 0208 	orr.w	r2, r3, #8
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003872:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003874:	2b01      	cmp	r3, #1
 8003876:	d107      	bne.n	8003888 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003880:	f043 0304 	orr.w	r3, r3, #4
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003888:	7dfb      	ldrb	r3, [r7, #23]
}
 800388a:	4618      	mov	r0, r3
 800388c:	3718      	adds	r7, #24
 800388e:	46bd      	mov	sp, r7
 8003890:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003894:	b004      	add	sp, #16
 8003896:	4770      	bx	lr
 8003898:	803c3800 	.word	0x803c3800

0800389c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800389c:	b480      	push	{r7}
 800389e:	b085      	sub	sp, #20
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80038a6:	2300      	movs	r3, #0
 80038a8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	3301      	adds	r3, #1
 80038ae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	4a13      	ldr	r2, [pc, #76]	; (8003900 <USB_FlushTxFifo+0x64>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d901      	bls.n	80038bc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e01b      	b.n	80038f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	daf2      	bge.n	80038aa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80038c4:	2300      	movs	r3, #0
 80038c6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	019b      	lsls	r3, r3, #6
 80038cc:	f043 0220 	orr.w	r2, r3, #32
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	3301      	adds	r3, #1
 80038d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	4a08      	ldr	r2, [pc, #32]	; (8003900 <USB_FlushTxFifo+0x64>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d901      	bls.n	80038e6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e006      	b.n	80038f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	f003 0320 	and.w	r3, r3, #32
 80038ee:	2b20      	cmp	r3, #32
 80038f0:	d0f0      	beq.n	80038d4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3714      	adds	r7, #20
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr
 8003900:	00030d40 	.word	0x00030d40

08003904 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800390c:	2300      	movs	r3, #0
 800390e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	3301      	adds	r3, #1
 8003914:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	4a11      	ldr	r2, [pc, #68]	; (8003960 <USB_FlushRxFifo+0x5c>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d901      	bls.n	8003922 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e018      	b.n	8003954 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	2b00      	cmp	r3, #0
 8003928:	daf2      	bge.n	8003910 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800392a:	2300      	movs	r3, #0
 800392c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2210      	movs	r2, #16
 8003932:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	3301      	adds	r3, #1
 8003938:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	4a08      	ldr	r2, [pc, #32]	; (8003960 <USB_FlushRxFifo+0x5c>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d901      	bls.n	8003946 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e006      	b.n	8003954 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	f003 0310 	and.w	r3, r3, #16
 800394e:	2b10      	cmp	r3, #16
 8003950:	d0f0      	beq.n	8003934 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	3714      	adds	r7, #20
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr
 8003960:	00030d40 	.word	0x00030d40

08003964 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003964:	b480      	push	{r7}
 8003966:	b085      	sub	sp, #20
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	460b      	mov	r3, r1
 800396e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	78fb      	ldrb	r3, [r7, #3]
 800397e:	68f9      	ldr	r1, [r7, #12]
 8003980:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003984:	4313      	orrs	r3, r2
 8003986:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3714      	adds	r7, #20
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr

08003996 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003996:	b480      	push	{r7}
 8003998:	b085      	sub	sp, #20
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80039b0:	f023 0303 	bic.w	r3, r3, #3
 80039b4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	68fa      	ldr	r2, [r7, #12]
 80039c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039c4:	f043 0302 	orr.w	r3, r3, #2
 80039c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3714      	adds	r7, #20
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	695b      	ldr	r3, [r3, #20]
 80039e4:	f003 0301 	and.w	r3, r3, #1
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80039fc:	2300      	movs	r3, #0
 80039fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	3301      	adds	r3, #1
 8003a04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	4a13      	ldr	r2, [pc, #76]	; (8003a58 <USB_CoreReset+0x64>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d901      	bls.n	8003a12 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e01b      	b.n	8003a4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	daf2      	bge.n	8003a00 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	f043 0201 	orr.w	r2, r3, #1
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	4a09      	ldr	r2, [pc, #36]	; (8003a58 <USB_CoreReset+0x64>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d901      	bls.n	8003a3c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e006      	b.n	8003a4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	f003 0301 	and.w	r3, r3, #1
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d0f0      	beq.n	8003a2a <USB_CoreReset+0x36>

  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3714      	adds	r7, #20
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	00030d40 	.word	0x00030d40

08003a5c <memset>:
 8003a5c:	4402      	add	r2, r0
 8003a5e:	4603      	mov	r3, r0
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d100      	bne.n	8003a66 <memset+0xa>
 8003a64:	4770      	bx	lr
 8003a66:	f803 1b01 	strb.w	r1, [r3], #1
 8003a6a:	e7f9      	b.n	8003a60 <memset+0x4>

08003a6c <__libc_init_array>:
 8003a6c:	b570      	push	{r4, r5, r6, lr}
 8003a6e:	4d0d      	ldr	r5, [pc, #52]	; (8003aa4 <__libc_init_array+0x38>)
 8003a70:	4c0d      	ldr	r4, [pc, #52]	; (8003aa8 <__libc_init_array+0x3c>)
 8003a72:	1b64      	subs	r4, r4, r5
 8003a74:	10a4      	asrs	r4, r4, #2
 8003a76:	2600      	movs	r6, #0
 8003a78:	42a6      	cmp	r6, r4
 8003a7a:	d109      	bne.n	8003a90 <__libc_init_array+0x24>
 8003a7c:	4d0b      	ldr	r5, [pc, #44]	; (8003aac <__libc_init_array+0x40>)
 8003a7e:	4c0c      	ldr	r4, [pc, #48]	; (8003ab0 <__libc_init_array+0x44>)
 8003a80:	f001 f85a 	bl	8004b38 <_init>
 8003a84:	1b64      	subs	r4, r4, r5
 8003a86:	10a4      	asrs	r4, r4, #2
 8003a88:	2600      	movs	r6, #0
 8003a8a:	42a6      	cmp	r6, r4
 8003a8c:	d105      	bne.n	8003a9a <__libc_init_array+0x2e>
 8003a8e:	bd70      	pop	{r4, r5, r6, pc}
 8003a90:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a94:	4798      	blx	r3
 8003a96:	3601      	adds	r6, #1
 8003a98:	e7ee      	b.n	8003a78 <__libc_init_array+0xc>
 8003a9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a9e:	4798      	blx	r3
 8003aa0:	3601      	adds	r6, #1
 8003aa2:	e7f2      	b.n	8003a8a <__libc_init_array+0x1e>
 8003aa4:	08004d60 	.word	0x08004d60
 8003aa8:	08004d60 	.word	0x08004d60
 8003aac:	08004d60 	.word	0x08004d60
 8003ab0:	08004d64 	.word	0x08004d64
 8003ab4:	00000000 	.word	0x00000000

08003ab8 <sin>:
 8003ab8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003aba:	ec53 2b10 	vmov	r2, r3, d0
 8003abe:	4828      	ldr	r0, [pc, #160]	; (8003b60 <sin+0xa8>)
 8003ac0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003ac4:	4281      	cmp	r1, r0
 8003ac6:	dc07      	bgt.n	8003ad8 <sin+0x20>
 8003ac8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8003b58 <sin+0xa0>
 8003acc:	2000      	movs	r0, #0
 8003ace:	b005      	add	sp, #20
 8003ad0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ad4:	f000 b910 	b.w	8003cf8 <__kernel_sin>
 8003ad8:	4822      	ldr	r0, [pc, #136]	; (8003b64 <sin+0xac>)
 8003ada:	4281      	cmp	r1, r0
 8003adc:	dd09      	ble.n	8003af2 <sin+0x3a>
 8003ade:	ee10 0a10 	vmov	r0, s0
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	f7fc fcbe 	bl	8000464 <__aeabi_dsub>
 8003ae8:	ec41 0b10 	vmov	d0, r0, r1
 8003aec:	b005      	add	sp, #20
 8003aee:	f85d fb04 	ldr.w	pc, [sp], #4
 8003af2:	4668      	mov	r0, sp
 8003af4:	f000 f9c0 	bl	8003e78 <__ieee754_rem_pio2>
 8003af8:	f000 0003 	and.w	r0, r0, #3
 8003afc:	2801      	cmp	r0, #1
 8003afe:	d00c      	beq.n	8003b1a <sin+0x62>
 8003b00:	2802      	cmp	r0, #2
 8003b02:	d011      	beq.n	8003b28 <sin+0x70>
 8003b04:	b9f0      	cbnz	r0, 8003b44 <sin+0x8c>
 8003b06:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003b0a:	ed9d 0b00 	vldr	d0, [sp]
 8003b0e:	2001      	movs	r0, #1
 8003b10:	f000 f8f2 	bl	8003cf8 <__kernel_sin>
 8003b14:	ec51 0b10 	vmov	r0, r1, d0
 8003b18:	e7e6      	b.n	8003ae8 <sin+0x30>
 8003b1a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003b1e:	ed9d 0b00 	vldr	d0, [sp]
 8003b22:	f000 f821 	bl	8003b68 <__kernel_cos>
 8003b26:	e7f5      	b.n	8003b14 <sin+0x5c>
 8003b28:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003b2c:	ed9d 0b00 	vldr	d0, [sp]
 8003b30:	2001      	movs	r0, #1
 8003b32:	f000 f8e1 	bl	8003cf8 <__kernel_sin>
 8003b36:	ec53 2b10 	vmov	r2, r3, d0
 8003b3a:	ee10 0a10 	vmov	r0, s0
 8003b3e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003b42:	e7d1      	b.n	8003ae8 <sin+0x30>
 8003b44:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003b48:	ed9d 0b00 	vldr	d0, [sp]
 8003b4c:	f000 f80c 	bl	8003b68 <__kernel_cos>
 8003b50:	e7f1      	b.n	8003b36 <sin+0x7e>
 8003b52:	bf00      	nop
 8003b54:	f3af 8000 	nop.w
	...
 8003b60:	3fe921fb 	.word	0x3fe921fb
 8003b64:	7fefffff 	.word	0x7fefffff

08003b68 <__kernel_cos>:
 8003b68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b6c:	ec57 6b10 	vmov	r6, r7, d0
 8003b70:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8003b74:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8003b78:	ed8d 1b00 	vstr	d1, [sp]
 8003b7c:	da07      	bge.n	8003b8e <__kernel_cos+0x26>
 8003b7e:	ee10 0a10 	vmov	r0, s0
 8003b82:	4639      	mov	r1, r7
 8003b84:	f7fc feae 	bl	80008e4 <__aeabi_d2iz>
 8003b88:	2800      	cmp	r0, #0
 8003b8a:	f000 8088 	beq.w	8003c9e <__kernel_cos+0x136>
 8003b8e:	4632      	mov	r2, r6
 8003b90:	463b      	mov	r3, r7
 8003b92:	4630      	mov	r0, r6
 8003b94:	4639      	mov	r1, r7
 8003b96:	f7fc fb37 	bl	8000208 <__aeabi_dmul>
 8003b9a:	4b51      	ldr	r3, [pc, #324]	; (8003ce0 <__kernel_cos+0x178>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	4604      	mov	r4, r0
 8003ba0:	460d      	mov	r5, r1
 8003ba2:	f7fc fb31 	bl	8000208 <__aeabi_dmul>
 8003ba6:	a340      	add	r3, pc, #256	; (adr r3, 8003ca8 <__kernel_cos+0x140>)
 8003ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bac:	4682      	mov	sl, r0
 8003bae:	468b      	mov	fp, r1
 8003bb0:	4620      	mov	r0, r4
 8003bb2:	4629      	mov	r1, r5
 8003bb4:	f7fc fb28 	bl	8000208 <__aeabi_dmul>
 8003bb8:	a33d      	add	r3, pc, #244	; (adr r3, 8003cb0 <__kernel_cos+0x148>)
 8003bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bbe:	f7fc fc53 	bl	8000468 <__adddf3>
 8003bc2:	4622      	mov	r2, r4
 8003bc4:	462b      	mov	r3, r5
 8003bc6:	f7fc fb1f 	bl	8000208 <__aeabi_dmul>
 8003bca:	a33b      	add	r3, pc, #236	; (adr r3, 8003cb8 <__kernel_cos+0x150>)
 8003bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd0:	f7fc fc48 	bl	8000464 <__aeabi_dsub>
 8003bd4:	4622      	mov	r2, r4
 8003bd6:	462b      	mov	r3, r5
 8003bd8:	f7fc fb16 	bl	8000208 <__aeabi_dmul>
 8003bdc:	a338      	add	r3, pc, #224	; (adr r3, 8003cc0 <__kernel_cos+0x158>)
 8003bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be2:	f7fc fc41 	bl	8000468 <__adddf3>
 8003be6:	4622      	mov	r2, r4
 8003be8:	462b      	mov	r3, r5
 8003bea:	f7fc fb0d 	bl	8000208 <__aeabi_dmul>
 8003bee:	a336      	add	r3, pc, #216	; (adr r3, 8003cc8 <__kernel_cos+0x160>)
 8003bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf4:	f7fc fc36 	bl	8000464 <__aeabi_dsub>
 8003bf8:	4622      	mov	r2, r4
 8003bfa:	462b      	mov	r3, r5
 8003bfc:	f7fc fb04 	bl	8000208 <__aeabi_dmul>
 8003c00:	a333      	add	r3, pc, #204	; (adr r3, 8003cd0 <__kernel_cos+0x168>)
 8003c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c06:	f7fc fc2f 	bl	8000468 <__adddf3>
 8003c0a:	4622      	mov	r2, r4
 8003c0c:	462b      	mov	r3, r5
 8003c0e:	f7fc fafb 	bl	8000208 <__aeabi_dmul>
 8003c12:	4622      	mov	r2, r4
 8003c14:	462b      	mov	r3, r5
 8003c16:	f7fc faf7 	bl	8000208 <__aeabi_dmul>
 8003c1a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003c1e:	4604      	mov	r4, r0
 8003c20:	460d      	mov	r5, r1
 8003c22:	4630      	mov	r0, r6
 8003c24:	4639      	mov	r1, r7
 8003c26:	f7fc faef 	bl	8000208 <__aeabi_dmul>
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	4629      	mov	r1, r5
 8003c30:	4620      	mov	r0, r4
 8003c32:	f7fc fc17 	bl	8000464 <__aeabi_dsub>
 8003c36:	4b2b      	ldr	r3, [pc, #172]	; (8003ce4 <__kernel_cos+0x17c>)
 8003c38:	4598      	cmp	r8, r3
 8003c3a:	4606      	mov	r6, r0
 8003c3c:	460f      	mov	r7, r1
 8003c3e:	dc10      	bgt.n	8003c62 <__kernel_cos+0xfa>
 8003c40:	4602      	mov	r2, r0
 8003c42:	460b      	mov	r3, r1
 8003c44:	4650      	mov	r0, sl
 8003c46:	4659      	mov	r1, fp
 8003c48:	f7fc fc0c 	bl	8000464 <__aeabi_dsub>
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	4926      	ldr	r1, [pc, #152]	; (8003ce8 <__kernel_cos+0x180>)
 8003c50:	4602      	mov	r2, r0
 8003c52:	2000      	movs	r0, #0
 8003c54:	f7fc fc06 	bl	8000464 <__aeabi_dsub>
 8003c58:	ec41 0b10 	vmov	d0, r0, r1
 8003c5c:	b003      	add	sp, #12
 8003c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c62:	4b22      	ldr	r3, [pc, #136]	; (8003cec <__kernel_cos+0x184>)
 8003c64:	4920      	ldr	r1, [pc, #128]	; (8003ce8 <__kernel_cos+0x180>)
 8003c66:	4598      	cmp	r8, r3
 8003c68:	bfcc      	ite	gt
 8003c6a:	4d21      	ldrgt	r5, [pc, #132]	; (8003cf0 <__kernel_cos+0x188>)
 8003c6c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8003c70:	2400      	movs	r4, #0
 8003c72:	4622      	mov	r2, r4
 8003c74:	462b      	mov	r3, r5
 8003c76:	2000      	movs	r0, #0
 8003c78:	f7fc fbf4 	bl	8000464 <__aeabi_dsub>
 8003c7c:	4622      	mov	r2, r4
 8003c7e:	4680      	mov	r8, r0
 8003c80:	4689      	mov	r9, r1
 8003c82:	462b      	mov	r3, r5
 8003c84:	4650      	mov	r0, sl
 8003c86:	4659      	mov	r1, fp
 8003c88:	f7fc fbec 	bl	8000464 <__aeabi_dsub>
 8003c8c:	4632      	mov	r2, r6
 8003c8e:	463b      	mov	r3, r7
 8003c90:	f7fc fbe8 	bl	8000464 <__aeabi_dsub>
 8003c94:	4602      	mov	r2, r0
 8003c96:	460b      	mov	r3, r1
 8003c98:	4640      	mov	r0, r8
 8003c9a:	4649      	mov	r1, r9
 8003c9c:	e7da      	b.n	8003c54 <__kernel_cos+0xec>
 8003c9e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8003cd8 <__kernel_cos+0x170>
 8003ca2:	e7db      	b.n	8003c5c <__kernel_cos+0xf4>
 8003ca4:	f3af 8000 	nop.w
 8003ca8:	be8838d4 	.word	0xbe8838d4
 8003cac:	bda8fae9 	.word	0xbda8fae9
 8003cb0:	bdb4b1c4 	.word	0xbdb4b1c4
 8003cb4:	3e21ee9e 	.word	0x3e21ee9e
 8003cb8:	809c52ad 	.word	0x809c52ad
 8003cbc:	3e927e4f 	.word	0x3e927e4f
 8003cc0:	19cb1590 	.word	0x19cb1590
 8003cc4:	3efa01a0 	.word	0x3efa01a0
 8003cc8:	16c15177 	.word	0x16c15177
 8003ccc:	3f56c16c 	.word	0x3f56c16c
 8003cd0:	5555554c 	.word	0x5555554c
 8003cd4:	3fa55555 	.word	0x3fa55555
 8003cd8:	00000000 	.word	0x00000000
 8003cdc:	3ff00000 	.word	0x3ff00000
 8003ce0:	3fe00000 	.word	0x3fe00000
 8003ce4:	3fd33332 	.word	0x3fd33332
 8003ce8:	3ff00000 	.word	0x3ff00000
 8003cec:	3fe90000 	.word	0x3fe90000
 8003cf0:	3fd20000 	.word	0x3fd20000
 8003cf4:	00000000 	.word	0x00000000

08003cf8 <__kernel_sin>:
 8003cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cfc:	ed2d 8b04 	vpush	{d8-d9}
 8003d00:	eeb0 8a41 	vmov.f32	s16, s2
 8003d04:	eef0 8a61 	vmov.f32	s17, s3
 8003d08:	ec55 4b10 	vmov	r4, r5, d0
 8003d0c:	b083      	sub	sp, #12
 8003d0e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8003d12:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8003d16:	9001      	str	r0, [sp, #4]
 8003d18:	da06      	bge.n	8003d28 <__kernel_sin+0x30>
 8003d1a:	ee10 0a10 	vmov	r0, s0
 8003d1e:	4629      	mov	r1, r5
 8003d20:	f7fc fde0 	bl	80008e4 <__aeabi_d2iz>
 8003d24:	2800      	cmp	r0, #0
 8003d26:	d051      	beq.n	8003dcc <__kernel_sin+0xd4>
 8003d28:	4622      	mov	r2, r4
 8003d2a:	462b      	mov	r3, r5
 8003d2c:	4620      	mov	r0, r4
 8003d2e:	4629      	mov	r1, r5
 8003d30:	f7fc fa6a 	bl	8000208 <__aeabi_dmul>
 8003d34:	4682      	mov	sl, r0
 8003d36:	468b      	mov	fp, r1
 8003d38:	4602      	mov	r2, r0
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	4620      	mov	r0, r4
 8003d3e:	4629      	mov	r1, r5
 8003d40:	f7fc fa62 	bl	8000208 <__aeabi_dmul>
 8003d44:	a341      	add	r3, pc, #260	; (adr r3, 8003e4c <__kernel_sin+0x154>)
 8003d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d4a:	4680      	mov	r8, r0
 8003d4c:	4689      	mov	r9, r1
 8003d4e:	4650      	mov	r0, sl
 8003d50:	4659      	mov	r1, fp
 8003d52:	f7fc fa59 	bl	8000208 <__aeabi_dmul>
 8003d56:	a33f      	add	r3, pc, #252	; (adr r3, 8003e54 <__kernel_sin+0x15c>)
 8003d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d5c:	f7fc fb82 	bl	8000464 <__aeabi_dsub>
 8003d60:	4652      	mov	r2, sl
 8003d62:	465b      	mov	r3, fp
 8003d64:	f7fc fa50 	bl	8000208 <__aeabi_dmul>
 8003d68:	a33c      	add	r3, pc, #240	; (adr r3, 8003e5c <__kernel_sin+0x164>)
 8003d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d6e:	f7fc fb7b 	bl	8000468 <__adddf3>
 8003d72:	4652      	mov	r2, sl
 8003d74:	465b      	mov	r3, fp
 8003d76:	f7fc fa47 	bl	8000208 <__aeabi_dmul>
 8003d7a:	a33a      	add	r3, pc, #232	; (adr r3, 8003e64 <__kernel_sin+0x16c>)
 8003d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d80:	f7fc fb70 	bl	8000464 <__aeabi_dsub>
 8003d84:	4652      	mov	r2, sl
 8003d86:	465b      	mov	r3, fp
 8003d88:	f7fc fa3e 	bl	8000208 <__aeabi_dmul>
 8003d8c:	a337      	add	r3, pc, #220	; (adr r3, 8003e6c <__kernel_sin+0x174>)
 8003d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d92:	f7fc fb69 	bl	8000468 <__adddf3>
 8003d96:	9b01      	ldr	r3, [sp, #4]
 8003d98:	4606      	mov	r6, r0
 8003d9a:	460f      	mov	r7, r1
 8003d9c:	b9eb      	cbnz	r3, 8003dda <__kernel_sin+0xe2>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	460b      	mov	r3, r1
 8003da2:	4650      	mov	r0, sl
 8003da4:	4659      	mov	r1, fp
 8003da6:	f7fc fa2f 	bl	8000208 <__aeabi_dmul>
 8003daa:	a325      	add	r3, pc, #148	; (adr r3, 8003e40 <__kernel_sin+0x148>)
 8003dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003db0:	f7fc fb58 	bl	8000464 <__aeabi_dsub>
 8003db4:	4642      	mov	r2, r8
 8003db6:	464b      	mov	r3, r9
 8003db8:	f7fc fa26 	bl	8000208 <__aeabi_dmul>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	460b      	mov	r3, r1
 8003dc0:	4620      	mov	r0, r4
 8003dc2:	4629      	mov	r1, r5
 8003dc4:	f7fc fb50 	bl	8000468 <__adddf3>
 8003dc8:	4604      	mov	r4, r0
 8003dca:	460d      	mov	r5, r1
 8003dcc:	ec45 4b10 	vmov	d0, r4, r5
 8003dd0:	b003      	add	sp, #12
 8003dd2:	ecbd 8b04 	vpop	{d8-d9}
 8003dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dda:	4b1b      	ldr	r3, [pc, #108]	; (8003e48 <__kernel_sin+0x150>)
 8003ddc:	ec51 0b18 	vmov	r0, r1, d8
 8003de0:	2200      	movs	r2, #0
 8003de2:	f7fc fa11 	bl	8000208 <__aeabi_dmul>
 8003de6:	4632      	mov	r2, r6
 8003de8:	ec41 0b19 	vmov	d9, r0, r1
 8003dec:	463b      	mov	r3, r7
 8003dee:	4640      	mov	r0, r8
 8003df0:	4649      	mov	r1, r9
 8003df2:	f7fc fa09 	bl	8000208 <__aeabi_dmul>
 8003df6:	4602      	mov	r2, r0
 8003df8:	460b      	mov	r3, r1
 8003dfa:	ec51 0b19 	vmov	r0, r1, d9
 8003dfe:	f7fc fb31 	bl	8000464 <__aeabi_dsub>
 8003e02:	4652      	mov	r2, sl
 8003e04:	465b      	mov	r3, fp
 8003e06:	f7fc f9ff 	bl	8000208 <__aeabi_dmul>
 8003e0a:	ec53 2b18 	vmov	r2, r3, d8
 8003e0e:	f7fc fb29 	bl	8000464 <__aeabi_dsub>
 8003e12:	a30b      	add	r3, pc, #44	; (adr r3, 8003e40 <__kernel_sin+0x148>)
 8003e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e18:	4606      	mov	r6, r0
 8003e1a:	460f      	mov	r7, r1
 8003e1c:	4640      	mov	r0, r8
 8003e1e:	4649      	mov	r1, r9
 8003e20:	f7fc f9f2 	bl	8000208 <__aeabi_dmul>
 8003e24:	4602      	mov	r2, r0
 8003e26:	460b      	mov	r3, r1
 8003e28:	4630      	mov	r0, r6
 8003e2a:	4639      	mov	r1, r7
 8003e2c:	f7fc fb1c 	bl	8000468 <__adddf3>
 8003e30:	4602      	mov	r2, r0
 8003e32:	460b      	mov	r3, r1
 8003e34:	4620      	mov	r0, r4
 8003e36:	4629      	mov	r1, r5
 8003e38:	f7fc fb14 	bl	8000464 <__aeabi_dsub>
 8003e3c:	e7c4      	b.n	8003dc8 <__kernel_sin+0xd0>
 8003e3e:	bf00      	nop
 8003e40:	55555549 	.word	0x55555549
 8003e44:	3fc55555 	.word	0x3fc55555
 8003e48:	3fe00000 	.word	0x3fe00000
 8003e4c:	5acfd57c 	.word	0x5acfd57c
 8003e50:	3de5d93a 	.word	0x3de5d93a
 8003e54:	8a2b9ceb 	.word	0x8a2b9ceb
 8003e58:	3e5ae5e6 	.word	0x3e5ae5e6
 8003e5c:	57b1fe7d 	.word	0x57b1fe7d
 8003e60:	3ec71de3 	.word	0x3ec71de3
 8003e64:	19c161d5 	.word	0x19c161d5
 8003e68:	3f2a01a0 	.word	0x3f2a01a0
 8003e6c:	1110f8a6 	.word	0x1110f8a6
 8003e70:	3f811111 	.word	0x3f811111
 8003e74:	00000000 	.word	0x00000000

08003e78 <__ieee754_rem_pio2>:
 8003e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e7c:	ed2d 8b02 	vpush	{d8}
 8003e80:	ec55 4b10 	vmov	r4, r5, d0
 8003e84:	4bca      	ldr	r3, [pc, #808]	; (80041b0 <__ieee754_rem_pio2+0x338>)
 8003e86:	b08b      	sub	sp, #44	; 0x2c
 8003e88:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8003e8c:	4598      	cmp	r8, r3
 8003e8e:	4682      	mov	sl, r0
 8003e90:	9502      	str	r5, [sp, #8]
 8003e92:	dc08      	bgt.n	8003ea6 <__ieee754_rem_pio2+0x2e>
 8003e94:	2200      	movs	r2, #0
 8003e96:	2300      	movs	r3, #0
 8003e98:	ed80 0b00 	vstr	d0, [r0]
 8003e9c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8003ea0:	f04f 0b00 	mov.w	fp, #0
 8003ea4:	e028      	b.n	8003ef8 <__ieee754_rem_pio2+0x80>
 8003ea6:	4bc3      	ldr	r3, [pc, #780]	; (80041b4 <__ieee754_rem_pio2+0x33c>)
 8003ea8:	4598      	cmp	r8, r3
 8003eaa:	dc78      	bgt.n	8003f9e <__ieee754_rem_pio2+0x126>
 8003eac:	9b02      	ldr	r3, [sp, #8]
 8003eae:	4ec2      	ldr	r6, [pc, #776]	; (80041b8 <__ieee754_rem_pio2+0x340>)
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	ee10 0a10 	vmov	r0, s0
 8003eb6:	a3b0      	add	r3, pc, #704	; (adr r3, 8004178 <__ieee754_rem_pio2+0x300>)
 8003eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ebc:	4629      	mov	r1, r5
 8003ebe:	dd39      	ble.n	8003f34 <__ieee754_rem_pio2+0xbc>
 8003ec0:	f7fc fad0 	bl	8000464 <__aeabi_dsub>
 8003ec4:	45b0      	cmp	r8, r6
 8003ec6:	4604      	mov	r4, r0
 8003ec8:	460d      	mov	r5, r1
 8003eca:	d01b      	beq.n	8003f04 <__ieee754_rem_pio2+0x8c>
 8003ecc:	a3ac      	add	r3, pc, #688	; (adr r3, 8004180 <__ieee754_rem_pio2+0x308>)
 8003ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed2:	f7fc fac7 	bl	8000464 <__aeabi_dsub>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	460b      	mov	r3, r1
 8003eda:	e9ca 2300 	strd	r2, r3, [sl]
 8003ede:	4620      	mov	r0, r4
 8003ee0:	4629      	mov	r1, r5
 8003ee2:	f7fc fabf 	bl	8000464 <__aeabi_dsub>
 8003ee6:	a3a6      	add	r3, pc, #664	; (adr r3, 8004180 <__ieee754_rem_pio2+0x308>)
 8003ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eec:	f7fc faba 	bl	8000464 <__aeabi_dsub>
 8003ef0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003ef4:	f04f 0b01 	mov.w	fp, #1
 8003ef8:	4658      	mov	r0, fp
 8003efa:	b00b      	add	sp, #44	; 0x2c
 8003efc:	ecbd 8b02 	vpop	{d8}
 8003f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f04:	a3a0      	add	r3, pc, #640	; (adr r3, 8004188 <__ieee754_rem_pio2+0x310>)
 8003f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f0a:	f7fc faab 	bl	8000464 <__aeabi_dsub>
 8003f0e:	a3a0      	add	r3, pc, #640	; (adr r3, 8004190 <__ieee754_rem_pio2+0x318>)
 8003f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f14:	4604      	mov	r4, r0
 8003f16:	460d      	mov	r5, r1
 8003f18:	f7fc faa4 	bl	8000464 <__aeabi_dsub>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	460b      	mov	r3, r1
 8003f20:	e9ca 2300 	strd	r2, r3, [sl]
 8003f24:	4620      	mov	r0, r4
 8003f26:	4629      	mov	r1, r5
 8003f28:	f7fc fa9c 	bl	8000464 <__aeabi_dsub>
 8003f2c:	a398      	add	r3, pc, #608	; (adr r3, 8004190 <__ieee754_rem_pio2+0x318>)
 8003f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f32:	e7db      	b.n	8003eec <__ieee754_rem_pio2+0x74>
 8003f34:	f7fc fa98 	bl	8000468 <__adddf3>
 8003f38:	45b0      	cmp	r8, r6
 8003f3a:	4604      	mov	r4, r0
 8003f3c:	460d      	mov	r5, r1
 8003f3e:	d016      	beq.n	8003f6e <__ieee754_rem_pio2+0xf6>
 8003f40:	a38f      	add	r3, pc, #572	; (adr r3, 8004180 <__ieee754_rem_pio2+0x308>)
 8003f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f46:	f7fc fa8f 	bl	8000468 <__adddf3>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	e9ca 2300 	strd	r2, r3, [sl]
 8003f52:	4620      	mov	r0, r4
 8003f54:	4629      	mov	r1, r5
 8003f56:	f7fc fa85 	bl	8000464 <__aeabi_dsub>
 8003f5a:	a389      	add	r3, pc, #548	; (adr r3, 8004180 <__ieee754_rem_pio2+0x308>)
 8003f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f60:	f7fc fa82 	bl	8000468 <__adddf3>
 8003f64:	f04f 3bff 	mov.w	fp, #4294967295
 8003f68:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003f6c:	e7c4      	b.n	8003ef8 <__ieee754_rem_pio2+0x80>
 8003f6e:	a386      	add	r3, pc, #536	; (adr r3, 8004188 <__ieee754_rem_pio2+0x310>)
 8003f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f74:	f7fc fa78 	bl	8000468 <__adddf3>
 8003f78:	a385      	add	r3, pc, #532	; (adr r3, 8004190 <__ieee754_rem_pio2+0x318>)
 8003f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f7e:	4604      	mov	r4, r0
 8003f80:	460d      	mov	r5, r1
 8003f82:	f7fc fa71 	bl	8000468 <__adddf3>
 8003f86:	4602      	mov	r2, r0
 8003f88:	460b      	mov	r3, r1
 8003f8a:	e9ca 2300 	strd	r2, r3, [sl]
 8003f8e:	4620      	mov	r0, r4
 8003f90:	4629      	mov	r1, r5
 8003f92:	f7fc fa67 	bl	8000464 <__aeabi_dsub>
 8003f96:	a37e      	add	r3, pc, #504	; (adr r3, 8004190 <__ieee754_rem_pio2+0x318>)
 8003f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f9c:	e7e0      	b.n	8003f60 <__ieee754_rem_pio2+0xe8>
 8003f9e:	4b87      	ldr	r3, [pc, #540]	; (80041bc <__ieee754_rem_pio2+0x344>)
 8003fa0:	4598      	cmp	r8, r3
 8003fa2:	f300 80d8 	bgt.w	8004156 <__ieee754_rem_pio2+0x2de>
 8003fa6:	f000 f96d 	bl	8004284 <fabs>
 8003faa:	ec55 4b10 	vmov	r4, r5, d0
 8003fae:	ee10 0a10 	vmov	r0, s0
 8003fb2:	a379      	add	r3, pc, #484	; (adr r3, 8004198 <__ieee754_rem_pio2+0x320>)
 8003fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb8:	4629      	mov	r1, r5
 8003fba:	f7fc f925 	bl	8000208 <__aeabi_dmul>
 8003fbe:	4b80      	ldr	r3, [pc, #512]	; (80041c0 <__ieee754_rem_pio2+0x348>)
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f7fc fa51 	bl	8000468 <__adddf3>
 8003fc6:	f7fc fc8d 	bl	80008e4 <__aeabi_d2iz>
 8003fca:	4683      	mov	fp, r0
 8003fcc:	f7fc fb98 	bl	8000700 <__aeabi_i2d>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	ec43 2b18 	vmov	d8, r2, r3
 8003fd8:	a367      	add	r3, pc, #412	; (adr r3, 8004178 <__ieee754_rem_pio2+0x300>)
 8003fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fde:	f7fc f913 	bl	8000208 <__aeabi_dmul>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	4620      	mov	r0, r4
 8003fe8:	4629      	mov	r1, r5
 8003fea:	f7fc fa3b 	bl	8000464 <__aeabi_dsub>
 8003fee:	a364      	add	r3, pc, #400	; (adr r3, 8004180 <__ieee754_rem_pio2+0x308>)
 8003ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff4:	4606      	mov	r6, r0
 8003ff6:	460f      	mov	r7, r1
 8003ff8:	ec51 0b18 	vmov	r0, r1, d8
 8003ffc:	f7fc f904 	bl	8000208 <__aeabi_dmul>
 8004000:	f1bb 0f1f 	cmp.w	fp, #31
 8004004:	4604      	mov	r4, r0
 8004006:	460d      	mov	r5, r1
 8004008:	dc0d      	bgt.n	8004026 <__ieee754_rem_pio2+0x1ae>
 800400a:	4b6e      	ldr	r3, [pc, #440]	; (80041c4 <__ieee754_rem_pio2+0x34c>)
 800400c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8004010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004014:	4543      	cmp	r3, r8
 8004016:	d006      	beq.n	8004026 <__ieee754_rem_pio2+0x1ae>
 8004018:	4622      	mov	r2, r4
 800401a:	462b      	mov	r3, r5
 800401c:	4630      	mov	r0, r6
 800401e:	4639      	mov	r1, r7
 8004020:	f7fc fa20 	bl	8000464 <__aeabi_dsub>
 8004024:	e00e      	b.n	8004044 <__ieee754_rem_pio2+0x1cc>
 8004026:	462b      	mov	r3, r5
 8004028:	4622      	mov	r2, r4
 800402a:	4630      	mov	r0, r6
 800402c:	4639      	mov	r1, r7
 800402e:	f7fc fa19 	bl	8000464 <__aeabi_dsub>
 8004032:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004036:	9303      	str	r3, [sp, #12]
 8004038:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800403c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8004040:	2b10      	cmp	r3, #16
 8004042:	dc02      	bgt.n	800404a <__ieee754_rem_pio2+0x1d2>
 8004044:	e9ca 0100 	strd	r0, r1, [sl]
 8004048:	e039      	b.n	80040be <__ieee754_rem_pio2+0x246>
 800404a:	a34f      	add	r3, pc, #316	; (adr r3, 8004188 <__ieee754_rem_pio2+0x310>)
 800404c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004050:	ec51 0b18 	vmov	r0, r1, d8
 8004054:	f7fc f8d8 	bl	8000208 <__aeabi_dmul>
 8004058:	4604      	mov	r4, r0
 800405a:	460d      	mov	r5, r1
 800405c:	4602      	mov	r2, r0
 800405e:	460b      	mov	r3, r1
 8004060:	4630      	mov	r0, r6
 8004062:	4639      	mov	r1, r7
 8004064:	f7fc f9fe 	bl	8000464 <__aeabi_dsub>
 8004068:	4602      	mov	r2, r0
 800406a:	460b      	mov	r3, r1
 800406c:	4680      	mov	r8, r0
 800406e:	4689      	mov	r9, r1
 8004070:	4630      	mov	r0, r6
 8004072:	4639      	mov	r1, r7
 8004074:	f7fc f9f6 	bl	8000464 <__aeabi_dsub>
 8004078:	4622      	mov	r2, r4
 800407a:	462b      	mov	r3, r5
 800407c:	f7fc f9f2 	bl	8000464 <__aeabi_dsub>
 8004080:	a343      	add	r3, pc, #268	; (adr r3, 8004190 <__ieee754_rem_pio2+0x318>)
 8004082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004086:	4604      	mov	r4, r0
 8004088:	460d      	mov	r5, r1
 800408a:	ec51 0b18 	vmov	r0, r1, d8
 800408e:	f7fc f8bb 	bl	8000208 <__aeabi_dmul>
 8004092:	4622      	mov	r2, r4
 8004094:	462b      	mov	r3, r5
 8004096:	f7fc f9e5 	bl	8000464 <__aeabi_dsub>
 800409a:	4602      	mov	r2, r0
 800409c:	460b      	mov	r3, r1
 800409e:	4604      	mov	r4, r0
 80040a0:	460d      	mov	r5, r1
 80040a2:	4640      	mov	r0, r8
 80040a4:	4649      	mov	r1, r9
 80040a6:	f7fc f9dd 	bl	8000464 <__aeabi_dsub>
 80040aa:	9a03      	ldr	r2, [sp, #12]
 80040ac:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	2b31      	cmp	r3, #49	; 0x31
 80040b4:	dc24      	bgt.n	8004100 <__ieee754_rem_pio2+0x288>
 80040b6:	e9ca 0100 	strd	r0, r1, [sl]
 80040ba:	4646      	mov	r6, r8
 80040bc:	464f      	mov	r7, r9
 80040be:	e9da 8900 	ldrd	r8, r9, [sl]
 80040c2:	4630      	mov	r0, r6
 80040c4:	4642      	mov	r2, r8
 80040c6:	464b      	mov	r3, r9
 80040c8:	4639      	mov	r1, r7
 80040ca:	f7fc f9cb 	bl	8000464 <__aeabi_dsub>
 80040ce:	462b      	mov	r3, r5
 80040d0:	4622      	mov	r2, r4
 80040d2:	f7fc f9c7 	bl	8000464 <__aeabi_dsub>
 80040d6:	9b02      	ldr	r3, [sp, #8]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80040de:	f6bf af0b 	bge.w	8003ef8 <__ieee754_rem_pio2+0x80>
 80040e2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80040e6:	f8ca 3004 	str.w	r3, [sl, #4]
 80040ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80040ee:	f8ca 8000 	str.w	r8, [sl]
 80040f2:	f8ca 0008 	str.w	r0, [sl, #8]
 80040f6:	f8ca 300c 	str.w	r3, [sl, #12]
 80040fa:	f1cb 0b00 	rsb	fp, fp, #0
 80040fe:	e6fb      	b.n	8003ef8 <__ieee754_rem_pio2+0x80>
 8004100:	a327      	add	r3, pc, #156	; (adr r3, 80041a0 <__ieee754_rem_pio2+0x328>)
 8004102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004106:	ec51 0b18 	vmov	r0, r1, d8
 800410a:	f7fc f87d 	bl	8000208 <__aeabi_dmul>
 800410e:	4604      	mov	r4, r0
 8004110:	460d      	mov	r5, r1
 8004112:	4602      	mov	r2, r0
 8004114:	460b      	mov	r3, r1
 8004116:	4640      	mov	r0, r8
 8004118:	4649      	mov	r1, r9
 800411a:	f7fc f9a3 	bl	8000464 <__aeabi_dsub>
 800411e:	4602      	mov	r2, r0
 8004120:	460b      	mov	r3, r1
 8004122:	4606      	mov	r6, r0
 8004124:	460f      	mov	r7, r1
 8004126:	4640      	mov	r0, r8
 8004128:	4649      	mov	r1, r9
 800412a:	f7fc f99b 	bl	8000464 <__aeabi_dsub>
 800412e:	4622      	mov	r2, r4
 8004130:	462b      	mov	r3, r5
 8004132:	f7fc f997 	bl	8000464 <__aeabi_dsub>
 8004136:	a31c      	add	r3, pc, #112	; (adr r3, 80041a8 <__ieee754_rem_pio2+0x330>)
 8004138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800413c:	4604      	mov	r4, r0
 800413e:	460d      	mov	r5, r1
 8004140:	ec51 0b18 	vmov	r0, r1, d8
 8004144:	f7fc f860 	bl	8000208 <__aeabi_dmul>
 8004148:	4622      	mov	r2, r4
 800414a:	462b      	mov	r3, r5
 800414c:	f7fc f98a 	bl	8000464 <__aeabi_dsub>
 8004150:	4604      	mov	r4, r0
 8004152:	460d      	mov	r5, r1
 8004154:	e760      	b.n	8004018 <__ieee754_rem_pio2+0x1a0>
 8004156:	4b1c      	ldr	r3, [pc, #112]	; (80041c8 <__ieee754_rem_pio2+0x350>)
 8004158:	4598      	cmp	r8, r3
 800415a:	dd37      	ble.n	80041cc <__ieee754_rem_pio2+0x354>
 800415c:	ee10 2a10 	vmov	r2, s0
 8004160:	462b      	mov	r3, r5
 8004162:	4620      	mov	r0, r4
 8004164:	4629      	mov	r1, r5
 8004166:	f7fc f97d 	bl	8000464 <__aeabi_dsub>
 800416a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800416e:	e9ca 0100 	strd	r0, r1, [sl]
 8004172:	e695      	b.n	8003ea0 <__ieee754_rem_pio2+0x28>
 8004174:	f3af 8000 	nop.w
 8004178:	54400000 	.word	0x54400000
 800417c:	3ff921fb 	.word	0x3ff921fb
 8004180:	1a626331 	.word	0x1a626331
 8004184:	3dd0b461 	.word	0x3dd0b461
 8004188:	1a600000 	.word	0x1a600000
 800418c:	3dd0b461 	.word	0x3dd0b461
 8004190:	2e037073 	.word	0x2e037073
 8004194:	3ba3198a 	.word	0x3ba3198a
 8004198:	6dc9c883 	.word	0x6dc9c883
 800419c:	3fe45f30 	.word	0x3fe45f30
 80041a0:	2e000000 	.word	0x2e000000
 80041a4:	3ba3198a 	.word	0x3ba3198a
 80041a8:	252049c1 	.word	0x252049c1
 80041ac:	397b839a 	.word	0x397b839a
 80041b0:	3fe921fb 	.word	0x3fe921fb
 80041b4:	4002d97b 	.word	0x4002d97b
 80041b8:	3ff921fb 	.word	0x3ff921fb
 80041bc:	413921fb 	.word	0x413921fb
 80041c0:	3fe00000 	.word	0x3fe00000
 80041c4:	08004b7c 	.word	0x08004b7c
 80041c8:	7fefffff 	.word	0x7fefffff
 80041cc:	ea4f 5628 	mov.w	r6, r8, asr #20
 80041d0:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 80041d4:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 80041d8:	4620      	mov	r0, r4
 80041da:	460d      	mov	r5, r1
 80041dc:	f7fc fb82 	bl	80008e4 <__aeabi_d2iz>
 80041e0:	f7fc fa8e 	bl	8000700 <__aeabi_i2d>
 80041e4:	4602      	mov	r2, r0
 80041e6:	460b      	mov	r3, r1
 80041e8:	4620      	mov	r0, r4
 80041ea:	4629      	mov	r1, r5
 80041ec:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80041f0:	f7fc f938 	bl	8000464 <__aeabi_dsub>
 80041f4:	4b21      	ldr	r3, [pc, #132]	; (800427c <__ieee754_rem_pio2+0x404>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	f7fc f806 	bl	8000208 <__aeabi_dmul>
 80041fc:	460d      	mov	r5, r1
 80041fe:	4604      	mov	r4, r0
 8004200:	f7fc fb70 	bl	80008e4 <__aeabi_d2iz>
 8004204:	f7fc fa7c 	bl	8000700 <__aeabi_i2d>
 8004208:	4602      	mov	r2, r0
 800420a:	460b      	mov	r3, r1
 800420c:	4620      	mov	r0, r4
 800420e:	4629      	mov	r1, r5
 8004210:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004214:	f7fc f926 	bl	8000464 <__aeabi_dsub>
 8004218:	4b18      	ldr	r3, [pc, #96]	; (800427c <__ieee754_rem_pio2+0x404>)
 800421a:	2200      	movs	r2, #0
 800421c:	f7fb fff4 	bl	8000208 <__aeabi_dmul>
 8004220:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004224:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8004228:	2703      	movs	r7, #3
 800422a:	2400      	movs	r4, #0
 800422c:	2500      	movs	r5, #0
 800422e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8004232:	4622      	mov	r2, r4
 8004234:	462b      	mov	r3, r5
 8004236:	46b9      	mov	r9, r7
 8004238:	3f01      	subs	r7, #1
 800423a:	f7fc fb21 	bl	8000880 <__aeabi_dcmpeq>
 800423e:	2800      	cmp	r0, #0
 8004240:	d1f5      	bne.n	800422e <__ieee754_rem_pio2+0x3b6>
 8004242:	4b0f      	ldr	r3, [pc, #60]	; (8004280 <__ieee754_rem_pio2+0x408>)
 8004244:	9301      	str	r3, [sp, #4]
 8004246:	2302      	movs	r3, #2
 8004248:	9300      	str	r3, [sp, #0]
 800424a:	4632      	mov	r2, r6
 800424c:	464b      	mov	r3, r9
 800424e:	4651      	mov	r1, sl
 8004250:	a804      	add	r0, sp, #16
 8004252:	f000 f821 	bl	8004298 <__kernel_rem_pio2>
 8004256:	9b02      	ldr	r3, [sp, #8]
 8004258:	2b00      	cmp	r3, #0
 800425a:	4683      	mov	fp, r0
 800425c:	f6bf ae4c 	bge.w	8003ef8 <__ieee754_rem_pio2+0x80>
 8004260:	e9da 2100 	ldrd	r2, r1, [sl]
 8004264:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004268:	e9ca 2300 	strd	r2, r3, [sl]
 800426c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8004270:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004274:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8004278:	e73f      	b.n	80040fa <__ieee754_rem_pio2+0x282>
 800427a:	bf00      	nop
 800427c:	41700000 	.word	0x41700000
 8004280:	08004bfc 	.word	0x08004bfc

08004284 <fabs>:
 8004284:	ec51 0b10 	vmov	r0, r1, d0
 8004288:	ee10 2a10 	vmov	r2, s0
 800428c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004290:	ec43 2b10 	vmov	d0, r2, r3
 8004294:	4770      	bx	lr
	...

08004298 <__kernel_rem_pio2>:
 8004298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800429c:	ed2d 8b02 	vpush	{d8}
 80042a0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80042a4:	f112 0f14 	cmn.w	r2, #20
 80042a8:	9306      	str	r3, [sp, #24]
 80042aa:	9104      	str	r1, [sp, #16]
 80042ac:	4bc2      	ldr	r3, [pc, #776]	; (80045b8 <__kernel_rem_pio2+0x320>)
 80042ae:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80042b0:	9009      	str	r0, [sp, #36]	; 0x24
 80042b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80042b6:	9300      	str	r3, [sp, #0]
 80042b8:	9b06      	ldr	r3, [sp, #24]
 80042ba:	f103 33ff 	add.w	r3, r3, #4294967295
 80042be:	bfa8      	it	ge
 80042c0:	1ed4      	subge	r4, r2, #3
 80042c2:	9305      	str	r3, [sp, #20]
 80042c4:	bfb2      	itee	lt
 80042c6:	2400      	movlt	r4, #0
 80042c8:	2318      	movge	r3, #24
 80042ca:	fb94 f4f3 	sdivge	r4, r4, r3
 80042ce:	f06f 0317 	mvn.w	r3, #23
 80042d2:	fb04 3303 	mla	r3, r4, r3, r3
 80042d6:	eb03 0a02 	add.w	sl, r3, r2
 80042da:	9b00      	ldr	r3, [sp, #0]
 80042dc:	9a05      	ldr	r2, [sp, #20]
 80042de:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 80045a8 <__kernel_rem_pio2+0x310>
 80042e2:	eb03 0802 	add.w	r8, r3, r2
 80042e6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80042e8:	1aa7      	subs	r7, r4, r2
 80042ea:	ae20      	add	r6, sp, #128	; 0x80
 80042ec:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80042f0:	2500      	movs	r5, #0
 80042f2:	4545      	cmp	r5, r8
 80042f4:	dd13      	ble.n	800431e <__kernel_rem_pio2+0x86>
 80042f6:	9b06      	ldr	r3, [sp, #24]
 80042f8:	aa20      	add	r2, sp, #128	; 0x80
 80042fa:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80042fe:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8004302:	f04f 0800 	mov.w	r8, #0
 8004306:	9b00      	ldr	r3, [sp, #0]
 8004308:	4598      	cmp	r8, r3
 800430a:	dc31      	bgt.n	8004370 <__kernel_rem_pio2+0xd8>
 800430c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 80045a8 <__kernel_rem_pio2+0x310>
 8004310:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8004314:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004318:	462f      	mov	r7, r5
 800431a:	2600      	movs	r6, #0
 800431c:	e01b      	b.n	8004356 <__kernel_rem_pio2+0xbe>
 800431e:	42ef      	cmn	r7, r5
 8004320:	d407      	bmi.n	8004332 <__kernel_rem_pio2+0x9a>
 8004322:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004326:	f7fc f9eb 	bl	8000700 <__aeabi_i2d>
 800432a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800432e:	3501      	adds	r5, #1
 8004330:	e7df      	b.n	80042f2 <__kernel_rem_pio2+0x5a>
 8004332:	ec51 0b18 	vmov	r0, r1, d8
 8004336:	e7f8      	b.n	800432a <__kernel_rem_pio2+0x92>
 8004338:	e9d7 2300 	ldrd	r2, r3, [r7]
 800433c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004340:	f7fb ff62 	bl	8000208 <__aeabi_dmul>
 8004344:	4602      	mov	r2, r0
 8004346:	460b      	mov	r3, r1
 8004348:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800434c:	f7fc f88c 	bl	8000468 <__adddf3>
 8004350:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004354:	3601      	adds	r6, #1
 8004356:	9b05      	ldr	r3, [sp, #20]
 8004358:	429e      	cmp	r6, r3
 800435a:	f1a7 0708 	sub.w	r7, r7, #8
 800435e:	ddeb      	ble.n	8004338 <__kernel_rem_pio2+0xa0>
 8004360:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004364:	f108 0801 	add.w	r8, r8, #1
 8004368:	ecab 7b02 	vstmia	fp!, {d7}
 800436c:	3508      	adds	r5, #8
 800436e:	e7ca      	b.n	8004306 <__kernel_rem_pio2+0x6e>
 8004370:	9b00      	ldr	r3, [sp, #0]
 8004372:	aa0c      	add	r2, sp, #48	; 0x30
 8004374:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004378:	930b      	str	r3, [sp, #44]	; 0x2c
 800437a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800437c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004380:	9c00      	ldr	r4, [sp, #0]
 8004382:	930a      	str	r3, [sp, #40]	; 0x28
 8004384:	00e3      	lsls	r3, r4, #3
 8004386:	9308      	str	r3, [sp, #32]
 8004388:	ab98      	add	r3, sp, #608	; 0x260
 800438a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800438e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8004392:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8004396:	ab70      	add	r3, sp, #448	; 0x1c0
 8004398:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800439c:	46c3      	mov	fp, r8
 800439e:	46a1      	mov	r9, r4
 80043a0:	f1b9 0f00 	cmp.w	r9, #0
 80043a4:	f1a5 0508 	sub.w	r5, r5, #8
 80043a8:	dc77      	bgt.n	800449a <__kernel_rem_pio2+0x202>
 80043aa:	ec47 6b10 	vmov	d0, r6, r7
 80043ae:	4650      	mov	r0, sl
 80043b0:	f000 fac2 	bl	8004938 <scalbn>
 80043b4:	ec57 6b10 	vmov	r6, r7, d0
 80043b8:	2200      	movs	r2, #0
 80043ba:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80043be:	ee10 0a10 	vmov	r0, s0
 80043c2:	4639      	mov	r1, r7
 80043c4:	f7fb ff20 	bl	8000208 <__aeabi_dmul>
 80043c8:	ec41 0b10 	vmov	d0, r0, r1
 80043cc:	f000 fb34 	bl	8004a38 <floor>
 80043d0:	4b7a      	ldr	r3, [pc, #488]	; (80045bc <__kernel_rem_pio2+0x324>)
 80043d2:	ec51 0b10 	vmov	r0, r1, d0
 80043d6:	2200      	movs	r2, #0
 80043d8:	f7fb ff16 	bl	8000208 <__aeabi_dmul>
 80043dc:	4602      	mov	r2, r0
 80043de:	460b      	mov	r3, r1
 80043e0:	4630      	mov	r0, r6
 80043e2:	4639      	mov	r1, r7
 80043e4:	f7fc f83e 	bl	8000464 <__aeabi_dsub>
 80043e8:	460f      	mov	r7, r1
 80043ea:	4606      	mov	r6, r0
 80043ec:	f7fc fa7a 	bl	80008e4 <__aeabi_d2iz>
 80043f0:	9002      	str	r0, [sp, #8]
 80043f2:	f7fc f985 	bl	8000700 <__aeabi_i2d>
 80043f6:	4602      	mov	r2, r0
 80043f8:	460b      	mov	r3, r1
 80043fa:	4630      	mov	r0, r6
 80043fc:	4639      	mov	r1, r7
 80043fe:	f7fc f831 	bl	8000464 <__aeabi_dsub>
 8004402:	f1ba 0f00 	cmp.w	sl, #0
 8004406:	4606      	mov	r6, r0
 8004408:	460f      	mov	r7, r1
 800440a:	dd6d      	ble.n	80044e8 <__kernel_rem_pio2+0x250>
 800440c:	1e61      	subs	r1, r4, #1
 800440e:	ab0c      	add	r3, sp, #48	; 0x30
 8004410:	9d02      	ldr	r5, [sp, #8]
 8004412:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004416:	f1ca 0018 	rsb	r0, sl, #24
 800441a:	fa43 f200 	asr.w	r2, r3, r0
 800441e:	4415      	add	r5, r2
 8004420:	4082      	lsls	r2, r0
 8004422:	1a9b      	subs	r3, r3, r2
 8004424:	aa0c      	add	r2, sp, #48	; 0x30
 8004426:	9502      	str	r5, [sp, #8]
 8004428:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800442c:	f1ca 0217 	rsb	r2, sl, #23
 8004430:	fa43 fb02 	asr.w	fp, r3, r2
 8004434:	f1bb 0f00 	cmp.w	fp, #0
 8004438:	dd65      	ble.n	8004506 <__kernel_rem_pio2+0x26e>
 800443a:	9b02      	ldr	r3, [sp, #8]
 800443c:	2200      	movs	r2, #0
 800443e:	3301      	adds	r3, #1
 8004440:	9302      	str	r3, [sp, #8]
 8004442:	4615      	mov	r5, r2
 8004444:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8004448:	4294      	cmp	r4, r2
 800444a:	f300 809f 	bgt.w	800458c <__kernel_rem_pio2+0x2f4>
 800444e:	f1ba 0f00 	cmp.w	sl, #0
 8004452:	dd07      	ble.n	8004464 <__kernel_rem_pio2+0x1cc>
 8004454:	f1ba 0f01 	cmp.w	sl, #1
 8004458:	f000 80c1 	beq.w	80045de <__kernel_rem_pio2+0x346>
 800445c:	f1ba 0f02 	cmp.w	sl, #2
 8004460:	f000 80c7 	beq.w	80045f2 <__kernel_rem_pio2+0x35a>
 8004464:	f1bb 0f02 	cmp.w	fp, #2
 8004468:	d14d      	bne.n	8004506 <__kernel_rem_pio2+0x26e>
 800446a:	4632      	mov	r2, r6
 800446c:	463b      	mov	r3, r7
 800446e:	4954      	ldr	r1, [pc, #336]	; (80045c0 <__kernel_rem_pio2+0x328>)
 8004470:	2000      	movs	r0, #0
 8004472:	f7fb fff7 	bl	8000464 <__aeabi_dsub>
 8004476:	4606      	mov	r6, r0
 8004478:	460f      	mov	r7, r1
 800447a:	2d00      	cmp	r5, #0
 800447c:	d043      	beq.n	8004506 <__kernel_rem_pio2+0x26e>
 800447e:	4650      	mov	r0, sl
 8004480:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 80045b0 <__kernel_rem_pio2+0x318>
 8004484:	f000 fa58 	bl	8004938 <scalbn>
 8004488:	4630      	mov	r0, r6
 800448a:	4639      	mov	r1, r7
 800448c:	ec53 2b10 	vmov	r2, r3, d0
 8004490:	f7fb ffe8 	bl	8000464 <__aeabi_dsub>
 8004494:	4606      	mov	r6, r0
 8004496:	460f      	mov	r7, r1
 8004498:	e035      	b.n	8004506 <__kernel_rem_pio2+0x26e>
 800449a:	4b4a      	ldr	r3, [pc, #296]	; (80045c4 <__kernel_rem_pio2+0x32c>)
 800449c:	2200      	movs	r2, #0
 800449e:	4630      	mov	r0, r6
 80044a0:	4639      	mov	r1, r7
 80044a2:	f7fb feb1 	bl	8000208 <__aeabi_dmul>
 80044a6:	f7fc fa1d 	bl	80008e4 <__aeabi_d2iz>
 80044aa:	f7fc f929 	bl	8000700 <__aeabi_i2d>
 80044ae:	4602      	mov	r2, r0
 80044b0:	460b      	mov	r3, r1
 80044b2:	ec43 2b18 	vmov	d8, r2, r3
 80044b6:	4b44      	ldr	r3, [pc, #272]	; (80045c8 <__kernel_rem_pio2+0x330>)
 80044b8:	2200      	movs	r2, #0
 80044ba:	f7fb fea5 	bl	8000208 <__aeabi_dmul>
 80044be:	4602      	mov	r2, r0
 80044c0:	460b      	mov	r3, r1
 80044c2:	4630      	mov	r0, r6
 80044c4:	4639      	mov	r1, r7
 80044c6:	f7fb ffcd 	bl	8000464 <__aeabi_dsub>
 80044ca:	f7fc fa0b 	bl	80008e4 <__aeabi_d2iz>
 80044ce:	e9d5 2300 	ldrd	r2, r3, [r5]
 80044d2:	f84b 0b04 	str.w	r0, [fp], #4
 80044d6:	ec51 0b18 	vmov	r0, r1, d8
 80044da:	f7fb ffc5 	bl	8000468 <__adddf3>
 80044de:	f109 39ff 	add.w	r9, r9, #4294967295
 80044e2:	4606      	mov	r6, r0
 80044e4:	460f      	mov	r7, r1
 80044e6:	e75b      	b.n	80043a0 <__kernel_rem_pio2+0x108>
 80044e8:	d106      	bne.n	80044f8 <__kernel_rem_pio2+0x260>
 80044ea:	1e63      	subs	r3, r4, #1
 80044ec:	aa0c      	add	r2, sp, #48	; 0x30
 80044ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044f2:	ea4f 5be3 	mov.w	fp, r3, asr #23
 80044f6:	e79d      	b.n	8004434 <__kernel_rem_pio2+0x19c>
 80044f8:	4b34      	ldr	r3, [pc, #208]	; (80045cc <__kernel_rem_pio2+0x334>)
 80044fa:	2200      	movs	r2, #0
 80044fc:	f7fc f9de 	bl	80008bc <__aeabi_dcmpge>
 8004500:	2800      	cmp	r0, #0
 8004502:	d140      	bne.n	8004586 <__kernel_rem_pio2+0x2ee>
 8004504:	4683      	mov	fp, r0
 8004506:	2200      	movs	r2, #0
 8004508:	2300      	movs	r3, #0
 800450a:	4630      	mov	r0, r6
 800450c:	4639      	mov	r1, r7
 800450e:	f7fc f9b7 	bl	8000880 <__aeabi_dcmpeq>
 8004512:	2800      	cmp	r0, #0
 8004514:	f000 80c1 	beq.w	800469a <__kernel_rem_pio2+0x402>
 8004518:	1e65      	subs	r5, r4, #1
 800451a:	462b      	mov	r3, r5
 800451c:	2200      	movs	r2, #0
 800451e:	9900      	ldr	r1, [sp, #0]
 8004520:	428b      	cmp	r3, r1
 8004522:	da6d      	bge.n	8004600 <__kernel_rem_pio2+0x368>
 8004524:	2a00      	cmp	r2, #0
 8004526:	f000 808a 	beq.w	800463e <__kernel_rem_pio2+0x3a6>
 800452a:	ab0c      	add	r3, sp, #48	; 0x30
 800452c:	f1aa 0a18 	sub.w	sl, sl, #24
 8004530:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8004534:	2b00      	cmp	r3, #0
 8004536:	f000 80ae 	beq.w	8004696 <__kernel_rem_pio2+0x3fe>
 800453a:	4650      	mov	r0, sl
 800453c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80045b0 <__kernel_rem_pio2+0x318>
 8004540:	f000 f9fa 	bl	8004938 <scalbn>
 8004544:	1c6b      	adds	r3, r5, #1
 8004546:	00da      	lsls	r2, r3, #3
 8004548:	9205      	str	r2, [sp, #20]
 800454a:	ec57 6b10 	vmov	r6, r7, d0
 800454e:	aa70      	add	r2, sp, #448	; 0x1c0
 8004550:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80045c4 <__kernel_rem_pio2+0x32c>
 8004554:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8004558:	462c      	mov	r4, r5
 800455a:	f04f 0800 	mov.w	r8, #0
 800455e:	2c00      	cmp	r4, #0
 8004560:	f280 80d4 	bge.w	800470c <__kernel_rem_pio2+0x474>
 8004564:	462c      	mov	r4, r5
 8004566:	2c00      	cmp	r4, #0
 8004568:	f2c0 8102 	blt.w	8004770 <__kernel_rem_pio2+0x4d8>
 800456c:	4b18      	ldr	r3, [pc, #96]	; (80045d0 <__kernel_rem_pio2+0x338>)
 800456e:	461e      	mov	r6, r3
 8004570:	ab70      	add	r3, sp, #448	; 0x1c0
 8004572:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8004576:	1b2b      	subs	r3, r5, r4
 8004578:	f04f 0900 	mov.w	r9, #0
 800457c:	f04f 0a00 	mov.w	sl, #0
 8004580:	2700      	movs	r7, #0
 8004582:	9306      	str	r3, [sp, #24]
 8004584:	e0e6      	b.n	8004754 <__kernel_rem_pio2+0x4bc>
 8004586:	f04f 0b02 	mov.w	fp, #2
 800458a:	e756      	b.n	800443a <__kernel_rem_pio2+0x1a2>
 800458c:	f8d8 3000 	ldr.w	r3, [r8]
 8004590:	bb05      	cbnz	r5, 80045d4 <__kernel_rem_pio2+0x33c>
 8004592:	b123      	cbz	r3, 800459e <__kernel_rem_pio2+0x306>
 8004594:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8004598:	f8c8 3000 	str.w	r3, [r8]
 800459c:	2301      	movs	r3, #1
 800459e:	3201      	adds	r2, #1
 80045a0:	f108 0804 	add.w	r8, r8, #4
 80045a4:	461d      	mov	r5, r3
 80045a6:	e74f      	b.n	8004448 <__kernel_rem_pio2+0x1b0>
	...
 80045b4:	3ff00000 	.word	0x3ff00000
 80045b8:	08004d48 	.word	0x08004d48
 80045bc:	40200000 	.word	0x40200000
 80045c0:	3ff00000 	.word	0x3ff00000
 80045c4:	3e700000 	.word	0x3e700000
 80045c8:	41700000 	.word	0x41700000
 80045cc:	3fe00000 	.word	0x3fe00000
 80045d0:	08004d08 	.word	0x08004d08
 80045d4:	1acb      	subs	r3, r1, r3
 80045d6:	f8c8 3000 	str.w	r3, [r8]
 80045da:	462b      	mov	r3, r5
 80045dc:	e7df      	b.n	800459e <__kernel_rem_pio2+0x306>
 80045de:	1e62      	subs	r2, r4, #1
 80045e0:	ab0c      	add	r3, sp, #48	; 0x30
 80045e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045e6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80045ea:	a90c      	add	r1, sp, #48	; 0x30
 80045ec:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80045f0:	e738      	b.n	8004464 <__kernel_rem_pio2+0x1cc>
 80045f2:	1e62      	subs	r2, r4, #1
 80045f4:	ab0c      	add	r3, sp, #48	; 0x30
 80045f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045fa:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80045fe:	e7f4      	b.n	80045ea <__kernel_rem_pio2+0x352>
 8004600:	a90c      	add	r1, sp, #48	; 0x30
 8004602:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004606:	3b01      	subs	r3, #1
 8004608:	430a      	orrs	r2, r1
 800460a:	e788      	b.n	800451e <__kernel_rem_pio2+0x286>
 800460c:	3301      	adds	r3, #1
 800460e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8004612:	2900      	cmp	r1, #0
 8004614:	d0fa      	beq.n	800460c <__kernel_rem_pio2+0x374>
 8004616:	9a08      	ldr	r2, [sp, #32]
 8004618:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800461c:	446a      	add	r2, sp
 800461e:	3a98      	subs	r2, #152	; 0x98
 8004620:	9208      	str	r2, [sp, #32]
 8004622:	9a06      	ldr	r2, [sp, #24]
 8004624:	a920      	add	r1, sp, #128	; 0x80
 8004626:	18a2      	adds	r2, r4, r2
 8004628:	18e3      	adds	r3, r4, r3
 800462a:	f104 0801 	add.w	r8, r4, #1
 800462e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8004632:	9302      	str	r3, [sp, #8]
 8004634:	9b02      	ldr	r3, [sp, #8]
 8004636:	4543      	cmp	r3, r8
 8004638:	da04      	bge.n	8004644 <__kernel_rem_pio2+0x3ac>
 800463a:	461c      	mov	r4, r3
 800463c:	e6a2      	b.n	8004384 <__kernel_rem_pio2+0xec>
 800463e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004640:	2301      	movs	r3, #1
 8004642:	e7e4      	b.n	800460e <__kernel_rem_pio2+0x376>
 8004644:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004646:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800464a:	f7fc f859 	bl	8000700 <__aeabi_i2d>
 800464e:	e8e5 0102 	strd	r0, r1, [r5], #8
 8004652:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004654:	46ab      	mov	fp, r5
 8004656:	461c      	mov	r4, r3
 8004658:	f04f 0900 	mov.w	r9, #0
 800465c:	2600      	movs	r6, #0
 800465e:	2700      	movs	r7, #0
 8004660:	9b05      	ldr	r3, [sp, #20]
 8004662:	4599      	cmp	r9, r3
 8004664:	dd06      	ble.n	8004674 <__kernel_rem_pio2+0x3dc>
 8004666:	9b08      	ldr	r3, [sp, #32]
 8004668:	e8e3 6702 	strd	r6, r7, [r3], #8
 800466c:	f108 0801 	add.w	r8, r8, #1
 8004670:	9308      	str	r3, [sp, #32]
 8004672:	e7df      	b.n	8004634 <__kernel_rem_pio2+0x39c>
 8004674:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8004678:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800467c:	f7fb fdc4 	bl	8000208 <__aeabi_dmul>
 8004680:	4602      	mov	r2, r0
 8004682:	460b      	mov	r3, r1
 8004684:	4630      	mov	r0, r6
 8004686:	4639      	mov	r1, r7
 8004688:	f7fb feee 	bl	8000468 <__adddf3>
 800468c:	f109 0901 	add.w	r9, r9, #1
 8004690:	4606      	mov	r6, r0
 8004692:	460f      	mov	r7, r1
 8004694:	e7e4      	b.n	8004660 <__kernel_rem_pio2+0x3c8>
 8004696:	3d01      	subs	r5, #1
 8004698:	e747      	b.n	800452a <__kernel_rem_pio2+0x292>
 800469a:	ec47 6b10 	vmov	d0, r6, r7
 800469e:	f1ca 0000 	rsb	r0, sl, #0
 80046a2:	f000 f949 	bl	8004938 <scalbn>
 80046a6:	ec57 6b10 	vmov	r6, r7, d0
 80046aa:	4ba0      	ldr	r3, [pc, #640]	; (800492c <__kernel_rem_pio2+0x694>)
 80046ac:	ee10 0a10 	vmov	r0, s0
 80046b0:	2200      	movs	r2, #0
 80046b2:	4639      	mov	r1, r7
 80046b4:	f7fc f902 	bl	80008bc <__aeabi_dcmpge>
 80046b8:	b1f8      	cbz	r0, 80046fa <__kernel_rem_pio2+0x462>
 80046ba:	4b9d      	ldr	r3, [pc, #628]	; (8004930 <__kernel_rem_pio2+0x698>)
 80046bc:	2200      	movs	r2, #0
 80046be:	4630      	mov	r0, r6
 80046c0:	4639      	mov	r1, r7
 80046c2:	f7fb fda1 	bl	8000208 <__aeabi_dmul>
 80046c6:	f7fc f90d 	bl	80008e4 <__aeabi_d2iz>
 80046ca:	4680      	mov	r8, r0
 80046cc:	f7fc f818 	bl	8000700 <__aeabi_i2d>
 80046d0:	4b96      	ldr	r3, [pc, #600]	; (800492c <__kernel_rem_pio2+0x694>)
 80046d2:	2200      	movs	r2, #0
 80046d4:	f7fb fd98 	bl	8000208 <__aeabi_dmul>
 80046d8:	460b      	mov	r3, r1
 80046da:	4602      	mov	r2, r0
 80046dc:	4639      	mov	r1, r7
 80046de:	4630      	mov	r0, r6
 80046e0:	f7fb fec0 	bl	8000464 <__aeabi_dsub>
 80046e4:	f7fc f8fe 	bl	80008e4 <__aeabi_d2iz>
 80046e8:	1c65      	adds	r5, r4, #1
 80046ea:	ab0c      	add	r3, sp, #48	; 0x30
 80046ec:	f10a 0a18 	add.w	sl, sl, #24
 80046f0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80046f4:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80046f8:	e71f      	b.n	800453a <__kernel_rem_pio2+0x2a2>
 80046fa:	4630      	mov	r0, r6
 80046fc:	4639      	mov	r1, r7
 80046fe:	f7fc f8f1 	bl	80008e4 <__aeabi_d2iz>
 8004702:	ab0c      	add	r3, sp, #48	; 0x30
 8004704:	4625      	mov	r5, r4
 8004706:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800470a:	e716      	b.n	800453a <__kernel_rem_pio2+0x2a2>
 800470c:	ab0c      	add	r3, sp, #48	; 0x30
 800470e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004712:	f7fb fff5 	bl	8000700 <__aeabi_i2d>
 8004716:	4632      	mov	r2, r6
 8004718:	463b      	mov	r3, r7
 800471a:	f7fb fd75 	bl	8000208 <__aeabi_dmul>
 800471e:	4642      	mov	r2, r8
 8004720:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8004724:	464b      	mov	r3, r9
 8004726:	4630      	mov	r0, r6
 8004728:	4639      	mov	r1, r7
 800472a:	f7fb fd6d 	bl	8000208 <__aeabi_dmul>
 800472e:	3c01      	subs	r4, #1
 8004730:	4606      	mov	r6, r0
 8004732:	460f      	mov	r7, r1
 8004734:	e713      	b.n	800455e <__kernel_rem_pio2+0x2c6>
 8004736:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800473a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800473e:	f7fb fd63 	bl	8000208 <__aeabi_dmul>
 8004742:	4602      	mov	r2, r0
 8004744:	460b      	mov	r3, r1
 8004746:	4648      	mov	r0, r9
 8004748:	4651      	mov	r1, sl
 800474a:	f7fb fe8d 	bl	8000468 <__adddf3>
 800474e:	3701      	adds	r7, #1
 8004750:	4681      	mov	r9, r0
 8004752:	468a      	mov	sl, r1
 8004754:	9b00      	ldr	r3, [sp, #0]
 8004756:	429f      	cmp	r7, r3
 8004758:	dc02      	bgt.n	8004760 <__kernel_rem_pio2+0x4c8>
 800475a:	9b06      	ldr	r3, [sp, #24]
 800475c:	429f      	cmp	r7, r3
 800475e:	ddea      	ble.n	8004736 <__kernel_rem_pio2+0x49e>
 8004760:	9a06      	ldr	r2, [sp, #24]
 8004762:	ab48      	add	r3, sp, #288	; 0x120
 8004764:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8004768:	e9c6 9a00 	strd	r9, sl, [r6]
 800476c:	3c01      	subs	r4, #1
 800476e:	e6fa      	b.n	8004566 <__kernel_rem_pio2+0x2ce>
 8004770:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8004772:	2b02      	cmp	r3, #2
 8004774:	dc0b      	bgt.n	800478e <__kernel_rem_pio2+0x4f6>
 8004776:	2b00      	cmp	r3, #0
 8004778:	dc39      	bgt.n	80047ee <__kernel_rem_pio2+0x556>
 800477a:	d05d      	beq.n	8004838 <__kernel_rem_pio2+0x5a0>
 800477c:	9b02      	ldr	r3, [sp, #8]
 800477e:	f003 0007 	and.w	r0, r3, #7
 8004782:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8004786:	ecbd 8b02 	vpop	{d8}
 800478a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800478e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8004790:	2b03      	cmp	r3, #3
 8004792:	d1f3      	bne.n	800477c <__kernel_rem_pio2+0x4e4>
 8004794:	9b05      	ldr	r3, [sp, #20]
 8004796:	9500      	str	r5, [sp, #0]
 8004798:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800479c:	eb0d 0403 	add.w	r4, sp, r3
 80047a0:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 80047a4:	46a2      	mov	sl, r4
 80047a6:	9b00      	ldr	r3, [sp, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	f1aa 0a08 	sub.w	sl, sl, #8
 80047ae:	dc69      	bgt.n	8004884 <__kernel_rem_pio2+0x5ec>
 80047b0:	46aa      	mov	sl, r5
 80047b2:	f1ba 0f01 	cmp.w	sl, #1
 80047b6:	f1a4 0408 	sub.w	r4, r4, #8
 80047ba:	f300 8083 	bgt.w	80048c4 <__kernel_rem_pio2+0x62c>
 80047be:	9c05      	ldr	r4, [sp, #20]
 80047c0:	ab48      	add	r3, sp, #288	; 0x120
 80047c2:	441c      	add	r4, r3
 80047c4:	2000      	movs	r0, #0
 80047c6:	2100      	movs	r1, #0
 80047c8:	2d01      	cmp	r5, #1
 80047ca:	f300 809a 	bgt.w	8004902 <__kernel_rem_pio2+0x66a>
 80047ce:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 80047d2:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80047d6:	f1bb 0f00 	cmp.w	fp, #0
 80047da:	f040 8098 	bne.w	800490e <__kernel_rem_pio2+0x676>
 80047de:	9b04      	ldr	r3, [sp, #16]
 80047e0:	e9c3 7800 	strd	r7, r8, [r3]
 80047e4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80047e8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80047ec:	e7c6      	b.n	800477c <__kernel_rem_pio2+0x4e4>
 80047ee:	9e05      	ldr	r6, [sp, #20]
 80047f0:	ab48      	add	r3, sp, #288	; 0x120
 80047f2:	441e      	add	r6, r3
 80047f4:	462c      	mov	r4, r5
 80047f6:	2000      	movs	r0, #0
 80047f8:	2100      	movs	r1, #0
 80047fa:	2c00      	cmp	r4, #0
 80047fc:	da33      	bge.n	8004866 <__kernel_rem_pio2+0x5ce>
 80047fe:	f1bb 0f00 	cmp.w	fp, #0
 8004802:	d036      	beq.n	8004872 <__kernel_rem_pio2+0x5da>
 8004804:	4602      	mov	r2, r0
 8004806:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800480a:	9c04      	ldr	r4, [sp, #16]
 800480c:	e9c4 2300 	strd	r2, r3, [r4]
 8004810:	4602      	mov	r2, r0
 8004812:	460b      	mov	r3, r1
 8004814:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8004818:	f7fb fe24 	bl	8000464 <__aeabi_dsub>
 800481c:	ae4a      	add	r6, sp, #296	; 0x128
 800481e:	2401      	movs	r4, #1
 8004820:	42a5      	cmp	r5, r4
 8004822:	da29      	bge.n	8004878 <__kernel_rem_pio2+0x5e0>
 8004824:	f1bb 0f00 	cmp.w	fp, #0
 8004828:	d002      	beq.n	8004830 <__kernel_rem_pio2+0x598>
 800482a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800482e:	4619      	mov	r1, r3
 8004830:	9b04      	ldr	r3, [sp, #16]
 8004832:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8004836:	e7a1      	b.n	800477c <__kernel_rem_pio2+0x4e4>
 8004838:	9c05      	ldr	r4, [sp, #20]
 800483a:	ab48      	add	r3, sp, #288	; 0x120
 800483c:	441c      	add	r4, r3
 800483e:	2000      	movs	r0, #0
 8004840:	2100      	movs	r1, #0
 8004842:	2d00      	cmp	r5, #0
 8004844:	da09      	bge.n	800485a <__kernel_rem_pio2+0x5c2>
 8004846:	f1bb 0f00 	cmp.w	fp, #0
 800484a:	d002      	beq.n	8004852 <__kernel_rem_pio2+0x5ba>
 800484c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004850:	4619      	mov	r1, r3
 8004852:	9b04      	ldr	r3, [sp, #16]
 8004854:	e9c3 0100 	strd	r0, r1, [r3]
 8004858:	e790      	b.n	800477c <__kernel_rem_pio2+0x4e4>
 800485a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800485e:	f7fb fe03 	bl	8000468 <__adddf3>
 8004862:	3d01      	subs	r5, #1
 8004864:	e7ed      	b.n	8004842 <__kernel_rem_pio2+0x5aa>
 8004866:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800486a:	f7fb fdfd 	bl	8000468 <__adddf3>
 800486e:	3c01      	subs	r4, #1
 8004870:	e7c3      	b.n	80047fa <__kernel_rem_pio2+0x562>
 8004872:	4602      	mov	r2, r0
 8004874:	460b      	mov	r3, r1
 8004876:	e7c8      	b.n	800480a <__kernel_rem_pio2+0x572>
 8004878:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800487c:	f7fb fdf4 	bl	8000468 <__adddf3>
 8004880:	3401      	adds	r4, #1
 8004882:	e7cd      	b.n	8004820 <__kernel_rem_pio2+0x588>
 8004884:	e9da 8900 	ldrd	r8, r9, [sl]
 8004888:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800488c:	9b00      	ldr	r3, [sp, #0]
 800488e:	3b01      	subs	r3, #1
 8004890:	9300      	str	r3, [sp, #0]
 8004892:	4632      	mov	r2, r6
 8004894:	463b      	mov	r3, r7
 8004896:	4640      	mov	r0, r8
 8004898:	4649      	mov	r1, r9
 800489a:	f7fb fde5 	bl	8000468 <__adddf3>
 800489e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80048a2:	4602      	mov	r2, r0
 80048a4:	460b      	mov	r3, r1
 80048a6:	4640      	mov	r0, r8
 80048a8:	4649      	mov	r1, r9
 80048aa:	f7fb fddb 	bl	8000464 <__aeabi_dsub>
 80048ae:	4632      	mov	r2, r6
 80048b0:	463b      	mov	r3, r7
 80048b2:	f7fb fdd9 	bl	8000468 <__adddf3>
 80048b6:	ed9d 7b06 	vldr	d7, [sp, #24]
 80048ba:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80048be:	ed8a 7b00 	vstr	d7, [sl]
 80048c2:	e770      	b.n	80047a6 <__kernel_rem_pio2+0x50e>
 80048c4:	e9d4 8900 	ldrd	r8, r9, [r4]
 80048c8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80048cc:	4640      	mov	r0, r8
 80048ce:	4632      	mov	r2, r6
 80048d0:	463b      	mov	r3, r7
 80048d2:	4649      	mov	r1, r9
 80048d4:	f7fb fdc8 	bl	8000468 <__adddf3>
 80048d8:	e9cd 0100 	strd	r0, r1, [sp]
 80048dc:	4602      	mov	r2, r0
 80048de:	460b      	mov	r3, r1
 80048e0:	4640      	mov	r0, r8
 80048e2:	4649      	mov	r1, r9
 80048e4:	f7fb fdbe 	bl	8000464 <__aeabi_dsub>
 80048e8:	4632      	mov	r2, r6
 80048ea:	463b      	mov	r3, r7
 80048ec:	f7fb fdbc 	bl	8000468 <__adddf3>
 80048f0:	ed9d 7b00 	vldr	d7, [sp]
 80048f4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80048f8:	ed84 7b00 	vstr	d7, [r4]
 80048fc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004900:	e757      	b.n	80047b2 <__kernel_rem_pio2+0x51a>
 8004902:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004906:	f7fb fdaf 	bl	8000468 <__adddf3>
 800490a:	3d01      	subs	r5, #1
 800490c:	e75c      	b.n	80047c8 <__kernel_rem_pio2+0x530>
 800490e:	9b04      	ldr	r3, [sp, #16]
 8004910:	9a04      	ldr	r2, [sp, #16]
 8004912:	601f      	str	r7, [r3, #0]
 8004914:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8004918:	605c      	str	r4, [r3, #4]
 800491a:	609d      	str	r5, [r3, #8]
 800491c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004920:	60d3      	str	r3, [r2, #12]
 8004922:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004926:	6110      	str	r0, [r2, #16]
 8004928:	6153      	str	r3, [r2, #20]
 800492a:	e727      	b.n	800477c <__kernel_rem_pio2+0x4e4>
 800492c:	41700000 	.word	0x41700000
 8004930:	3e700000 	.word	0x3e700000
 8004934:	00000000 	.word	0x00000000

08004938 <scalbn>:
 8004938:	b570      	push	{r4, r5, r6, lr}
 800493a:	ec55 4b10 	vmov	r4, r5, d0
 800493e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8004942:	4606      	mov	r6, r0
 8004944:	462b      	mov	r3, r5
 8004946:	b999      	cbnz	r1, 8004970 <scalbn+0x38>
 8004948:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800494c:	4323      	orrs	r3, r4
 800494e:	d03f      	beq.n	80049d0 <scalbn+0x98>
 8004950:	4b35      	ldr	r3, [pc, #212]	; (8004a28 <scalbn+0xf0>)
 8004952:	4629      	mov	r1, r5
 8004954:	ee10 0a10 	vmov	r0, s0
 8004958:	2200      	movs	r2, #0
 800495a:	f7fb fc55 	bl	8000208 <__aeabi_dmul>
 800495e:	4b33      	ldr	r3, [pc, #204]	; (8004a2c <scalbn+0xf4>)
 8004960:	429e      	cmp	r6, r3
 8004962:	4604      	mov	r4, r0
 8004964:	460d      	mov	r5, r1
 8004966:	da10      	bge.n	800498a <scalbn+0x52>
 8004968:	a327      	add	r3, pc, #156	; (adr r3, 8004a08 <scalbn+0xd0>)
 800496a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800496e:	e01f      	b.n	80049b0 <scalbn+0x78>
 8004970:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004974:	4291      	cmp	r1, r2
 8004976:	d10c      	bne.n	8004992 <scalbn+0x5a>
 8004978:	ee10 2a10 	vmov	r2, s0
 800497c:	4620      	mov	r0, r4
 800497e:	4629      	mov	r1, r5
 8004980:	f7fb fd72 	bl	8000468 <__adddf3>
 8004984:	4604      	mov	r4, r0
 8004986:	460d      	mov	r5, r1
 8004988:	e022      	b.n	80049d0 <scalbn+0x98>
 800498a:	460b      	mov	r3, r1
 800498c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8004990:	3936      	subs	r1, #54	; 0x36
 8004992:	f24c 3250 	movw	r2, #50000	; 0xc350
 8004996:	4296      	cmp	r6, r2
 8004998:	dd0d      	ble.n	80049b6 <scalbn+0x7e>
 800499a:	2d00      	cmp	r5, #0
 800499c:	a11c      	add	r1, pc, #112	; (adr r1, 8004a10 <scalbn+0xd8>)
 800499e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80049a2:	da02      	bge.n	80049aa <scalbn+0x72>
 80049a4:	a11c      	add	r1, pc, #112	; (adr r1, 8004a18 <scalbn+0xe0>)
 80049a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80049aa:	a319      	add	r3, pc, #100	; (adr r3, 8004a10 <scalbn+0xd8>)
 80049ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b0:	f7fb fc2a 	bl	8000208 <__aeabi_dmul>
 80049b4:	e7e6      	b.n	8004984 <scalbn+0x4c>
 80049b6:	1872      	adds	r2, r6, r1
 80049b8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80049bc:	428a      	cmp	r2, r1
 80049be:	dcec      	bgt.n	800499a <scalbn+0x62>
 80049c0:	2a00      	cmp	r2, #0
 80049c2:	dd08      	ble.n	80049d6 <scalbn+0x9e>
 80049c4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80049c8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80049cc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80049d0:	ec45 4b10 	vmov	d0, r4, r5
 80049d4:	bd70      	pop	{r4, r5, r6, pc}
 80049d6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80049da:	da08      	bge.n	80049ee <scalbn+0xb6>
 80049dc:	2d00      	cmp	r5, #0
 80049de:	a10a      	add	r1, pc, #40	; (adr r1, 8004a08 <scalbn+0xd0>)
 80049e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80049e4:	dac0      	bge.n	8004968 <scalbn+0x30>
 80049e6:	a10e      	add	r1, pc, #56	; (adr r1, 8004a20 <scalbn+0xe8>)
 80049e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80049ec:	e7bc      	b.n	8004968 <scalbn+0x30>
 80049ee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80049f2:	3236      	adds	r2, #54	; 0x36
 80049f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80049f8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80049fc:	4620      	mov	r0, r4
 80049fe:	4b0c      	ldr	r3, [pc, #48]	; (8004a30 <scalbn+0xf8>)
 8004a00:	2200      	movs	r2, #0
 8004a02:	e7d5      	b.n	80049b0 <scalbn+0x78>
 8004a04:	f3af 8000 	nop.w
 8004a08:	c2f8f359 	.word	0xc2f8f359
 8004a0c:	01a56e1f 	.word	0x01a56e1f
 8004a10:	8800759c 	.word	0x8800759c
 8004a14:	7e37e43c 	.word	0x7e37e43c
 8004a18:	8800759c 	.word	0x8800759c
 8004a1c:	fe37e43c 	.word	0xfe37e43c
 8004a20:	c2f8f359 	.word	0xc2f8f359
 8004a24:	81a56e1f 	.word	0x81a56e1f
 8004a28:	43500000 	.word	0x43500000
 8004a2c:	ffff3cb0 	.word	0xffff3cb0
 8004a30:	3c900000 	.word	0x3c900000
 8004a34:	00000000 	.word	0x00000000

08004a38 <floor>:
 8004a38:	ec51 0b10 	vmov	r0, r1, d0
 8004a3c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a44:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8004a48:	2e13      	cmp	r6, #19
 8004a4a:	ee10 5a10 	vmov	r5, s0
 8004a4e:	ee10 8a10 	vmov	r8, s0
 8004a52:	460c      	mov	r4, r1
 8004a54:	dc31      	bgt.n	8004aba <floor+0x82>
 8004a56:	2e00      	cmp	r6, #0
 8004a58:	da14      	bge.n	8004a84 <floor+0x4c>
 8004a5a:	a333      	add	r3, pc, #204	; (adr r3, 8004b28 <floor+0xf0>)
 8004a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a60:	f7fb fd02 	bl	8000468 <__adddf3>
 8004a64:	2200      	movs	r2, #0
 8004a66:	2300      	movs	r3, #0
 8004a68:	f7fb ff32 	bl	80008d0 <__aeabi_dcmpgt>
 8004a6c:	b138      	cbz	r0, 8004a7e <floor+0x46>
 8004a6e:	2c00      	cmp	r4, #0
 8004a70:	da53      	bge.n	8004b1a <floor+0xe2>
 8004a72:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8004a76:	4325      	orrs	r5, r4
 8004a78:	d052      	beq.n	8004b20 <floor+0xe8>
 8004a7a:	4c2d      	ldr	r4, [pc, #180]	; (8004b30 <floor+0xf8>)
 8004a7c:	2500      	movs	r5, #0
 8004a7e:	4621      	mov	r1, r4
 8004a80:	4628      	mov	r0, r5
 8004a82:	e024      	b.n	8004ace <floor+0x96>
 8004a84:	4f2b      	ldr	r7, [pc, #172]	; (8004b34 <floor+0xfc>)
 8004a86:	4137      	asrs	r7, r6
 8004a88:	ea01 0307 	and.w	r3, r1, r7
 8004a8c:	4303      	orrs	r3, r0
 8004a8e:	d01e      	beq.n	8004ace <floor+0x96>
 8004a90:	a325      	add	r3, pc, #148	; (adr r3, 8004b28 <floor+0xf0>)
 8004a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a96:	f7fb fce7 	bl	8000468 <__adddf3>
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	f7fb ff17 	bl	80008d0 <__aeabi_dcmpgt>
 8004aa2:	2800      	cmp	r0, #0
 8004aa4:	d0eb      	beq.n	8004a7e <floor+0x46>
 8004aa6:	2c00      	cmp	r4, #0
 8004aa8:	bfbe      	ittt	lt
 8004aaa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8004aae:	4133      	asrlt	r3, r6
 8004ab0:	18e4      	addlt	r4, r4, r3
 8004ab2:	ea24 0407 	bic.w	r4, r4, r7
 8004ab6:	2500      	movs	r5, #0
 8004ab8:	e7e1      	b.n	8004a7e <floor+0x46>
 8004aba:	2e33      	cmp	r6, #51	; 0x33
 8004abc:	dd0b      	ble.n	8004ad6 <floor+0x9e>
 8004abe:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004ac2:	d104      	bne.n	8004ace <floor+0x96>
 8004ac4:	ee10 2a10 	vmov	r2, s0
 8004ac8:	460b      	mov	r3, r1
 8004aca:	f7fb fccd 	bl	8000468 <__adddf3>
 8004ace:	ec41 0b10 	vmov	d0, r0, r1
 8004ad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ad6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8004ada:	f04f 37ff 	mov.w	r7, #4294967295
 8004ade:	40df      	lsrs	r7, r3
 8004ae0:	4238      	tst	r0, r7
 8004ae2:	d0f4      	beq.n	8004ace <floor+0x96>
 8004ae4:	a310      	add	r3, pc, #64	; (adr r3, 8004b28 <floor+0xf0>)
 8004ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aea:	f7fb fcbd 	bl	8000468 <__adddf3>
 8004aee:	2200      	movs	r2, #0
 8004af0:	2300      	movs	r3, #0
 8004af2:	f7fb feed 	bl	80008d0 <__aeabi_dcmpgt>
 8004af6:	2800      	cmp	r0, #0
 8004af8:	d0c1      	beq.n	8004a7e <floor+0x46>
 8004afa:	2c00      	cmp	r4, #0
 8004afc:	da0a      	bge.n	8004b14 <floor+0xdc>
 8004afe:	2e14      	cmp	r6, #20
 8004b00:	d101      	bne.n	8004b06 <floor+0xce>
 8004b02:	3401      	adds	r4, #1
 8004b04:	e006      	b.n	8004b14 <floor+0xdc>
 8004b06:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	40b3      	lsls	r3, r6
 8004b0e:	441d      	add	r5, r3
 8004b10:	45a8      	cmp	r8, r5
 8004b12:	d8f6      	bhi.n	8004b02 <floor+0xca>
 8004b14:	ea25 0507 	bic.w	r5, r5, r7
 8004b18:	e7b1      	b.n	8004a7e <floor+0x46>
 8004b1a:	2500      	movs	r5, #0
 8004b1c:	462c      	mov	r4, r5
 8004b1e:	e7ae      	b.n	8004a7e <floor+0x46>
 8004b20:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8004b24:	e7ab      	b.n	8004a7e <floor+0x46>
 8004b26:	bf00      	nop
 8004b28:	8800759c 	.word	0x8800759c
 8004b2c:	7e37e43c 	.word	0x7e37e43c
 8004b30:	bff00000 	.word	0xbff00000
 8004b34:	000fffff 	.word	0x000fffff

08004b38 <_init>:
 8004b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b3a:	bf00      	nop
 8004b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b3e:	bc08      	pop	{r3}
 8004b40:	469e      	mov	lr, r3
 8004b42:	4770      	bx	lr

08004b44 <_fini>:
 8004b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b46:	bf00      	nop
 8004b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b4a:	bc08      	pop	{r3}
 8004b4c:	469e      	mov	lr, r3
 8004b4e:	4770      	bx	lr
